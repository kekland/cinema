// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// Generated file, do not edit.
// Generated by jnigen
//
// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `android.app.Activity$ScreenCaptureCallback`
class Activity$ScreenCaptureCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Activity$ScreenCaptureCallback> $type;

  @jni$_.internal
  Activity$ScreenCaptureCallback.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/app/Activity$ScreenCaptureCallback');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Activity$ScreenCaptureCallback$NullableType();
  static const type = $Activity$ScreenCaptureCallback$Type();
  static final _id_onScreenCaptured = _class.instanceMethodId(
    r'onScreenCaptured',
    r'()V',
  );

  static final _onScreenCaptured =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract void onScreenCaptured()`
  void onScreenCaptured() {
    _onScreenCaptured(reference.pointer, _id_onScreenCaptured as jni$_.JMethodIDPtr).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $Activity$ScreenCaptureCallback> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onScreenCaptured()V') {
        _$impls[$p]!.onScreenCaptured();
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $Activity$ScreenCaptureCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.app.Activity$ScreenCaptureCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onScreenCaptured$async) r'onScreenCaptured()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Activity$ScreenCaptureCallback.implement(
    $Activity$ScreenCaptureCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return Activity$ScreenCaptureCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Activity$ScreenCaptureCallback {
  factory $Activity$ScreenCaptureCallback({
    required void Function() onScreenCaptured,
    bool onScreenCaptured$async,
  }) = _$Activity$ScreenCaptureCallback;

  void onScreenCaptured();
  bool get onScreenCaptured$async => false;
}

final class _$Activity$ScreenCaptureCallback with $Activity$ScreenCaptureCallback {
  _$Activity$ScreenCaptureCallback({
    required void Function() onScreenCaptured,
    this.onScreenCaptured$async = false,
  }) : _onScreenCaptured = onScreenCaptured;

  final void Function() _onScreenCaptured;
  final bool onScreenCaptured$async;

  void onScreenCaptured() {
    return _onScreenCaptured();
  }
}

final class $Activity$ScreenCaptureCallback$NullableType extends jni$_.JObjType<Activity$ScreenCaptureCallback?> {
  @jni$_.internal
  const $Activity$ScreenCaptureCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Activity$ScreenCaptureCallback;';

  @jni$_.internal
  @core$_.override
  Activity$ScreenCaptureCallback? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Activity$ScreenCaptureCallback.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Activity$ScreenCaptureCallback?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Activity$ScreenCaptureCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity$ScreenCaptureCallback$NullableType) &&
        other is $Activity$ScreenCaptureCallback$NullableType;
  }
}

final class $Activity$ScreenCaptureCallback$Type extends jni$_.JObjType<Activity$ScreenCaptureCallback> {
  @jni$_.internal
  const $Activity$ScreenCaptureCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Activity$ScreenCaptureCallback;';

  @jni$_.internal
  @core$_.override
  Activity$ScreenCaptureCallback fromReference(jni$_.JReference reference) =>
      Activity$ScreenCaptureCallback.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Activity$ScreenCaptureCallback?> get nullableType =>
      const $Activity$ScreenCaptureCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Activity$ScreenCaptureCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity$ScreenCaptureCallback$Type) && other is $Activity$ScreenCaptureCallback$Type;
  }
}

/// from: `android.app.Activity`
class Activity extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Activity> $type;

  @jni$_.internal
  Activity.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/app/Activity');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Activity$NullableType();
  static const type = $Activity$Type();

  /// from: `static public final int DEFAULT_KEYS_DIALER`
  static const DEFAULT_KEYS_DIALER = 1;

  /// from: `static public final int DEFAULT_KEYS_DISABLE`
  static const DEFAULT_KEYS_DISABLE = 0;

  /// from: `static public final int DEFAULT_KEYS_SEARCH_GLOBAL`
  static const DEFAULT_KEYS_SEARCH_GLOBAL = 4;

  /// from: `static public final int DEFAULT_KEYS_SEARCH_LOCAL`
  static const DEFAULT_KEYS_SEARCH_LOCAL = 3;

  /// from: `static public final int DEFAULT_KEYS_SHORTCUT`
  static const DEFAULT_KEYS_SHORTCUT = 2;

  /// from: `static public final int FULLSCREEN_MODE_REQUEST_ENTER`
  static const FULLSCREEN_MODE_REQUEST_ENTER = 1;

  /// from: `static public final int FULLSCREEN_MODE_REQUEST_EXIT`
  static const FULLSCREEN_MODE_REQUEST_EXIT = 0;

  /// from: `static public final int OVERRIDE_TRANSITION_CLOSE`
  static const OVERRIDE_TRANSITION_CLOSE = 1;

  /// from: `static public final int OVERRIDE_TRANSITION_OPEN`
  static const OVERRIDE_TRANSITION_OPEN = 0;

  /// from: `static public final int RESULT_CANCELED`
  static const RESULT_CANCELED = 0;

  /// from: `static public final int RESULT_FIRST_USER`
  static const RESULT_FIRST_USER = 1;

  /// from: `static public final int RESULT_OK`
  static const RESULT_OK = -1;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Activity() {
    return Activity.fromReference(_new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference);
  }

  static final _id_addContentView = _class.instanceMethodId(
    r'addContentView',
    r'(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _addContentView =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)`
  void addContentView(
    jni$_.JObject? view,
    jni$_.JObject? layoutParams,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _addContentView(
      reference.pointer,
      _id_addContentView as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$layoutParams.pointer,
    ).check();
  }

  static final _id_clearOverrideActivityTransition = _class.instanceMethodId(
    r'clearOverrideActivityTransition',
    r'(I)V',
  );

  static final _clearOverrideActivityTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void clearOverrideActivityTransition(int i)`
  void clearOverrideActivityTransition(
    int i,
  ) {
    _clearOverrideActivityTransition(
      reference.pointer,
      _id_clearOverrideActivityTransition as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_closeContextMenu = _class.instanceMethodId(
    r'closeContextMenu',
    r'()V',
  );

  static final _closeContextMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void closeContextMenu()`
  void closeContextMenu() {
    _closeContextMenu(reference.pointer, _id_closeContextMenu as jni$_.JMethodIDPtr).check();
  }

  static final _id_closeOptionsMenu = _class.instanceMethodId(
    r'closeOptionsMenu',
    r'()V',
  );

  static final _closeOptionsMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void closeOptionsMenu()`
  void closeOptionsMenu() {
    _closeOptionsMenu(reference.pointer, _id_closeOptionsMenu as jni$_.JMethodIDPtr).check();
  }

  static final _id_createPendingResult = _class.instanceMethodId(
    r'createPendingResult',
    r'(ILandroid/content/Intent;I)Landroid/app/PendingIntent;',
  );

  static final _createPendingResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public android.app.PendingIntent createPendingResult(int i, android.content.Intent intent, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? createPendingResult(
    int i,
    jni$_.JObject? intent,
    int i1,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _createPendingResult(
      reference.pointer,
      _id_createPendingResult as jni$_.JMethodIDPtr,
      i,
      _$intent.pointer,
      i1,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_dismissDialog = _class.instanceMethodId(
    r'dismissDialog',
    r'(I)V',
  );

  static final _dismissDialog =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void dismissDialog(int i)`
  void dismissDialog(
    int i,
  ) {
    _dismissDialog(reference.pointer, _id_dismissDialog as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_dismissKeyboardShortcutsHelper = _class.instanceMethodId(
    r'dismissKeyboardShortcutsHelper',
    r'()V',
  );

  static final _dismissKeyboardShortcutsHelper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final void dismissKeyboardShortcutsHelper()`
  void dismissKeyboardShortcutsHelper() {
    _dismissKeyboardShortcutsHelper(
      reference.pointer,
      _id_dismissKeyboardShortcutsHelper as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_dispatchGenericMotionEvent = _class.instanceMethodId(
    r'dispatchGenericMotionEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchGenericMotionEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean dispatchGenericMotionEvent(android.view.MotionEvent motionEvent)`
  bool dispatchGenericMotionEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchGenericMotionEvent(
      reference.pointer,
      _id_dispatchGenericMotionEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchKeyEvent = _class.instanceMethodId(
    r'dispatchKeyEvent',
    r'(Landroid/view/KeyEvent;)Z',
  );

  static final _dispatchKeyEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)`
  bool dispatchKeyEvent(
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _dispatchKeyEvent(reference.pointer, _id_dispatchKeyEvent as jni$_.JMethodIDPtr, _$keyEvent.pointer).boolean;
  }

  static final _id_dispatchKeyShortcutEvent = _class.instanceMethodId(
    r'dispatchKeyShortcutEvent',
    r'(Landroid/view/KeyEvent;)Z',
  );

  static final _dispatchKeyShortcutEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean dispatchKeyShortcutEvent(android.view.KeyEvent keyEvent)`
  bool dispatchKeyShortcutEvent(
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _dispatchKeyShortcutEvent(
      reference.pointer,
      _id_dispatchKeyShortcutEvent as jni$_.JMethodIDPtr,
      _$keyEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchPopulateAccessibilityEvent = _class.instanceMethodId(
    r'dispatchPopulateAccessibilityEvent',
    r'(Landroid/view/accessibility/AccessibilityEvent;)Z',
  );

  static final _dispatchPopulateAccessibilityEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent accessibilityEvent)`
  bool dispatchPopulateAccessibilityEvent(
    jni$_.JObject? accessibilityEvent,
  ) {
    final _$accessibilityEvent = accessibilityEvent?.reference ?? jni$_.jNullReference;
    return _dispatchPopulateAccessibilityEvent(
      reference.pointer,
      _id_dispatchPopulateAccessibilityEvent as jni$_.JMethodIDPtr,
      _$accessibilityEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchTouchEvent = _class.instanceMethodId(
    r'dispatchTouchEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchTouchEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean dispatchTouchEvent(android.view.MotionEvent motionEvent)`
  bool dispatchTouchEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchTouchEvent(
      reference.pointer,
      _id_dispatchTouchEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchTrackballEvent = _class.instanceMethodId(
    r'dispatchTrackballEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchTrackballEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean dispatchTrackballEvent(android.view.MotionEvent motionEvent)`
  bool dispatchTrackballEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchTrackballEvent(
      reference.pointer,
      _id_dispatchTrackballEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_dump = _class.instanceMethodId(
    r'dump',
    r'(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V',
  );

  static final _dump =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void dump(java.lang.String string, java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strings)`
  void dump(
    jni$_.JString? string,
    jni$_.JObject? fileDescriptor,
    jni$_.JObject? printWriter,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$fileDescriptor = fileDescriptor?.reference ?? jni$_.jNullReference;
    final _$printWriter = printWriter?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _dump(
      reference.pointer,
      _id_dump as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$fileDescriptor.pointer,
      _$printWriter.pointer,
      _$strings.pointer,
    ).check();
  }

  static final _id_enterPictureInPictureMode = _class.instanceMethodId(
    r'enterPictureInPictureMode',
    r'()V',
  );

  static final _enterPictureInPictureMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void enterPictureInPictureMode()`
  void enterPictureInPictureMode() {
    _enterPictureInPictureMode(reference.pointer, _id_enterPictureInPictureMode as jni$_.JMethodIDPtr).check();
  }

  static final _id_enterPictureInPictureMode$1 = _class.instanceMethodId(
    r'enterPictureInPictureMode',
    r'(Landroid/app/PictureInPictureParams;)Z',
  );

  static final _enterPictureInPictureMode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean enterPictureInPictureMode(android.app.PictureInPictureParams pictureInPictureParams)`
  bool enterPictureInPictureMode$1(
    jni$_.JObject? pictureInPictureParams,
  ) {
    final _$pictureInPictureParams = pictureInPictureParams?.reference ?? jni$_.jNullReference;
    return _enterPictureInPictureMode$1(
      reference.pointer,
      _id_enterPictureInPictureMode$1 as jni$_.JMethodIDPtr,
      _$pictureInPictureParams.pointer,
    ).boolean;
  }

  static final _id_findViewById = _class.instanceMethodId(
    r'findViewById',
    r'(I)Landroid/view/View;',
  );

  static final _findViewById =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public T findViewById(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? findViewById<$T extends jni$_.JObject?>(
    int i, {
    required jni$_.JObjType<$T> T,
  }) {
    return _findViewById(reference.pointer, _id_findViewById as jni$_.JMethodIDPtr, i).object<$T?>(T.nullableType);
  }

  static final _id_finish = _class.instanceMethodId(
    r'finish',
    r'()V',
  );

  static final _finish =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void finish()`
  void finish() {
    _finish(reference.pointer, _id_finish as jni$_.JMethodIDPtr).check();
  }

  static final _id_finishActivity = _class.instanceMethodId(
    r'finishActivity',
    r'(I)V',
  );

  static final _finishActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void finishActivity(int i)`
  void finishActivity(
    int i,
  ) {
    _finishActivity(reference.pointer, _id_finishActivity as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_finishActivityFromChild = _class.instanceMethodId(
    r'finishActivityFromChild',
    r'(Landroid/app/Activity;I)V',
  );

  static final _finishActivityFromChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public void finishActivityFromChild(android.app.Activity activity, int i)`
  void finishActivityFromChild(
    Activity? activity,
    int i,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _finishActivityFromChild(
      reference.pointer,
      _id_finishActivityFromChild as jni$_.JMethodIDPtr,
      _$activity.pointer,
      i,
    ).check();
  }

  static final _id_finishAffinity = _class.instanceMethodId(
    r'finishAffinity',
    r'()V',
  );

  static final _finishAffinity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void finishAffinity()`
  void finishAffinity() {
    _finishAffinity(reference.pointer, _id_finishAffinity as jni$_.JMethodIDPtr).check();
  }

  static final _id_finishAfterTransition = _class.instanceMethodId(
    r'finishAfterTransition',
    r'()V',
  );

  static final _finishAfterTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void finishAfterTransition()`
  void finishAfterTransition() {
    _finishAfterTransition(reference.pointer, _id_finishAfterTransition as jni$_.JMethodIDPtr).check();
  }

  static final _id_finishAndRemoveTask = _class.instanceMethodId(
    r'finishAndRemoveTask',
    r'()V',
  );

  static final _finishAndRemoveTask =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void finishAndRemoveTask()`
  void finishAndRemoveTask() {
    _finishAndRemoveTask(reference.pointer, _id_finishAndRemoveTask as jni$_.JMethodIDPtr).check();
  }

  static final _id_finishFromChild = _class.instanceMethodId(
    r'finishFromChild',
    r'(Landroid/app/Activity;)V',
  );

  static final _finishFromChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void finishFromChild(android.app.Activity activity)`
  void finishFromChild(
    Activity? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _finishFromChild(reference.pointer, _id_finishFromChild as jni$_.JMethodIDPtr, _$activity.pointer).check();
  }

  static final _id_getActionBar = _class.instanceMethodId(
    r'getActionBar',
    r'()Landroid/app/ActionBar;',
  );

  static final _getActionBar =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.app.ActionBar getActionBar()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getActionBar() {
    return _getActionBar(
      reference.pointer,
      _id_getActionBar as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getApplication = _class.instanceMethodId(
    r'getApplication',
    r'()Landroid/app/Application;',
  );

  static final _getApplication =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final android.app.Application getApplication()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getApplication() {
    return _getApplication(
      reference.pointer,
      _id_getApplication as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCaller = _class.instanceMethodId(
    r'getCaller',
    r'()Landroid/app/ComponentCaller;',
  );

  static final _getCaller =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.app.ComponentCaller getCaller()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCaller() {
    return _getCaller(
      reference.pointer,
      _id_getCaller as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCallingActivity = _class.instanceMethodId(
    r'getCallingActivity',
    r'()Landroid/content/ComponentName;',
  );

  static final _getCallingActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.ComponentName getCallingActivity()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCallingActivity() {
    return _getCallingActivity(
      reference.pointer,
      _id_getCallingActivity as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCallingPackage = _class.instanceMethodId(
    r'getCallingPackage',
    r'()Ljava/lang/String;',
  );

  static final _getCallingPackage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getCallingPackage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getCallingPackage() {
    return _getCallingPackage(
      reference.pointer,
      _id_getCallingPackage as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getChangingConfigurations = _class.instanceMethodId(
    r'getChangingConfigurations',
    r'()I',
  );

  static final _getChangingConfigurations =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getChangingConfigurations()`
  int getChangingConfigurations() {
    return _getChangingConfigurations(reference.pointer, _id_getChangingConfigurations as jni$_.JMethodIDPtr).integer;
  }

  static final _id_getComponentName = _class.instanceMethodId(
    r'getComponentName',
    r'()Landroid/content/ComponentName;',
  );

  static final _getComponentName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.ComponentName getComponentName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getComponentName() {
    return _getComponentName(
      reference.pointer,
      _id_getComponentName as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getContentScene = _class.instanceMethodId(
    r'getContentScene',
    r'()Landroid/transition/Scene;',
  );

  static final _getContentScene =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.transition.Scene getContentScene()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getContentScene() {
    return _getContentScene(
      reference.pointer,
      _id_getContentScene as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getContentTransitionManager = _class.instanceMethodId(
    r'getContentTransitionManager',
    r'()Landroid/transition/TransitionManager;',
  );

  static final _getContentTransitionManager =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.transition.TransitionManager getContentTransitionManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getContentTransitionManager() {
    return _getContentTransitionManager(
      reference.pointer,
      _id_getContentTransitionManager as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCurrentCaller = _class.instanceMethodId(
    r'getCurrentCaller',
    r'()Landroid/app/ComponentCaller;',
  );

  static final _getCurrentCaller =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.app.ComponentCaller getCurrentCaller()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCurrentCaller() {
    return _getCurrentCaller(
      reference.pointer,
      _id_getCurrentCaller as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCurrentFocus = _class.instanceMethodId(
    r'getCurrentFocus',
    r'()Landroid/view/View;',
  );

  static final _getCurrentFocus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.View getCurrentFocus()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCurrentFocus() {
    return _getCurrentFocus(
      reference.pointer,
      _id_getCurrentFocus as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getFragmentManager = _class.instanceMethodId(
    r'getFragmentManager',
    r'()Landroid/app/FragmentManager;',
  );

  static final _getFragmentManager =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.app.FragmentManager getFragmentManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFragmentManager() {
    return _getFragmentManager(
      reference.pointer,
      _id_getFragmentManager as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getInitialCaller = _class.instanceMethodId(
    r'getInitialCaller',
    r'()Landroid/app/ComponentCaller;',
  );

  static final _getInitialCaller =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.app.ComponentCaller getInitialCaller()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getInitialCaller() {
    return _getInitialCaller(
      reference.pointer,
      _id_getInitialCaller as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getIntent = _class.instanceMethodId(
    r'getIntent',
    r'()Landroid/content/Intent;',
  );

  static final _getIntent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.Intent getIntent()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getIntent() {
    return _getIntent(
      reference.pointer,
      _id_getIntent as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getLastNonConfigurationInstance = _class.instanceMethodId(
    r'getLastNonConfigurationInstance',
    r'()Ljava/lang/Object;',
  );

  static final _getLastNonConfigurationInstance =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.Object getLastNonConfigurationInstance()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLastNonConfigurationInstance() {
    return _getLastNonConfigurationInstance(
      reference.pointer,
      _id_getLastNonConfigurationInstance as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getLaunchedFromPackage = _class.instanceMethodId(
    r'getLaunchedFromPackage',
    r'()Ljava/lang/String;',
  );

  static final _getLaunchedFromPackage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getLaunchedFromPackage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getLaunchedFromPackage() {
    return _getLaunchedFromPackage(
      reference.pointer,
      _id_getLaunchedFromPackage as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getLaunchedFromUid = _class.instanceMethodId(
    r'getLaunchedFromUid',
    r'()I',
  );

  static final _getLaunchedFromUid =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getLaunchedFromUid()`
  int getLaunchedFromUid() {
    return _getLaunchedFromUid(reference.pointer, _id_getLaunchedFromUid as jni$_.JMethodIDPtr).integer;
  }

  static final _id_getLayoutInflater = _class.instanceMethodId(
    r'getLayoutInflater',
    r'()Landroid/view/LayoutInflater;',
  );

  static final _getLayoutInflater =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.LayoutInflater getLayoutInflater()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLayoutInflater() {
    return _getLayoutInflater(
      reference.pointer,
      _id_getLayoutInflater as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getLoaderManager = _class.instanceMethodId(
    r'getLoaderManager',
    r'()Landroid/app/LoaderManager;',
  );

  static final _getLoaderManager =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.app.LoaderManager getLoaderManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLoaderManager() {
    return _getLoaderManager(
      reference.pointer,
      _id_getLoaderManager as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getLocalClassName = _class.instanceMethodId(
    r'getLocalClassName',
    r'()Ljava/lang/String;',
  );

  static final _getLocalClassName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getLocalClassName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getLocalClassName() {
    return _getLocalClassName(
      reference.pointer,
      _id_getLocalClassName as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getMaxNumPictureInPictureActions = _class.instanceMethodId(
    r'getMaxNumPictureInPictureActions',
    r'()I',
  );

  static final _getMaxNumPictureInPictureActions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getMaxNumPictureInPictureActions()`
  int getMaxNumPictureInPictureActions() {
    return _getMaxNumPictureInPictureActions(
      reference.pointer,
      _id_getMaxNumPictureInPictureActions as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getMediaController = _class.instanceMethodId(
    r'getMediaController',
    r'()Landroid/media/session/MediaController;',
  );

  static final _getMediaController =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final android.media.session.MediaController getMediaController()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMediaController() {
    return _getMediaController(
      reference.pointer,
      _id_getMediaController as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMenuInflater = _class.instanceMethodId(
    r'getMenuInflater',
    r'()Landroid/view/MenuInflater;',
  );

  static final _getMenuInflater =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.MenuInflater getMenuInflater()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMenuInflater() {
    return _getMenuInflater(
      reference.pointer,
      _id_getMenuInflater as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getOnBackInvokedDispatcher = _class.instanceMethodId(
    r'getOnBackInvokedDispatcher',
    r'()Landroid/window/OnBackInvokedDispatcher;',
  );

  static final _getOnBackInvokedDispatcher =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getOnBackInvokedDispatcher() {
    return _getOnBackInvokedDispatcher(
      reference.pointer,
      _id_getOnBackInvokedDispatcher as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getParent = _class.instanceMethodId(
    r'getParent',
    r'()Landroid/app/Activity;',
  );

  static final _getParent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final android.app.Activity getParent()`
  /// The returned object must be released after use, by calling the [release] method.
  Activity? getParent() {
    return _getParent(
      reference.pointer,
      _id_getParent as jni$_.JMethodIDPtr,
    ).object<Activity?>(const $Activity$NullableType());
  }

  static final _id_getParentActivityIntent = _class.instanceMethodId(
    r'getParentActivityIntent',
    r'()Landroid/content/Intent;',
  );

  static final _getParentActivityIntent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.Intent getParentActivityIntent()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getParentActivityIntent() {
    return _getParentActivityIntent(
      reference.pointer,
      _id_getParentActivityIntent as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPreferences = _class.instanceMethodId(
    r'getPreferences',
    r'(I)Landroid/content/SharedPreferences;',
  );

  static final _getPreferences =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.content.SharedPreferences getPreferences(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getPreferences(
    int i,
  ) {
    return _getPreferences(
      reference.pointer,
      _id_getPreferences as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getReferrer = _class.instanceMethodId(
    r'getReferrer',
    r'()Landroid/net/Uri;',
  );

  static final _getReferrer =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.net.Uri getReferrer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getReferrer() {
    return _getReferrer(
      reference.pointer,
      _id_getReferrer as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getRequestedOrientation = _class.instanceMethodId(
    r'getRequestedOrientation',
    r'()I',
  );

  static final _getRequestedOrientation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getRequestedOrientation()`
  int getRequestedOrientation() {
    return _getRequestedOrientation(reference.pointer, _id_getRequestedOrientation as jni$_.JMethodIDPtr).integer;
  }

  static final _id_getSearchEvent = _class.instanceMethodId(
    r'getSearchEvent',
    r'()Landroid/view/SearchEvent;',
  );

  static final _getSearchEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final android.view.SearchEvent getSearchEvent()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSearchEvent() {
    return _getSearchEvent(
      reference.pointer,
      _id_getSearchEvent as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSplashScreen = _class.instanceMethodId(
    r'getSplashScreen',
    r'()Landroid/window/SplashScreen;',
  );

  static final _getSplashScreen =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final android.window.SplashScreen getSplashScreen()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSplashScreen() {
    return _getSplashScreen(
      reference.pointer,
      _id_getSplashScreen as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _getSystemService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.lang.Object getSystemService(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSystemService(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSystemService(
      reference.pointer,
      _id_getSystemService as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getTaskId = _class.instanceMethodId(
    r'getTaskId',
    r'()I',
  );

  static final _getTaskId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getTaskId()`
  int getTaskId() {
    return _getTaskId(reference.pointer, _id_getTaskId as jni$_.JMethodIDPtr).integer;
  }

  static final _id_getTitle = _class.instanceMethodId(
    r'getTitle',
    r'()Ljava/lang/CharSequence;',
  );

  static final _getTitle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final java.lang.CharSequence getTitle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getTitle() {
    return _getTitle(
      reference.pointer,
      _id_getTitle as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getTitleColor = _class.instanceMethodId(
    r'getTitleColor',
    r'()I',
  );

  static final _getTitleColor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final int getTitleColor()`
  int getTitleColor() {
    return _getTitleColor(reference.pointer, _id_getTitleColor as jni$_.JMethodIDPtr).integer;
  }

  static final _id_getVoiceInteractor = _class.instanceMethodId(
    r'getVoiceInteractor',
    r'()Landroid/app/VoiceInteractor;',
  );

  static final _getVoiceInteractor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.app.VoiceInteractor getVoiceInteractor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getVoiceInteractor() {
    return _getVoiceInteractor(
      reference.pointer,
      _id_getVoiceInteractor as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getVolumeControlStream = _class.instanceMethodId(
    r'getVolumeControlStream',
    r'()I',
  );

  static final _getVolumeControlStream =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final int getVolumeControlStream()`
  int getVolumeControlStream() {
    return _getVolumeControlStream(reference.pointer, _id_getVolumeControlStream as jni$_.JMethodIDPtr).integer;
  }

  static final _id_getWindow = _class.instanceMethodId(
    r'getWindow',
    r'()Landroid/view/Window;',
  );

  static final _getWindow =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.Window getWindow()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getWindow() {
    return _getWindow(
      reference.pointer,
      _id_getWindow as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getWindowManager = _class.instanceMethodId(
    r'getWindowManager',
    r'()Landroid/view/WindowManager;',
  );

  static final _getWindowManager =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.WindowManager getWindowManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getWindowManager() {
    return _getWindowManager(
      reference.pointer,
      _id_getWindowManager as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_hasWindowFocus = _class.instanceMethodId(
    r'hasWindowFocus',
    r'()Z',
  );

  static final _hasWindowFocus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean hasWindowFocus()`
  bool hasWindowFocus() {
    return _hasWindowFocus(reference.pointer, _id_hasWindowFocus as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_invalidateOptionsMenu = _class.instanceMethodId(
    r'invalidateOptionsMenu',
    r'()V',
  );

  static final _invalidateOptionsMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void invalidateOptionsMenu()`
  void invalidateOptionsMenu() {
    _invalidateOptionsMenu(reference.pointer, _id_invalidateOptionsMenu as jni$_.JMethodIDPtr).check();
  }

  static final _id_isActivityTransitionRunning = _class.instanceMethodId(
    r'isActivityTransitionRunning',
    r'()Z',
  );

  static final _isActivityTransitionRunning =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isActivityTransitionRunning()`
  bool isActivityTransitionRunning() {
    return _isActivityTransitionRunning(
      reference.pointer,
      _id_isActivityTransitionRunning as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isChangingConfigurations = _class.instanceMethodId(
    r'isChangingConfigurations',
    r'()Z',
  );

  static final _isChangingConfigurations =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isChangingConfigurations()`
  bool isChangingConfigurations() {
    return _isChangingConfigurations(reference.pointer, _id_isChangingConfigurations as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isChild = _class.instanceMethodId(
    r'isChild',
    r'()Z',
  );

  static final _isChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final boolean isChild()`
  bool isChild() {
    return _isChild(reference.pointer, _id_isChild as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isDestroyed = _class.instanceMethodId(
    r'isDestroyed',
    r'()Z',
  );

  static final _isDestroyed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isDestroyed()`
  bool isDestroyed() {
    return _isDestroyed(reference.pointer, _id_isDestroyed as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isFinishing = _class.instanceMethodId(
    r'isFinishing',
    r'()Z',
  );

  static final _isFinishing =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isFinishing()`
  bool isFinishing() {
    return _isFinishing(reference.pointer, _id_isFinishing as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isImmersive = _class.instanceMethodId(
    r'isImmersive',
    r'()Z',
  );

  static final _isImmersive =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isImmersive()`
  bool isImmersive() {
    return _isImmersive(reference.pointer, _id_isImmersive as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isInMultiWindowMode = _class.instanceMethodId(
    r'isInMultiWindowMode',
    r'()Z',
  );

  static final _isInMultiWindowMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isInMultiWindowMode()`
  bool isInMultiWindowMode() {
    return _isInMultiWindowMode(reference.pointer, _id_isInMultiWindowMode as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isInPictureInPictureMode = _class.instanceMethodId(
    r'isInPictureInPictureMode',
    r'()Z',
  );

  static final _isInPictureInPictureMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isInPictureInPictureMode()`
  bool isInPictureInPictureMode() {
    return _isInPictureInPictureMode(reference.pointer, _id_isInPictureInPictureMode as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isLaunchedFromBubble = _class.instanceMethodId(
    r'isLaunchedFromBubble',
    r'()Z',
  );

  static final _isLaunchedFromBubble =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isLaunchedFromBubble()`
  bool isLaunchedFromBubble() {
    return _isLaunchedFromBubble(reference.pointer, _id_isLaunchedFromBubble as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isLocalVoiceInteractionSupported = _class.instanceMethodId(
    r'isLocalVoiceInteractionSupported',
    r'()Z',
  );

  static final _isLocalVoiceInteractionSupported =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isLocalVoiceInteractionSupported()`
  bool isLocalVoiceInteractionSupported() {
    return _isLocalVoiceInteractionSupported(
      reference.pointer,
      _id_isLocalVoiceInteractionSupported as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_isTaskRoot = _class.instanceMethodId(
    r'isTaskRoot',
    r'()Z',
  );

  static final _isTaskRoot =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isTaskRoot()`
  bool isTaskRoot() {
    return _isTaskRoot(reference.pointer, _id_isTaskRoot as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isVoiceInteraction = _class.instanceMethodId(
    r'isVoiceInteraction',
    r'()Z',
  );

  static final _isVoiceInteraction =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isVoiceInteraction()`
  bool isVoiceInteraction() {
    return _isVoiceInteraction(reference.pointer, _id_isVoiceInteraction as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isVoiceInteractionRoot = _class.instanceMethodId(
    r'isVoiceInteractionRoot',
    r'()Z',
  );

  static final _isVoiceInteractionRoot =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isVoiceInteractionRoot()`
  bool isVoiceInteractionRoot() {
    return _isVoiceInteractionRoot(reference.pointer, _id_isVoiceInteractionRoot as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_managedQuery = _class.instanceMethodId(
    r'managedQuery',
    r'(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;',
  );

  static final _managedQuery =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final android.database.Cursor managedQuery(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? managedQuery(
    jni$_.JObject? uri,
    jni$_.JArray<jni$_.JString?>? strings,
    jni$_.JString? string,
    jni$_.JArray<jni$_.JString?>? strings1,
    jni$_.JString? string1,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$strings1 = strings1?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _managedQuery(
      reference.pointer,
      _id_managedQuery as jni$_.JMethodIDPtr,
      _$uri.pointer,
      _$strings.pointer,
      _$string.pointer,
      _$strings1.pointer,
      _$string1.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_moveTaskToBack = _class.instanceMethodId(
    r'moveTaskToBack',
    r'(Z)Z',
  );

  static final _moveTaskToBack =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public boolean moveTaskToBack(boolean z)`
  bool moveTaskToBack(
    bool z,
  ) {
    return _moveTaskToBack(reference.pointer, _id_moveTaskToBack as jni$_.JMethodIDPtr, z ? 1 : 0).boolean;
  }

  static final _id_navigateUpTo = _class.instanceMethodId(
    r'navigateUpTo',
    r'(Landroid/content/Intent;)Z',
  );

  static final _navigateUpTo =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean navigateUpTo(android.content.Intent intent)`
  bool navigateUpTo(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _navigateUpTo(reference.pointer, _id_navigateUpTo as jni$_.JMethodIDPtr, _$intent.pointer).boolean;
  }

  static final _id_navigateUpToFromChild = _class.instanceMethodId(
    r'navigateUpToFromChild',
    r'(Landroid/app/Activity;Landroid/content/Intent;)Z',
  );

  static final _navigateUpToFromChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean navigateUpToFromChild(android.app.Activity activity, android.content.Intent intent)`
  bool navigateUpToFromChild(
    Activity? activity,
    jni$_.JObject? intent,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _navigateUpToFromChild(
      reference.pointer,
      _id_navigateUpToFromChild as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$intent.pointer,
    ).boolean;
  }

  static final _id_onActionModeFinished = _class.instanceMethodId(
    r'onActionModeFinished',
    r'(Landroid/view/ActionMode;)V',
  );

  static final _onActionModeFinished =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onActionModeFinished(android.view.ActionMode actionMode)`
  void onActionModeFinished(
    jni$_.JObject? actionMode,
  ) {
    final _$actionMode = actionMode?.reference ?? jni$_.jNullReference;
    _onActionModeFinished(
      reference.pointer,
      _id_onActionModeFinished as jni$_.JMethodIDPtr,
      _$actionMode.pointer,
    ).check();
  }

  static final _id_onActionModeStarted = _class.instanceMethodId(
    r'onActionModeStarted',
    r'(Landroid/view/ActionMode;)V',
  );

  static final _onActionModeStarted =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onActionModeStarted(android.view.ActionMode actionMode)`
  void onActionModeStarted(
    jni$_.JObject? actionMode,
  ) {
    final _$actionMode = actionMode?.reference ?? jni$_.jNullReference;
    _onActionModeStarted(
      reference.pointer,
      _id_onActionModeStarted as jni$_.JMethodIDPtr,
      _$actionMode.pointer,
    ).check();
  }

  static final _id_onActivityReenter = _class.instanceMethodId(
    r'onActivityReenter',
    r'(ILandroid/content/Intent;)V',
  );

  static final _onActivityReenter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onActivityReenter(int i, android.content.Intent intent)`
  void onActivityReenter(
    int i,
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _onActivityReenter(reference.pointer, _id_onActivityReenter as jni$_.JMethodIDPtr, i, _$intent.pointer).check();
  }

  static final _id_onActivityResult = _class.instanceMethodId(
    r'onActivityResult',
    r'(IILandroid/content/Intent;Landroid/app/ComponentCaller;)V',
  );

  static final _onActivityResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onActivityResult(int i, int i1, android.content.Intent intent, android.app.ComponentCaller componentCaller)`
  void onActivityResult(
    int i,
    int i1,
    jni$_.JObject? intent,
    jni$_.JObject? componentCaller,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$componentCaller = componentCaller?.reference ?? jni$_.jNullReference;
    _onActivityResult(
      reference.pointer,
      _id_onActivityResult as jni$_.JMethodIDPtr,
      i,
      i1,
      _$intent.pointer,
      _$componentCaller.pointer,
    ).check();
  }

  static final _id_onAttachFragment = _class.instanceMethodId(
    r'onAttachFragment',
    r'(Landroid/app/Fragment;)V',
  );

  static final _onAttachFragment =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onAttachFragment(android.app.Fragment fragment)`
  void onAttachFragment(
    jni$_.JObject? fragment,
  ) {
    final _$fragment = fragment?.reference ?? jni$_.jNullReference;
    _onAttachFragment(reference.pointer, _id_onAttachFragment as jni$_.JMethodIDPtr, _$fragment.pointer).check();
  }

  static final _id_onAttachedToWindow = _class.instanceMethodId(
    r'onAttachedToWindow',
    r'()V',
  );

  static final _onAttachedToWindow =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onAttachedToWindow()`
  void onAttachedToWindow() {
    _onAttachedToWindow(reference.pointer, _id_onAttachedToWindow as jni$_.JMethodIDPtr).check();
  }

  static final _id_onBackPressed = _class.instanceMethodId(
    r'onBackPressed',
    r'()V',
  );

  static final _onBackPressed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onBackPressed()`
  void onBackPressed() {
    _onBackPressed(reference.pointer, _id_onBackPressed as jni$_.JMethodIDPtr).check();
  }

  static final _id_onConfigurationChanged = _class.instanceMethodId(
    r'onConfigurationChanged',
    r'(Landroid/content/res/Configuration;)V',
  );

  static final _onConfigurationChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onConfigurationChanged(android.content.res.Configuration configuration)`
  void onConfigurationChanged(
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    _onConfigurationChanged(
      reference.pointer,
      _id_onConfigurationChanged as jni$_.JMethodIDPtr,
      _$configuration.pointer,
    ).check();
  }

  static final _id_onContentChanged = _class.instanceMethodId(
    r'onContentChanged',
    r'()V',
  );

  static final _onContentChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onContentChanged()`
  void onContentChanged() {
    _onContentChanged(reference.pointer, _id_onContentChanged as jni$_.JMethodIDPtr).check();
  }

  static final _id_onContextItemSelected = _class.instanceMethodId(
    r'onContextItemSelected',
    r'(Landroid/view/MenuItem;)Z',
  );

  static final _onContextItemSelected =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onContextItemSelected(android.view.MenuItem menuItem)`
  bool onContextItemSelected(
    jni$_.JObject? menuItem,
  ) {
    final _$menuItem = menuItem?.reference ?? jni$_.jNullReference;
    return _onContextItemSelected(
      reference.pointer,
      _id_onContextItemSelected as jni$_.JMethodIDPtr,
      _$menuItem.pointer,
    ).boolean;
  }

  static final _id_onContextMenuClosed = _class.instanceMethodId(
    r'onContextMenuClosed',
    r'(Landroid/view/Menu;)V',
  );

  static final _onContextMenuClosed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onContextMenuClosed(android.view.Menu menu)`
  void onContextMenuClosed(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onContextMenuClosed(reference.pointer, _id_onContextMenuClosed as jni$_.JMethodIDPtr, _$menu.pointer).check();
  }

  static final _id_onCreate = _class.instanceMethodId(
    r'onCreate',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onCreate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onCreate(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle = persistableBundle?.reference ?? jni$_.jNullReference;
    _onCreate(
      reference.pointer,
      _id_onCreate as jni$_.JMethodIDPtr,
      _$bundle.pointer,
      _$persistableBundle.pointer,
    ).check();
  }

  static final _id_onCreateContextMenu = _class.instanceMethodId(
    r'onCreateContextMenu',
    r'(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V',
  );

  static final _onCreateContextMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onCreateContextMenu(android.view.ContextMenu contextMenu, android.view.View view, android.view.ContextMenu$ContextMenuInfo contextMenuInfo)`
  void onCreateContextMenu(
    jni$_.JObject? contextMenu,
    jni$_.JObject? view,
    jni$_.JObject? contextMenuInfo,
  ) {
    final _$contextMenu = contextMenu?.reference ?? jni$_.jNullReference;
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$contextMenuInfo = contextMenuInfo?.reference ?? jni$_.jNullReference;
    _onCreateContextMenu(
      reference.pointer,
      _id_onCreateContextMenu as jni$_.JMethodIDPtr,
      _$contextMenu.pointer,
      _$view.pointer,
      _$contextMenuInfo.pointer,
    ).check();
  }

  static final _id_onCreateDescription = _class.instanceMethodId(
    r'onCreateDescription',
    r'()Ljava/lang/CharSequence;',
  );

  static final _onCreateDescription =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.CharSequence onCreateDescription()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreateDescription() {
    return _onCreateDescription(
      reference.pointer,
      _id_onCreateDescription as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onCreateNavigateUpTaskStack = _class.instanceMethodId(
    r'onCreateNavigateUpTaskStack',
    r'(Landroid/app/TaskStackBuilder;)V',
  );

  static final _onCreateNavigateUpTaskStack =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)`
  void onCreateNavigateUpTaskStack(
    jni$_.JObject? taskStackBuilder,
  ) {
    final _$taskStackBuilder = taskStackBuilder?.reference ?? jni$_.jNullReference;
    _onCreateNavigateUpTaskStack(
      reference.pointer,
      _id_onCreateNavigateUpTaskStack as jni$_.JMethodIDPtr,
      _$taskStackBuilder.pointer,
    ).check();
  }

  static final _id_onCreateOptionsMenu = _class.instanceMethodId(
    r'onCreateOptionsMenu',
    r'(Landroid/view/Menu;)Z',
  );

  static final _onCreateOptionsMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onCreateOptionsMenu(android.view.Menu menu)`
  bool onCreateOptionsMenu(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onCreateOptionsMenu(
      reference.pointer,
      _id_onCreateOptionsMenu as jni$_.JMethodIDPtr,
      _$menu.pointer,
    ).boolean;
  }

  static final _id_onCreatePanelMenu = _class.instanceMethodId(
    r'onCreatePanelMenu',
    r'(ILandroid/view/Menu;)Z',
  );

  static final _onCreatePanelMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onCreatePanelMenu(int i, android.view.Menu menu)`
  bool onCreatePanelMenu(
    int i,
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onCreatePanelMenu(
      reference.pointer,
      _id_onCreatePanelMenu as jni$_.JMethodIDPtr,
      i,
      _$menu.pointer,
    ).boolean;
  }

  static final _id_onCreatePanelView = _class.instanceMethodId(
    r'onCreatePanelView',
    r'(I)Landroid/view/View;',
  );

  static final _onCreatePanelView =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.view.View onCreatePanelView(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreatePanelView(
    int i,
  ) {
    return _onCreatePanelView(
      reference.pointer,
      _id_onCreatePanelView as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onCreateThumbnail = _class.instanceMethodId(
    r'onCreateThumbnail',
    r'(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;)Z',
  );

  static final _onCreateThumbnail =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean onCreateThumbnail(android.graphics.Bitmap bitmap, android.graphics.Canvas canvas)`
  bool onCreateThumbnail(
    jni$_.JObject? bitmap,
    jni$_.JObject? canvas,
  ) {
    final _$bitmap = bitmap?.reference ?? jni$_.jNullReference;
    final _$canvas = canvas?.reference ?? jni$_.jNullReference;
    return _onCreateThumbnail(
      reference.pointer,
      _id_onCreateThumbnail as jni$_.JMethodIDPtr,
      _$bitmap.pointer,
      _$canvas.pointer,
    ).boolean;
  }

  static final _id_onCreateView = _class.instanceMethodId(
    r'onCreateView',
    r'(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;',
  );

  static final _onCreateView =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.view.View onCreateView(android.view.View view, java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreateView(
    jni$_.JObject? view,
    jni$_.JString? string,
    Context? context,
    jni$_.JObject? attributeSet,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return _onCreateView(
      reference.pointer,
      _id_onCreateView as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$string.pointer,
      _$context.pointer,
      _$attributeSet.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onCreateView$1 = _class.instanceMethodId(
    r'onCreateView',
    r'(Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;',
  );

  static final _onCreateView$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.view.View onCreateView(java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreateView$1(
    jni$_.JString? string,
    Context? context,
    jni$_.JObject? attributeSet,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return _onCreateView$1(
      reference.pointer,
      _id_onCreateView$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$context.pointer,
      _$attributeSet.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onDetachedFromWindow = _class.instanceMethodId(
    r'onDetachedFromWindow',
    r'()V',
  );

  static final _onDetachedFromWindow =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onDetachedFromWindow()`
  void onDetachedFromWindow() {
    _onDetachedFromWindow(reference.pointer, _id_onDetachedFromWindow as jni$_.JMethodIDPtr).check();
  }

  static final _id_onEnterAnimationComplete = _class.instanceMethodId(
    r'onEnterAnimationComplete',
    r'()V',
  );

  static final _onEnterAnimationComplete =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onEnterAnimationComplete()`
  void onEnterAnimationComplete() {
    _onEnterAnimationComplete(reference.pointer, _id_onEnterAnimationComplete as jni$_.JMethodIDPtr).check();
  }

  static final _id_onGenericMotionEvent = _class.instanceMethodId(
    r'onGenericMotionEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onGenericMotionEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)`
  bool onGenericMotionEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onGenericMotionEvent(
      reference.pointer,
      _id_onGenericMotionEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_onGetDirectActions = _class.instanceMethodId(
    r'onGetDirectActions',
    r'(Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V',
  );

  static final _onGetDirectActions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onGetDirectActions(android.os.CancellationSignal cancellationSignal, java.util.function.Consumer<java.util.List<android.app.DirectAction>> consumer)`
  void onGetDirectActions(
    jni$_.JObject? cancellationSignal,
    jni$_.JObject? consumer,
  ) {
    final _$cancellationSignal = cancellationSignal?.reference ?? jni$_.jNullReference;
    final _$consumer = consumer?.reference ?? jni$_.jNullReference;
    _onGetDirectActions(
      reference.pointer,
      _id_onGetDirectActions as jni$_.JMethodIDPtr,
      _$cancellationSignal.pointer,
      _$consumer.pointer,
    ).check();
  }

  static final _id_onKeyDown = _class.instanceMethodId(
    r'onKeyDown',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyDown =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)`
  bool onKeyDown(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyDown(reference.pointer, _id_onKeyDown as jni$_.JMethodIDPtr, i, _$keyEvent.pointer).boolean;
  }

  static final _id_onKeyLongPress = _class.instanceMethodId(
    r'onKeyLongPress',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyLongPress =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onKeyLongPress(int i, android.view.KeyEvent keyEvent)`
  bool onKeyLongPress(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyLongPress(reference.pointer, _id_onKeyLongPress as jni$_.JMethodIDPtr, i, _$keyEvent.pointer).boolean;
  }

  static final _id_onKeyMultiple = _class.instanceMethodId(
    r'onKeyMultiple',
    r'(IILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyMultiple =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onKeyMultiple(int i, int i1, android.view.KeyEvent keyEvent)`
  bool onKeyMultiple(
    int i,
    int i1,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyMultiple(
      reference.pointer,
      _id_onKeyMultiple as jni$_.JMethodIDPtr,
      i,
      i1,
      _$keyEvent.pointer,
    ).boolean;
  }

  static final _id_onKeyShortcut = _class.instanceMethodId(
    r'onKeyShortcut',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyShortcut =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onKeyShortcut(int i, android.view.KeyEvent keyEvent)`
  bool onKeyShortcut(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyShortcut(reference.pointer, _id_onKeyShortcut as jni$_.JMethodIDPtr, i, _$keyEvent.pointer).boolean;
  }

  static final _id_onKeyUp = _class.instanceMethodId(
    r'onKeyUp',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyUp =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)`
  bool onKeyUp(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyUp(reference.pointer, _id_onKeyUp as jni$_.JMethodIDPtr, i, _$keyEvent.pointer).boolean;
  }

  static final _id_onLocalVoiceInteractionStarted = _class.instanceMethodId(
    r'onLocalVoiceInteractionStarted',
    r'()V',
  );

  static final _onLocalVoiceInteractionStarted =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onLocalVoiceInteractionStarted()`
  void onLocalVoiceInteractionStarted() {
    _onLocalVoiceInteractionStarted(
      reference.pointer,
      _id_onLocalVoiceInteractionStarted as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_onLocalVoiceInteractionStopped = _class.instanceMethodId(
    r'onLocalVoiceInteractionStopped',
    r'()V',
  );

  static final _onLocalVoiceInteractionStopped =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onLocalVoiceInteractionStopped()`
  void onLocalVoiceInteractionStopped() {
    _onLocalVoiceInteractionStopped(
      reference.pointer,
      _id_onLocalVoiceInteractionStopped as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_onLowMemory = _class.instanceMethodId(
    r'onLowMemory',
    r'()V',
  );

  static final _onLowMemory =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onLowMemory()`
  void onLowMemory() {
    _onLowMemory(reference.pointer, _id_onLowMemory as jni$_.JMethodIDPtr).check();
  }

  static final _id_onMenuItemSelected = _class.instanceMethodId(
    r'onMenuItemSelected',
    r'(ILandroid/view/MenuItem;)Z',
  );

  static final _onMenuItemSelected =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onMenuItemSelected(int i, android.view.MenuItem menuItem)`
  bool onMenuItemSelected(
    int i,
    jni$_.JObject? menuItem,
  ) {
    final _$menuItem = menuItem?.reference ?? jni$_.jNullReference;
    return _onMenuItemSelected(
      reference.pointer,
      _id_onMenuItemSelected as jni$_.JMethodIDPtr,
      i,
      _$menuItem.pointer,
    ).boolean;
  }

  static final _id_onMenuOpened = _class.instanceMethodId(
    r'onMenuOpened',
    r'(ILandroid/view/Menu;)Z',
  );

  static final _onMenuOpened =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onMenuOpened(int i, android.view.Menu menu)`
  bool onMenuOpened(
    int i,
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onMenuOpened(reference.pointer, _id_onMenuOpened as jni$_.JMethodIDPtr, i, _$menu.pointer).boolean;
  }

  static final _id_onMultiWindowModeChanged = _class.instanceMethodId(
    r'onMultiWindowModeChanged',
    r'(Z)V',
  );

  static final _onMultiWindowModeChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onMultiWindowModeChanged(boolean z)`
  void onMultiWindowModeChanged(
    bool z,
  ) {
    _onMultiWindowModeChanged(reference.pointer, _id_onMultiWindowModeChanged as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_onMultiWindowModeChanged$1 = _class.instanceMethodId(
    r'onMultiWindowModeChanged',
    r'(ZLandroid/content/res/Configuration;)V',
  );

  static final _onMultiWindowModeChanged$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onMultiWindowModeChanged(boolean z, android.content.res.Configuration configuration)`
  void onMultiWindowModeChanged$1(
    bool z,
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    _onMultiWindowModeChanged$1(
      reference.pointer,
      _id_onMultiWindowModeChanged$1 as jni$_.JMethodIDPtr,
      z ? 1 : 0,
      _$configuration.pointer,
    ).check();
  }

  static final _id_onNavigateUp = _class.instanceMethodId(
    r'onNavigateUp',
    r'()Z',
  );

  static final _onNavigateUp =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean onNavigateUp()`
  bool onNavigateUp() {
    return _onNavigateUp(reference.pointer, _id_onNavigateUp as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_onNavigateUpFromChild = _class.instanceMethodId(
    r'onNavigateUpFromChild',
    r'(Landroid/app/Activity;)Z',
  );

  static final _onNavigateUpFromChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onNavigateUpFromChild(android.app.Activity activity)`
  bool onNavigateUpFromChild(
    Activity? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    return _onNavigateUpFromChild(
      reference.pointer,
      _id_onNavigateUpFromChild as jni$_.JMethodIDPtr,
      _$activity.pointer,
    ).boolean;
  }

  static final _id_onNewIntent = _class.instanceMethodId(
    r'onNewIntent',
    r'(Landroid/content/Intent;Landroid/app/ComponentCaller;)V',
  );

  static final _onNewIntent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onNewIntent(android.content.Intent intent, android.app.ComponentCaller componentCaller)`
  void onNewIntent(
    jni$_.JObject? intent,
    jni$_.JObject? componentCaller,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$componentCaller = componentCaller?.reference ?? jni$_.jNullReference;
    _onNewIntent(
      reference.pointer,
      _id_onNewIntent as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$componentCaller.pointer,
    ).check();
  }

  static final _id_onOptionsItemSelected = _class.instanceMethodId(
    r'onOptionsItemSelected',
    r'(Landroid/view/MenuItem;)Z',
  );

  static final _onOptionsItemSelected =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onOptionsItemSelected(android.view.MenuItem menuItem)`
  bool onOptionsItemSelected(
    jni$_.JObject? menuItem,
  ) {
    final _$menuItem = menuItem?.reference ?? jni$_.jNullReference;
    return _onOptionsItemSelected(
      reference.pointer,
      _id_onOptionsItemSelected as jni$_.JMethodIDPtr,
      _$menuItem.pointer,
    ).boolean;
  }

  static final _id_onOptionsMenuClosed = _class.instanceMethodId(
    r'onOptionsMenuClosed',
    r'(Landroid/view/Menu;)V',
  );

  static final _onOptionsMenuClosed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onOptionsMenuClosed(android.view.Menu menu)`
  void onOptionsMenuClosed(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onOptionsMenuClosed(reference.pointer, _id_onOptionsMenuClosed as jni$_.JMethodIDPtr, _$menu.pointer).check();
  }

  static final _id_onPanelClosed = _class.instanceMethodId(
    r'onPanelClosed',
    r'(ILandroid/view/Menu;)V',
  );

  static final _onPanelClosed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onPanelClosed(int i, android.view.Menu menu)`
  void onPanelClosed(
    int i,
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onPanelClosed(reference.pointer, _id_onPanelClosed as jni$_.JMethodIDPtr, i, _$menu.pointer).check();
  }

  static final _id_onPerformDirectAction = _class.instanceMethodId(
    r'onPerformDirectAction',
    r'(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V',
  );

  static final _onPerformDirectAction =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onPerformDirectAction(java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal, java.util.function.Consumer<android.os.Bundle> consumer)`
  void onPerformDirectAction(
    jni$_.JString? string,
    jni$_.JObject? bundle,
    jni$_.JObject? cancellationSignal,
    jni$_.JObject? consumer,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$cancellationSignal = cancellationSignal?.reference ?? jni$_.jNullReference;
    final _$consumer = consumer?.reference ?? jni$_.jNullReference;
    _onPerformDirectAction(
      reference.pointer,
      _id_onPerformDirectAction as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$bundle.pointer,
      _$cancellationSignal.pointer,
      _$consumer.pointer,
    ).check();
  }

  static final _id_onPictureInPictureModeChanged = _class.instanceMethodId(
    r'onPictureInPictureModeChanged',
    r'(Z)V',
  );

  static final _onPictureInPictureModeChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onPictureInPictureModeChanged(boolean z)`
  void onPictureInPictureModeChanged(
    bool z,
  ) {
    _onPictureInPictureModeChanged(
      reference.pointer,
      _id_onPictureInPictureModeChanged as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_onPictureInPictureModeChanged$1 = _class.instanceMethodId(
    r'onPictureInPictureModeChanged',
    r'(ZLandroid/content/res/Configuration;)V',
  );

  static final _onPictureInPictureModeChanged$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onPictureInPictureModeChanged(boolean z, android.content.res.Configuration configuration)`
  void onPictureInPictureModeChanged$1(
    bool z,
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    _onPictureInPictureModeChanged$1(
      reference.pointer,
      _id_onPictureInPictureModeChanged$1 as jni$_.JMethodIDPtr,
      z ? 1 : 0,
      _$configuration.pointer,
    ).check();
  }

  static final _id_onPictureInPictureRequested = _class.instanceMethodId(
    r'onPictureInPictureRequested',
    r'()Z',
  );

  static final _onPictureInPictureRequested =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean onPictureInPictureRequested()`
  bool onPictureInPictureRequested() {
    return _onPictureInPictureRequested(
      reference.pointer,
      _id_onPictureInPictureRequested as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_onPictureInPictureUiStateChanged = _class.instanceMethodId(
    r'onPictureInPictureUiStateChanged',
    r'(Landroid/app/PictureInPictureUiState;)V',
  );

  static final _onPictureInPictureUiStateChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState pictureInPictureUiState)`
  void onPictureInPictureUiStateChanged(
    jni$_.JObject? pictureInPictureUiState,
  ) {
    final _$pictureInPictureUiState = pictureInPictureUiState?.reference ?? jni$_.jNullReference;
    _onPictureInPictureUiStateChanged(
      reference.pointer,
      _id_onPictureInPictureUiStateChanged as jni$_.JMethodIDPtr,
      _$pictureInPictureUiState.pointer,
    ).check();
  }

  static final _id_onPostCreate = _class.instanceMethodId(
    r'onPostCreate',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onPostCreate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onPostCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onPostCreate(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle = persistableBundle?.reference ?? jni$_.jNullReference;
    _onPostCreate(
      reference.pointer,
      _id_onPostCreate as jni$_.JMethodIDPtr,
      _$bundle.pointer,
      _$persistableBundle.pointer,
    ).check();
  }

  static final _id_onPrepareNavigateUpTaskStack = _class.instanceMethodId(
    r'onPrepareNavigateUpTaskStack',
    r'(Landroid/app/TaskStackBuilder;)V',
  );

  static final _onPrepareNavigateUpTaskStack =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)`
  void onPrepareNavigateUpTaskStack(
    jni$_.JObject? taskStackBuilder,
  ) {
    final _$taskStackBuilder = taskStackBuilder?.reference ?? jni$_.jNullReference;
    _onPrepareNavigateUpTaskStack(
      reference.pointer,
      _id_onPrepareNavigateUpTaskStack as jni$_.JMethodIDPtr,
      _$taskStackBuilder.pointer,
    ).check();
  }

  static final _id_onPrepareOptionsMenu = _class.instanceMethodId(
    r'onPrepareOptionsMenu',
    r'(Landroid/view/Menu;)Z',
  );

  static final _onPrepareOptionsMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onPrepareOptionsMenu(android.view.Menu menu)`
  bool onPrepareOptionsMenu(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onPrepareOptionsMenu(
      reference.pointer,
      _id_onPrepareOptionsMenu as jni$_.JMethodIDPtr,
      _$menu.pointer,
    ).boolean;
  }

  static final _id_onPreparePanel = _class.instanceMethodId(
    r'onPreparePanel',
    r'(ILandroid/view/View;Landroid/view/Menu;)Z',
  );

  static final _onPreparePanel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean onPreparePanel(int i, android.view.View view, android.view.Menu menu)`
  bool onPreparePanel(
    int i,
    jni$_.JObject? view,
    jni$_.JObject? menu,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onPreparePanel(
      reference.pointer,
      _id_onPreparePanel as jni$_.JMethodIDPtr,
      i,
      _$view.pointer,
      _$menu.pointer,
    ).boolean;
  }

  static final _id_onProvideAssistContent = _class.instanceMethodId(
    r'onProvideAssistContent',
    r'(Landroid/app/assist/AssistContent;)V',
  );

  static final _onProvideAssistContent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onProvideAssistContent(android.app.assist.AssistContent assistContent)`
  void onProvideAssistContent(
    jni$_.JObject? assistContent,
  ) {
    final _$assistContent = assistContent?.reference ?? jni$_.jNullReference;
    _onProvideAssistContent(
      reference.pointer,
      _id_onProvideAssistContent as jni$_.JMethodIDPtr,
      _$assistContent.pointer,
    ).check();
  }

  static final _id_onProvideAssistData = _class.instanceMethodId(
    r'onProvideAssistData',
    r'(Landroid/os/Bundle;)V',
  );

  static final _onProvideAssistData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onProvideAssistData(android.os.Bundle bundle)`
  void onProvideAssistData(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _onProvideAssistData(reference.pointer, _id_onProvideAssistData as jni$_.JMethodIDPtr, _$bundle.pointer).check();
  }

  static final _id_onProvideKeyboardShortcuts = _class.instanceMethodId(
    r'onProvideKeyboardShortcuts',
    r'(Ljava/util/List;Landroid/view/Menu;I)V',
  );

  static final _onProvideKeyboardShortcuts =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void onProvideKeyboardShortcuts(java.util.List<android.view.KeyboardShortcutGroup> list, android.view.Menu menu, int i)`
  void onProvideKeyboardShortcuts(
    jni$_.JList<jni$_.JObject?>? list,
    jni$_.JObject? menu,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onProvideKeyboardShortcuts(
      reference.pointer,
      _id_onProvideKeyboardShortcuts as jni$_.JMethodIDPtr,
      _$list.pointer,
      _$menu.pointer,
      i,
    ).check();
  }

  static final _id_onProvideReferrer = _class.instanceMethodId(
    r'onProvideReferrer',
    r'()Landroid/net/Uri;',
  );

  static final _onProvideReferrer =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.net.Uri onProvideReferrer()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onProvideReferrer() {
    return _onProvideReferrer(
      reference.pointer,
      _id_onProvideReferrer as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onRequestPermissionsResult = _class.instanceMethodId(
    r'onRequestPermissionsResult',
    r'(I[Ljava/lang/String;[I)V',
  );

  static final _onRequestPermissionsResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)`
  void onRequestPermissionsResult(
    int i,
    jni$_.JArray<jni$_.JString?>? strings,
    jni$_.JIntArray? is$,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    _onRequestPermissionsResult(
      reference.pointer,
      _id_onRequestPermissionsResult as jni$_.JMethodIDPtr,
      i,
      _$strings.pointer,
      _$is$.pointer,
    ).check();
  }

  static final _id_onRequestPermissionsResult$1 = _class.instanceMethodId(
    r'onRequestPermissionsResult',
    r'(I[Ljava/lang/String;[II)V',
  );

  static final _onRequestPermissionsResult$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is, int i1)`
  void onRequestPermissionsResult$1(
    int i,
    jni$_.JArray<jni$_.JString?>? strings,
    jni$_.JIntArray? is$,
    int i1,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    _onRequestPermissionsResult$1(
      reference.pointer,
      _id_onRequestPermissionsResult$1 as jni$_.JMethodIDPtr,
      i,
      _$strings.pointer,
      _$is$.pointer,
      i1,
    ).check();
  }

  static final _id_onRestoreInstanceState = _class.instanceMethodId(
    r'onRestoreInstanceState',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onRestoreInstanceState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onRestoreInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onRestoreInstanceState(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle = persistableBundle?.reference ?? jni$_.jNullReference;
    _onRestoreInstanceState(
      reference.pointer,
      _id_onRestoreInstanceState as jni$_.JMethodIDPtr,
      _$bundle.pointer,
      _$persistableBundle.pointer,
    ).check();
  }

  static final _id_onRetainNonConfigurationInstance = _class.instanceMethodId(
    r'onRetainNonConfigurationInstance',
    r'()Ljava/lang/Object;',
  );

  static final _onRetainNonConfigurationInstance =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.Object onRetainNonConfigurationInstance()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onRetainNonConfigurationInstance() {
    return _onRetainNonConfigurationInstance(
      reference.pointer,
      _id_onRetainNonConfigurationInstance as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onSaveInstanceState = _class.instanceMethodId(
    r'onSaveInstanceState',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onSaveInstanceState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onSaveInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onSaveInstanceState(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle = persistableBundle?.reference ?? jni$_.jNullReference;
    _onSaveInstanceState(
      reference.pointer,
      _id_onSaveInstanceState as jni$_.JMethodIDPtr,
      _$bundle.pointer,
      _$persistableBundle.pointer,
    ).check();
  }

  static final _id_onSearchRequested = _class.instanceMethodId(
    r'onSearchRequested',
    r'()Z',
  );

  static final _onSearchRequested =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean onSearchRequested()`
  bool onSearchRequested() {
    return _onSearchRequested(reference.pointer, _id_onSearchRequested as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_onSearchRequested$1 = _class.instanceMethodId(
    r'onSearchRequested',
    r'(Landroid/view/SearchEvent;)Z',
  );

  static final _onSearchRequested$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onSearchRequested(android.view.SearchEvent searchEvent)`
  bool onSearchRequested$1(
    jni$_.JObject? searchEvent,
  ) {
    final _$searchEvent = searchEvent?.reference ?? jni$_.jNullReference;
    return _onSearchRequested$1(
      reference.pointer,
      _id_onSearchRequested$1 as jni$_.JMethodIDPtr,
      _$searchEvent.pointer,
    ).boolean;
  }

  static final _id_onStateNotSaved = _class.instanceMethodId(
    r'onStateNotSaved',
    r'()V',
  );

  static final _onStateNotSaved =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onStateNotSaved()`
  void onStateNotSaved() {
    _onStateNotSaved(reference.pointer, _id_onStateNotSaved as jni$_.JMethodIDPtr).check();
  }

  static final _id_onTopResumedActivityChanged = _class.instanceMethodId(
    r'onTopResumedActivityChanged',
    r'(Z)V',
  );

  static final _onTopResumedActivityChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onTopResumedActivityChanged(boolean z)`
  void onTopResumedActivityChanged(
    bool z,
  ) {
    _onTopResumedActivityChanged(
      reference.pointer,
      _id_onTopResumedActivityChanged as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_onTouchEvent = _class.instanceMethodId(
    r'onTouchEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTouchEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onTouchEvent(android.view.MotionEvent motionEvent)`
  bool onTouchEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onTouchEvent(reference.pointer, _id_onTouchEvent as jni$_.JMethodIDPtr, _$motionEvent.pointer).boolean;
  }

  static final _id_onTrackballEvent = _class.instanceMethodId(
    r'onTrackballEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTrackballEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onTrackballEvent(android.view.MotionEvent motionEvent)`
  bool onTrackballEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onTrackballEvent(
      reference.pointer,
      _id_onTrackballEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_onTrimMemory = _class.instanceMethodId(
    r'onTrimMemory',
    r'(I)V',
  );

  static final _onTrimMemory =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onTrimMemory(int i)`
  void onTrimMemory(
    int i,
  ) {
    _onTrimMemory(reference.pointer, _id_onTrimMemory as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_onUserInteraction = _class.instanceMethodId(
    r'onUserInteraction',
    r'()V',
  );

  static final _onUserInteraction =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onUserInteraction()`
  void onUserInteraction() {
    _onUserInteraction(reference.pointer, _id_onUserInteraction as jni$_.JMethodIDPtr).check();
  }

  static final _id_onVisibleBehindCanceled = _class.instanceMethodId(
    r'onVisibleBehindCanceled',
    r'()V',
  );

  static final _onVisibleBehindCanceled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onVisibleBehindCanceled()`
  void onVisibleBehindCanceled() {
    _onVisibleBehindCanceled(reference.pointer, _id_onVisibleBehindCanceled as jni$_.JMethodIDPtr).check();
  }

  static final _id_onWindowAttributesChanged = _class.instanceMethodId(
    r'onWindowAttributesChanged',
    r'(Landroid/view/WindowManager$LayoutParams;)V',
  );

  static final _onWindowAttributesChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams layoutParams)`
  void onWindowAttributesChanged(
    jni$_.JObject? layoutParams,
  ) {
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _onWindowAttributesChanged(
      reference.pointer,
      _id_onWindowAttributesChanged as jni$_.JMethodIDPtr,
      _$layoutParams.pointer,
    ).check();
  }

  static final _id_onWindowFocusChanged = _class.instanceMethodId(
    r'onWindowFocusChanged',
    r'(Z)V',
  );

  static final _onWindowFocusChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onWindowFocusChanged(boolean z)`
  void onWindowFocusChanged(
    bool z,
  ) {
    _onWindowFocusChanged(reference.pointer, _id_onWindowFocusChanged as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_onWindowStartingActionMode = _class.instanceMethodId(
    r'onWindowStartingActionMode',
    r'(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;',
  );

  static final _onWindowStartingActionMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onWindowStartingActionMode(
    jni$_.JObject? callback,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _onWindowStartingActionMode(
      reference.pointer,
      _id_onWindowStartingActionMode as jni$_.JMethodIDPtr,
      _$callback.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onWindowStartingActionMode$1 = _class.instanceMethodId(
    r'onWindowStartingActionMode',
    r'(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;',
  );

  static final _onWindowStartingActionMode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onWindowStartingActionMode$1(
    jni$_.JObject? callback,
    int i,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _onWindowStartingActionMode$1(
      reference.pointer,
      _id_onWindowStartingActionMode$1 as jni$_.JMethodIDPtr,
      _$callback.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openContextMenu = _class.instanceMethodId(
    r'openContextMenu',
    r'(Landroid/view/View;)V',
  );

  static final _openContextMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void openContextMenu(android.view.View view)`
  void openContextMenu(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _openContextMenu(reference.pointer, _id_openContextMenu as jni$_.JMethodIDPtr, _$view.pointer).check();
  }

  static final _id_openOptionsMenu = _class.instanceMethodId(
    r'openOptionsMenu',
    r'()V',
  );

  static final _openOptionsMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void openOptionsMenu()`
  void openOptionsMenu() {
    _openOptionsMenu(reference.pointer, _id_openOptionsMenu as jni$_.JMethodIDPtr).check();
  }

  static final _id_overrideActivityTransition = _class.instanceMethodId(
    r'overrideActivityTransition',
    r'(III)V',
  );

  static final _overrideActivityTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int, int)>();

  /// from: `public void overrideActivityTransition(int i, int i1, int i2)`
  void overrideActivityTransition(
    int i,
    int i1,
    int i2,
  ) {
    _overrideActivityTransition(
      reference.pointer,
      _id_overrideActivityTransition as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_overrideActivityTransition$1 = _class.instanceMethodId(
    r'overrideActivityTransition',
    r'(IIII)V',
  );

  static final _overrideActivityTransition$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int, int, int)
          >();

  /// from: `public void overrideActivityTransition(int i, int i1, int i2, int i3)`
  void overrideActivityTransition$1(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _overrideActivityTransition$1(
      reference.pointer,
      _id_overrideActivityTransition$1 as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
      i3,
    ).check();
  }

  static final _id_overridePendingTransition = _class.instanceMethodId(
    r'overridePendingTransition',
    r'(II)V',
  );

  static final _overridePendingTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public void overridePendingTransition(int i, int i1)`
  void overridePendingTransition(
    int i,
    int i1,
  ) {
    _overridePendingTransition(reference.pointer, _id_overridePendingTransition as jni$_.JMethodIDPtr, i, i1).check();
  }

  static final _id_overridePendingTransition$1 = _class.instanceMethodId(
    r'overridePendingTransition',
    r'(III)V',
  );

  static final _overridePendingTransition$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int, int)>();

  /// from: `public void overridePendingTransition(int i, int i1, int i2)`
  void overridePendingTransition$1(
    int i,
    int i1,
    int i2,
  ) {
    _overridePendingTransition$1(
      reference.pointer,
      _id_overridePendingTransition$1 as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_postponeEnterTransition = _class.instanceMethodId(
    r'postponeEnterTransition',
    r'()V',
  );

  static final _postponeEnterTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void postponeEnterTransition()`
  void postponeEnterTransition() {
    _postponeEnterTransition(reference.pointer, _id_postponeEnterTransition as jni$_.JMethodIDPtr).check();
  }

  static final _id_recreate = _class.instanceMethodId(
    r'recreate',
    r'()V',
  );

  static final _recreate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void recreate()`
  void recreate() {
    _recreate(reference.pointer, _id_recreate as jni$_.JMethodIDPtr).check();
  }

  static final _id_registerActivityLifecycleCallbacks = _class.instanceMethodId(
    r'registerActivityLifecycleCallbacks',
    r'(Landroid/app/Application$ActivityLifecycleCallbacks;)V',
  );

  static final _registerActivityLifecycleCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)`
  void registerActivityLifecycleCallbacks(
    jni$_.JObject? activityLifecycleCallbacks,
  ) {
    final _$activityLifecycleCallbacks = activityLifecycleCallbacks?.reference ?? jni$_.jNullReference;
    _registerActivityLifecycleCallbacks(
      reference.pointer,
      _id_registerActivityLifecycleCallbacks as jni$_.JMethodIDPtr,
      _$activityLifecycleCallbacks.pointer,
    ).check();
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r'registerComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _registerComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void registerComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks = componentCallbacks?.reference ?? jni$_.jNullReference;
    _registerComponentCallbacks(
      reference.pointer,
      _id_registerComponentCallbacks as jni$_.JMethodIDPtr,
      _$componentCallbacks.pointer,
    ).check();
  }

  static final _id_registerForContextMenu = _class.instanceMethodId(
    r'registerForContextMenu',
    r'(Landroid/view/View;)V',
  );

  static final _registerForContextMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void registerForContextMenu(android.view.View view)`
  void registerForContextMenu(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _registerForContextMenu(
      reference.pointer,
      _id_registerForContextMenu as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_registerScreenCaptureCallback = _class.instanceMethodId(
    r'registerScreenCaptureCallback',
    r'(Ljava/util/concurrent/Executor;Landroid/app/Activity$ScreenCaptureCallback;)V',
  );

  static final _registerScreenCaptureCallback =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void registerScreenCaptureCallback(java.util.concurrent.Executor executor, android.app.Activity$ScreenCaptureCallback screenCaptureCallback)`
  void registerScreenCaptureCallback(
    jni$_.JObject? executor,
    Activity$ScreenCaptureCallback? screenCaptureCallback,
  ) {
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$screenCaptureCallback = screenCaptureCallback?.reference ?? jni$_.jNullReference;
    _registerScreenCaptureCallback(
      reference.pointer,
      _id_registerScreenCaptureCallback as jni$_.JMethodIDPtr,
      _$executor.pointer,
      _$screenCaptureCallback.pointer,
    ).check();
  }

  static final _id_releaseInstance = _class.instanceMethodId(
    r'releaseInstance',
    r'()Z',
  );

  static final _releaseInstance =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean releaseInstance()`
  bool releaseInstance() {
    return _releaseInstance(reference.pointer, _id_releaseInstance as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_removeDialog = _class.instanceMethodId(
    r'removeDialog',
    r'(I)V',
  );

  static final _removeDialog =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void removeDialog(int i)`
  void removeDialog(
    int i,
  ) {
    _removeDialog(reference.pointer, _id_removeDialog as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_reportFullyDrawn = _class.instanceMethodId(
    r'reportFullyDrawn',
    r'()V',
  );

  static final _reportFullyDrawn =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void reportFullyDrawn()`
  void reportFullyDrawn() {
    _reportFullyDrawn(reference.pointer, _id_reportFullyDrawn as jni$_.JMethodIDPtr).check();
  }

  static final _id_requestDragAndDropPermissions = _class.instanceMethodId(
    r'requestDragAndDropPermissions',
    r'(Landroid/view/DragEvent;)Landroid/view/DragAndDropPermissions;',
  );

  static final _requestDragAndDropPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent dragEvent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? requestDragAndDropPermissions(
    jni$_.JObject? dragEvent,
  ) {
    final _$dragEvent = dragEvent?.reference ?? jni$_.jNullReference;
    return _requestDragAndDropPermissions(
      reference.pointer,
      _id_requestDragAndDropPermissions as jni$_.JMethodIDPtr,
      _$dragEvent.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_requestFullscreenMode = _class.instanceMethodId(
    r'requestFullscreenMode',
    r'(ILandroid/os/OutcomeReceiver;)V',
  );

  static final _requestFullscreenMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void requestFullscreenMode(int i, android.os.OutcomeReceiver<java.lang.Void, java.lang.Throwable> outcomeReceiver)`
  void requestFullscreenMode(
    int i,
    jni$_.JObject? outcomeReceiver,
  ) {
    final _$outcomeReceiver = outcomeReceiver?.reference ?? jni$_.jNullReference;
    _requestFullscreenMode(
      reference.pointer,
      _id_requestFullscreenMode as jni$_.JMethodIDPtr,
      i,
      _$outcomeReceiver.pointer,
    ).check();
  }

  static final _id_requestOpenInBrowserEducation = _class.instanceMethodId(
    r'requestOpenInBrowserEducation',
    r'()V',
  );

  static final _requestOpenInBrowserEducation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final void requestOpenInBrowserEducation()`
  void requestOpenInBrowserEducation() {
    _requestOpenInBrowserEducation(reference.pointer, _id_requestOpenInBrowserEducation as jni$_.JMethodIDPtr).check();
  }

  static final _id_requestPermissions = _class.instanceMethodId(
    r'requestPermissions',
    r'([Ljava/lang/String;I)V',
  );

  static final _requestPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public final void requestPermissions(java.lang.String[] strings, int i)`
  void requestPermissions(
    jni$_.JArray<jni$_.JString?>? strings,
    int i,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _requestPermissions(reference.pointer, _id_requestPermissions as jni$_.JMethodIDPtr, _$strings.pointer, i).check();
  }

  static final _id_requestPermissions$1 = _class.instanceMethodId(
    r'requestPermissions',
    r'([Ljava/lang/String;II)V',
  );

  static final _requestPermissions$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public final void requestPermissions(java.lang.String[] strings, int i, int i1)`
  void requestPermissions$1(
    jni$_.JArray<jni$_.JString?>? strings,
    int i,
    int i1,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _requestPermissions$1(
      reference.pointer,
      _id_requestPermissions$1 as jni$_.JMethodIDPtr,
      _$strings.pointer,
      i,
      i1,
    ).check();
  }

  static final _id_requestShowKeyboardShortcuts = _class.instanceMethodId(
    r'requestShowKeyboardShortcuts',
    r'()V',
  );

  static final _requestShowKeyboardShortcuts =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final void requestShowKeyboardShortcuts()`
  void requestShowKeyboardShortcuts() {
    _requestShowKeyboardShortcuts(reference.pointer, _id_requestShowKeyboardShortcuts as jni$_.JMethodIDPtr).check();
  }

  static final _id_requestVisibleBehind = _class.instanceMethodId(
    r'requestVisibleBehind',
    r'(Z)Z',
  );

  static final _requestVisibleBehind =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public boolean requestVisibleBehind(boolean z)`
  bool requestVisibleBehind(
    bool z,
  ) {
    return _requestVisibleBehind(reference.pointer, _id_requestVisibleBehind as jni$_.JMethodIDPtr, z ? 1 : 0).boolean;
  }

  static final _id_requestWindowFeature = _class.instanceMethodId(
    r'requestWindowFeature',
    r'(I)Z',
  );

  static final _requestWindowFeature =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final boolean requestWindowFeature(int i)`
  bool requestWindowFeature(
    int i,
  ) {
    return _requestWindowFeature(reference.pointer, _id_requestWindowFeature as jni$_.JMethodIDPtr, i).boolean;
  }

  static final _id_requireViewById = _class.instanceMethodId(
    r'requireViewById',
    r'(I)Landroid/view/View;',
  );

  static final _requireViewById =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final T requireViewById(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? requireViewById<$T extends jni$_.JObject?>(
    int i, {
    required jni$_.JObjType<$T> T,
  }) {
    return _requireViewById(
      reference.pointer,
      _id_requireViewById as jni$_.JMethodIDPtr,
      i,
    ).object<$T?>(T.nullableType);
  }

  static final _id_runOnUiThread = _class.instanceMethodId(
    r'runOnUiThread',
    r'(Ljava/lang/Runnable;)V',
  );

  static final _runOnUiThread =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final void runOnUiThread(java.lang.Runnable runnable)`
  void runOnUiThread(
    jni$_.JObject? runnable,
  ) {
    final _$runnable = runnable?.reference ?? jni$_.jNullReference;
    _runOnUiThread(reference.pointer, _id_runOnUiThread as jni$_.JMethodIDPtr, _$runnable.pointer).check();
  }

  static final _id_setActionBar = _class.instanceMethodId(
    r'setActionBar',
    r'(Landroid/widget/Toolbar;)V',
  );

  static final _setActionBar =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setActionBar(android.widget.Toolbar toolbar)`
  void setActionBar(
    jni$_.JObject? toolbar,
  ) {
    final _$toolbar = toolbar?.reference ?? jni$_.jNullReference;
    _setActionBar(reference.pointer, _id_setActionBar as jni$_.JMethodIDPtr, _$toolbar.pointer).check();
  }

  static final _id_setAllowCrossUidActivitySwitchFromBelow = _class.instanceMethodId(
    r'setAllowCrossUidActivitySwitchFromBelow',
    r'(Z)V',
  );

  static final _setAllowCrossUidActivitySwitchFromBelow =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setAllowCrossUidActivitySwitchFromBelow(boolean z)`
  void setAllowCrossUidActivitySwitchFromBelow(
    bool z,
  ) {
    _setAllowCrossUidActivitySwitchFromBelow(
      reference.pointer,
      _id_setAllowCrossUidActivitySwitchFromBelow as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setContentTransitionManager = _class.instanceMethodId(
    r'setContentTransitionManager',
    r'(Landroid/transition/TransitionManager;)V',
  );

  static final _setContentTransitionManager =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setContentTransitionManager(android.transition.TransitionManager transitionManager)`
  void setContentTransitionManager(
    jni$_.JObject? transitionManager,
  ) {
    final _$transitionManager = transitionManager?.reference ?? jni$_.jNullReference;
    _setContentTransitionManager(
      reference.pointer,
      _id_setContentTransitionManager as jni$_.JMethodIDPtr,
      _$transitionManager.pointer,
    ).check();
  }

  static final _id_setContentView = _class.instanceMethodId(
    r'setContentView',
    r'(Landroid/view/View;)V',
  );

  static final _setContentView =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setContentView(android.view.View view)`
  void setContentView(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _setContentView(reference.pointer, _id_setContentView as jni$_.JMethodIDPtr, _$view.pointer).check();
  }

  static final _id_setContentView$1 = _class.instanceMethodId(
    r'setContentView',
    r'(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _setContentView$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)`
  void setContentView$1(
    jni$_.JObject? view,
    jni$_.JObject? layoutParams,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _setContentView$1(
      reference.pointer,
      _id_setContentView$1 as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$layoutParams.pointer,
    ).check();
  }

  static final _id_setContentView$2 = _class.instanceMethodId(
    r'setContentView',
    r'(I)V',
  );

  static final _setContentView$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setContentView(int i)`
  void setContentView$2(
    int i,
  ) {
    _setContentView$2(reference.pointer, _id_setContentView$2 as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setDefaultKeyMode = _class.instanceMethodId(
    r'setDefaultKeyMode',
    r'(I)V',
  );

  static final _setDefaultKeyMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setDefaultKeyMode(int i)`
  void setDefaultKeyMode(
    int i,
  ) {
    _setDefaultKeyMode(reference.pointer, _id_setDefaultKeyMode as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setEnterSharedElementCallback = _class.instanceMethodId(
    r'setEnterSharedElementCallback',
    r'(Landroid/app/SharedElementCallback;)V',
  );

  static final _setEnterSharedElementCallback =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setEnterSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)`
  void setEnterSharedElementCallback(
    jni$_.JObject? sharedElementCallback,
  ) {
    final _$sharedElementCallback = sharedElementCallback?.reference ?? jni$_.jNullReference;
    _setEnterSharedElementCallback(
      reference.pointer,
      _id_setEnterSharedElementCallback as jni$_.JMethodIDPtr,
      _$sharedElementCallback.pointer,
    ).check();
  }

  static final _id_setExitSharedElementCallback = _class.instanceMethodId(
    r'setExitSharedElementCallback',
    r'(Landroid/app/SharedElementCallback;)V',
  );

  static final _setExitSharedElementCallback =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setExitSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)`
  void setExitSharedElementCallback(
    jni$_.JObject? sharedElementCallback,
  ) {
    final _$sharedElementCallback = sharedElementCallback?.reference ?? jni$_.jNullReference;
    _setExitSharedElementCallback(
      reference.pointer,
      _id_setExitSharedElementCallback as jni$_.JMethodIDPtr,
      _$sharedElementCallback.pointer,
    ).check();
  }

  static final _id_setFeatureDrawable = _class.instanceMethodId(
    r'setFeatureDrawable',
    r'(ILandroid/graphics/drawable/Drawable;)V',
  );

  static final _setFeatureDrawable =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final void setFeatureDrawable(int i, android.graphics.drawable.Drawable drawable)`
  void setFeatureDrawable(
    int i,
    jni$_.JObject? drawable,
  ) {
    final _$drawable = drawable?.reference ?? jni$_.jNullReference;
    _setFeatureDrawable(reference.pointer, _id_setFeatureDrawable as jni$_.JMethodIDPtr, i, _$drawable.pointer).check();
  }

  static final _id_setFeatureDrawableAlpha = _class.instanceMethodId(
    r'setFeatureDrawableAlpha',
    r'(II)V',
  );

  static final _setFeatureDrawableAlpha =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public final void setFeatureDrawableAlpha(int i, int i1)`
  void setFeatureDrawableAlpha(
    int i,
    int i1,
  ) {
    _setFeatureDrawableAlpha(reference.pointer, _id_setFeatureDrawableAlpha as jni$_.JMethodIDPtr, i, i1).check();
  }

  static final _id_setFeatureDrawableResource = _class.instanceMethodId(
    r'setFeatureDrawableResource',
    r'(II)V',
  );

  static final _setFeatureDrawableResource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public final void setFeatureDrawableResource(int i, int i1)`
  void setFeatureDrawableResource(
    int i,
    int i1,
  ) {
    _setFeatureDrawableResource(reference.pointer, _id_setFeatureDrawableResource as jni$_.JMethodIDPtr, i, i1).check();
  }

  static final _id_setFeatureDrawableUri = _class.instanceMethodId(
    r'setFeatureDrawableUri',
    r'(ILandroid/net/Uri;)V',
  );

  static final _setFeatureDrawableUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final void setFeatureDrawableUri(int i, android.net.Uri uri)`
  void setFeatureDrawableUri(
    int i,
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _setFeatureDrawableUri(
      reference.pointer,
      _id_setFeatureDrawableUri as jni$_.JMethodIDPtr,
      i,
      _$uri.pointer,
    ).check();
  }

  static final _id_setFinishOnTouchOutside = _class.instanceMethodId(
    r'setFinishOnTouchOutside',
    r'(Z)V',
  );

  static final _setFinishOnTouchOutside =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setFinishOnTouchOutside(boolean z)`
  void setFinishOnTouchOutside(
    bool z,
  ) {
    _setFinishOnTouchOutside(reference.pointer, _id_setFinishOnTouchOutside as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_setImmersive = _class.instanceMethodId(
    r'setImmersive',
    r'(Z)V',
  );

  static final _setImmersive =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setImmersive(boolean z)`
  void setImmersive(
    bool z,
  ) {
    _setImmersive(reference.pointer, _id_setImmersive as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_setInheritShowWhenLocked = _class.instanceMethodId(
    r'setInheritShowWhenLocked',
    r'(Z)V',
  );

  static final _setInheritShowWhenLocked =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setInheritShowWhenLocked(boolean z)`
  void setInheritShowWhenLocked(
    bool z,
  ) {
    _setInheritShowWhenLocked(reference.pointer, _id_setInheritShowWhenLocked as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_setIntent = _class.instanceMethodId(
    r'setIntent',
    r'(Landroid/content/Intent;)V',
  );

  static final _setIntent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setIntent(android.content.Intent intent)`
  void setIntent(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _setIntent(reference.pointer, _id_setIntent as jni$_.JMethodIDPtr, _$intent.pointer).check();
  }

  static final _id_setIntent$1 = _class.instanceMethodId(
    r'setIntent',
    r'(Landroid/content/Intent;Landroid/app/ComponentCaller;)V',
  );

  static final _setIntent$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setIntent(android.content.Intent intent, android.app.ComponentCaller componentCaller)`
  void setIntent$1(
    jni$_.JObject? intent,
    jni$_.JObject? componentCaller,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$componentCaller = componentCaller?.reference ?? jni$_.jNullReference;
    _setIntent$1(
      reference.pointer,
      _id_setIntent$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$componentCaller.pointer,
    ).check();
  }

  static final _id_setLocusContext = _class.instanceMethodId(
    r'setLocusContext',
    r'(Landroid/content/LocusId;Landroid/os/Bundle;)V',
  );

  static final _setLocusContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setLocusContext(android.content.LocusId locusId, android.os.Bundle bundle)`
  void setLocusContext(
    jni$_.JObject? locusId,
    jni$_.JObject? bundle,
  ) {
    final _$locusId = locusId?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _setLocusContext(
      reference.pointer,
      _id_setLocusContext as jni$_.JMethodIDPtr,
      _$locusId.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_setMediaController = _class.instanceMethodId(
    r'setMediaController',
    r'(Landroid/media/session/MediaController;)V',
  );

  static final _setMediaController =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final void setMediaController(android.media.session.MediaController mediaController)`
  void setMediaController(
    jni$_.JObject? mediaController,
  ) {
    final _$mediaController = mediaController?.reference ?? jni$_.jNullReference;
    _setMediaController(
      reference.pointer,
      _id_setMediaController as jni$_.JMethodIDPtr,
      _$mediaController.pointer,
    ).check();
  }

  static final _id_setPictureInPictureParams = _class.instanceMethodId(
    r'setPictureInPictureParams',
    r'(Landroid/app/PictureInPictureParams;)V',
  );

  static final _setPictureInPictureParams =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setPictureInPictureParams(android.app.PictureInPictureParams pictureInPictureParams)`
  void setPictureInPictureParams(
    jni$_.JObject? pictureInPictureParams,
  ) {
    final _$pictureInPictureParams = pictureInPictureParams?.reference ?? jni$_.jNullReference;
    _setPictureInPictureParams(
      reference.pointer,
      _id_setPictureInPictureParams as jni$_.JMethodIDPtr,
      _$pictureInPictureParams.pointer,
    ).check();
  }

  static final _id_setProgress = _class.instanceMethodId(
    r'setProgress',
    r'(I)V',
  );

  static final _setProgress =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgress(int i)`
  void setProgress(
    int i,
  ) {
    _setProgress(reference.pointer, _id_setProgress as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setProgressBarIndeterminate = _class.instanceMethodId(
    r'setProgressBarIndeterminate',
    r'(Z)V',
  );

  static final _setProgressBarIndeterminate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgressBarIndeterminate(boolean z)`
  void setProgressBarIndeterminate(
    bool z,
  ) {
    _setProgressBarIndeterminate(
      reference.pointer,
      _id_setProgressBarIndeterminate as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setProgressBarIndeterminateVisibility = _class.instanceMethodId(
    r'setProgressBarIndeterminateVisibility',
    r'(Z)V',
  );

  static final _setProgressBarIndeterminateVisibility =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgressBarIndeterminateVisibility(boolean z)`
  void setProgressBarIndeterminateVisibility(
    bool z,
  ) {
    _setProgressBarIndeterminateVisibility(
      reference.pointer,
      _id_setProgressBarIndeterminateVisibility as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setProgressBarVisibility = _class.instanceMethodId(
    r'setProgressBarVisibility',
    r'(Z)V',
  );

  static final _setProgressBarVisibility =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgressBarVisibility(boolean z)`
  void setProgressBarVisibility(
    bool z,
  ) {
    _setProgressBarVisibility(reference.pointer, _id_setProgressBarVisibility as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_setRecentsScreenshotEnabled = _class.instanceMethodId(
    r'setRecentsScreenshotEnabled',
    r'(Z)V',
  );

  static final _setRecentsScreenshotEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setRecentsScreenshotEnabled(boolean z)`
  void setRecentsScreenshotEnabled(
    bool z,
  ) {
    _setRecentsScreenshotEnabled(
      reference.pointer,
      _id_setRecentsScreenshotEnabled as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setRequestedOrientation = _class.instanceMethodId(
    r'setRequestedOrientation',
    r'(I)V',
  );

  static final _setRequestedOrientation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setRequestedOrientation(int i)`
  void setRequestedOrientation(
    int i,
  ) {
    _setRequestedOrientation(reference.pointer, _id_setRequestedOrientation as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setResult = _class.instanceMethodId(
    r'setResult',
    r'(I)V',
  );

  static final _setResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setResult(int i)`
  void setResult(
    int i,
  ) {
    _setResult(reference.pointer, _id_setResult as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setResult$1 = _class.instanceMethodId(
    r'setResult',
    r'(ILandroid/content/Intent;)V',
  );

  static final _setResult$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final void setResult(int i, android.content.Intent intent)`
  void setResult$1(
    int i,
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _setResult$1(reference.pointer, _id_setResult$1 as jni$_.JMethodIDPtr, i, _$intent.pointer).check();
  }

  static final _id_setSecondaryProgress = _class.instanceMethodId(
    r'setSecondaryProgress',
    r'(I)V',
  );

  static final _setSecondaryProgress =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setSecondaryProgress(int i)`
  void setSecondaryProgress(
    int i,
  ) {
    _setSecondaryProgress(reference.pointer, _id_setSecondaryProgress as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setShouldDockBigOverlays = _class.instanceMethodId(
    r'setShouldDockBigOverlays',
    r'(Z)V',
  );

  static final _setShouldDockBigOverlays =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setShouldDockBigOverlays(boolean z)`
  void setShouldDockBigOverlays(
    bool z,
  ) {
    _setShouldDockBigOverlays(reference.pointer, _id_setShouldDockBigOverlays as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_setShowWhenLocked = _class.instanceMethodId(
    r'setShowWhenLocked',
    r'(Z)V',
  );

  static final _setShowWhenLocked =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setShowWhenLocked(boolean z)`
  void setShowWhenLocked(
    bool z,
  ) {
    _setShowWhenLocked(reference.pointer, _id_setShowWhenLocked as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_setTaskDescription = _class.instanceMethodId(
    r'setTaskDescription',
    r'(Landroid/app/ActivityManager$TaskDescription;)V',
  );

  static final _setTaskDescription =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setTaskDescription(android.app.ActivityManager$TaskDescription taskDescription)`
  void setTaskDescription(
    jni$_.JObject? taskDescription,
  ) {
    final _$taskDescription = taskDescription?.reference ?? jni$_.jNullReference;
    _setTaskDescription(
      reference.pointer,
      _id_setTaskDescription as jni$_.JMethodIDPtr,
      _$taskDescription.pointer,
    ).check();
  }

  static final _id_setTheme = _class.instanceMethodId(
    r'setTheme',
    r'(I)V',
  );

  static final _setTheme =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTheme(int i)`
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setTitle = _class.instanceMethodId(
    r'setTitle',
    r'(I)V',
  );

  static final _setTitle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTitle(int i)`
  void setTitle(
    int i,
  ) {
    _setTitle(reference.pointer, _id_setTitle as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setTitle$1 = _class.instanceMethodId(
    r'setTitle',
    r'(Ljava/lang/CharSequence;)V',
  );

  static final _setTitle$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setTitle(java.lang.CharSequence charSequence)`
  void setTitle$1(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    _setTitle$1(reference.pointer, _id_setTitle$1 as jni$_.JMethodIDPtr, _$charSequence.pointer).check();
  }

  static final _id_setTitleColor = _class.instanceMethodId(
    r'setTitleColor',
    r'(I)V',
  );

  static final _setTitleColor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTitleColor(int i)`
  void setTitleColor(
    int i,
  ) {
    _setTitleColor(reference.pointer, _id_setTitleColor as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setTranslucent = _class.instanceMethodId(
    r'setTranslucent',
    r'(Z)Z',
  );

  static final _setTranslucent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public boolean setTranslucent(boolean z)`
  bool setTranslucent(
    bool z,
  ) {
    return _setTranslucent(reference.pointer, _id_setTranslucent as jni$_.JMethodIDPtr, z ? 1 : 0).boolean;
  }

  static final _id_setTurnScreenOn = _class.instanceMethodId(
    r'setTurnScreenOn',
    r'(Z)V',
  );

  static final _setTurnScreenOn =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTurnScreenOn(boolean z)`
  void setTurnScreenOn(
    bool z,
  ) {
    _setTurnScreenOn(reference.pointer, _id_setTurnScreenOn as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_setVisible = _class.instanceMethodId(
    r'setVisible',
    r'(Z)V',
  );

  static final _setVisible =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setVisible(boolean z)`
  void setVisible(
    bool z,
  ) {
    _setVisible(reference.pointer, _id_setVisible as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_setVolumeControlStream = _class.instanceMethodId(
    r'setVolumeControlStream',
    r'(I)V',
  );

  static final _setVolumeControlStream =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setVolumeControlStream(int i)`
  void setVolumeControlStream(
    int i,
  ) {
    _setVolumeControlStream(reference.pointer, _id_setVolumeControlStream as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setVrModeEnabled = _class.instanceMethodId(
    r'setVrModeEnabled',
    r'(ZLandroid/content/ComponentName;)V',
  );

  static final _setVrModeEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setVrModeEnabled(boolean z, android.content.ComponentName componentName)`
  void setVrModeEnabled(
    bool z,
    jni$_.JObject? componentName,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    _setVrModeEnabled(
      reference.pointer,
      _id_setVrModeEnabled as jni$_.JMethodIDPtr,
      z ? 1 : 0,
      _$componentName.pointer,
    ).check();
  }

  static final _id_shouldDockBigOverlays = _class.instanceMethodId(
    r'shouldDockBigOverlays',
    r'()Z',
  );

  static final _shouldDockBigOverlays =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean shouldDockBigOverlays()`
  bool shouldDockBigOverlays() {
    return _shouldDockBigOverlays(reference.pointer, _id_shouldDockBigOverlays as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_shouldShowRequestPermissionRationale = _class.instanceMethodId(
    r'shouldShowRequestPermissionRationale',
    r'(Ljava/lang/String;)Z',
  );

  static final _shouldShowRequestPermissionRationale =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean shouldShowRequestPermissionRationale(java.lang.String string)`
  bool shouldShowRequestPermissionRationale(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _shouldShowRequestPermissionRationale(
      reference.pointer,
      _id_shouldShowRequestPermissionRationale as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).boolean;
  }

  static final _id_shouldShowRequestPermissionRationale$1 = _class.instanceMethodId(
    r'shouldShowRequestPermissionRationale',
    r'(Ljava/lang/String;I)Z',
  );

  static final _shouldShowRequestPermissionRationale$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public boolean shouldShowRequestPermissionRationale(java.lang.String string, int i)`
  bool shouldShowRequestPermissionRationale$1(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _shouldShowRequestPermissionRationale$1(
      reference.pointer,
      _id_shouldShowRequestPermissionRationale$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).boolean;
  }

  static final _id_shouldUpRecreateTask = _class.instanceMethodId(
    r'shouldUpRecreateTask',
    r'(Landroid/content/Intent;)Z',
  );

  static final _shouldUpRecreateTask =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean shouldUpRecreateTask(android.content.Intent intent)`
  bool shouldUpRecreateTask(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _shouldUpRecreateTask(
      reference.pointer,
      _id_shouldUpRecreateTask as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).boolean;
  }

  static final _id_showAssist = _class.instanceMethodId(
    r'showAssist',
    r'(Landroid/os/Bundle;)Z',
  );

  static final _showAssist =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean showAssist(android.os.Bundle bundle)`
  bool showAssist(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _showAssist(reference.pointer, _id_showAssist as jni$_.JMethodIDPtr, _$bundle.pointer).boolean;
  }

  static final _id_showDialog = _class.instanceMethodId(
    r'showDialog',
    r'(I)V',
  );

  static final _showDialog =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void showDialog(int i)`
  void showDialog(
    int i,
  ) {
    _showDialog(reference.pointer, _id_showDialog as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_showDialog$1 = _class.instanceMethodId(
    r'showDialog',
    r'(ILandroid/os/Bundle;)Z',
  );

  static final _showDialog$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final boolean showDialog(int i, android.os.Bundle bundle)`
  bool showDialog$1(
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _showDialog$1(reference.pointer, _id_showDialog$1 as jni$_.JMethodIDPtr, i, _$bundle.pointer).boolean;
  }

  static final _id_showLockTaskEscapeMessage = _class.instanceMethodId(
    r'showLockTaskEscapeMessage',
    r'()V',
  );

  static final _showLockTaskEscapeMessage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void showLockTaskEscapeMessage()`
  void showLockTaskEscapeMessage() {
    _showLockTaskEscapeMessage(reference.pointer, _id_showLockTaskEscapeMessage as jni$_.JMethodIDPtr).check();
  }

  static final _id_startActionMode = _class.instanceMethodId(
    r'startActionMode',
    r'(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;',
  );

  static final _startActionMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startActionMode(
    jni$_.JObject? callback,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _startActionMode(
      reference.pointer,
      _id_startActionMode as jni$_.JMethodIDPtr,
      _$callback.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startActionMode$1 = _class.instanceMethodId(
    r'startActionMode',
    r'(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;',
  );

  static final _startActionMode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startActionMode$1(
    jni$_.JObject? callback,
    int i,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _startActionMode$1(
      reference.pointer,
      _id_startActionMode$1 as jni$_.JMethodIDPtr,
      _$callback.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startActivities = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;)V',
  );

  static final _startActivities =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void startActivities(android.content.Intent[] intents)`
  void startActivities(
    jni$_.JArray<jni$_.JObject?>? intents,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    _startActivities(reference.pointer, _id_startActivities as jni$_.JMethodIDPtr, _$intents.pointer).check();
  }

  static final _id_startActivities$1 = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivities$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)`
  void startActivities$1(
    jni$_.JArray<jni$_.JObject?>? intents,
    jni$_.JObject? bundle,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivities$1(
      reference.pointer,
      _id_startActivities$1 as jni$_.JMethodIDPtr,
      _$intents.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;)V',
  );

  static final _startActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void startActivity(android.content.Intent intent)`
  void startActivity(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivity(reference.pointer, _id_startActivity as jni$_.JMethodIDPtr, _$intent.pointer).check();
  }

  static final _id_startActivity$1 = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivity$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startActivity(android.content.Intent intent, android.os.Bundle bundle)`
  void startActivity$1(
    jni$_.JObject? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivity$1(
      reference.pointer,
      _id_startActivity$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startActivityForResult = _class.instanceMethodId(
    r'startActivityForResult',
    r'(Landroid/content/Intent;I)V',
  );

  static final _startActivityForResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public void startActivityForResult(android.content.Intent intent, int i)`
  void startActivityForResult(
    jni$_.JObject? intent,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivityForResult(
      reference.pointer,
      _id_startActivityForResult as jni$_.JMethodIDPtr,
      _$intent.pointer,
      i,
    ).check();
  }

  static final _id_startActivityForResult$1 = _class.instanceMethodId(
    r'startActivityForResult',
    r'(Landroid/content/Intent;ILandroid/os/Bundle;)V',
  );

  static final _startActivityForResult$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startActivityForResult(android.content.Intent intent, int i, android.os.Bundle bundle)`
  void startActivityForResult$1(
    jni$_.JObject? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivityForResult$1(
      reference.pointer,
      _id_startActivityForResult$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      i,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startActivityFromChild = _class.instanceMethodId(
    r'startActivityFromChild',
    r'(Landroid/app/Activity;Landroid/content/Intent;I)V',
  );

  static final _startActivityFromChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i)`
  void startActivityFromChild(
    Activity? activity,
    jni$_.JObject? intent,
    int i,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivityFromChild(
      reference.pointer,
      _id_startActivityFromChild as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$intent.pointer,
      i,
    ).check();
  }

  static final _id_startActivityFromChild$1 = _class.instanceMethodId(
    r'startActivityFromChild',
    r'(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V',
  );

  static final _startActivityFromChild$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i, android.os.Bundle bundle)`
  void startActivityFromChild$1(
    Activity? activity,
    jni$_.JObject? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivityFromChild$1(
      reference.pointer,
      _id_startActivityFromChild$1 as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$intent.pointer,
      i,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startActivityFromFragment = _class.instanceMethodId(
    r'startActivityFromFragment',
    r'(Landroid/app/Fragment;Landroid/content/Intent;I)V',
  );

  static final _startActivityFromFragment =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i)`
  void startActivityFromFragment(
    jni$_.JObject? fragment,
    jni$_.JObject? intent,
    int i,
  ) {
    final _$fragment = fragment?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivityFromFragment(
      reference.pointer,
      _id_startActivityFromFragment as jni$_.JMethodIDPtr,
      _$fragment.pointer,
      _$intent.pointer,
      i,
    ).check();
  }

  static final _id_startActivityFromFragment$1 = _class.instanceMethodId(
    r'startActivityFromFragment',
    r'(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V',
  );

  static final _startActivityFromFragment$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i, android.os.Bundle bundle)`
  void startActivityFromFragment$1(
    jni$_.JObject? fragment,
    jni$_.JObject? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$fragment = fragment?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivityFromFragment$1(
      reference.pointer,
      _id_startActivityFromFragment$1 as jni$_.JMethodIDPtr,
      _$fragment.pointer,
      _$intent.pointer,
      i,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startActivityIfNeeded = _class.instanceMethodId(
    r'startActivityIfNeeded',
    r'(Landroid/content/Intent;I)Z',
  );

  static final _startActivityIfNeeded =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public boolean startActivityIfNeeded(android.content.Intent intent, int i)`
  bool startActivityIfNeeded(
    jni$_.JObject? intent,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startActivityIfNeeded(
      reference.pointer,
      _id_startActivityIfNeeded as jni$_.JMethodIDPtr,
      _$intent.pointer,
      i,
    ).boolean;
  }

  static final _id_startActivityIfNeeded$1 = _class.instanceMethodId(
    r'startActivityIfNeeded',
    r'(Landroid/content/Intent;ILandroid/os/Bundle;)Z',
  );

  static final _startActivityIfNeeded$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean startActivityIfNeeded(android.content.Intent intent, int i, android.os.Bundle bundle)`
  bool startActivityIfNeeded$1(
    jni$_.JObject? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _startActivityIfNeeded$1(
      reference.pointer,
      _id_startActivityIfNeeded$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      i,
      _$bundle.pointer,
    ).boolean;
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;III)V',
  );

  static final _startIntentSender =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)`
  void startIntentSender(
    jni$_.JObject? intentSender,
    jni$_.JObject? intent,
    int i,
    int i1,
    int i2,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSender(
      reference.pointer,
      _id_startIntentSender as jni$_.JMethodIDPtr,
      _$intentSender.pointer,
      _$intent.pointer,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_startIntentSender$1 = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSender$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)`
  void startIntentSender$1(
    jni$_.JObject? intentSender,
    jni$_.JObject? intent,
    int i,
    int i1,
    int i2,
    jni$_.JObject? bundle,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSender$1(
      reference.pointer,
      _id_startIntentSender$1 as jni$_.JMethodIDPtr,
      _$intentSender.pointer,
      _$intent.pointer,
      i,
      i1,
      i2,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startIntentSenderForResult = _class.instanceMethodId(
    r'startIntentSenderForResult',
    r'(Landroid/content/IntentSender;ILandroid/content/Intent;III)V',
  );

  static final _startIntentSenderForResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)`
  void startIntentSenderForResult(
    jni$_.JObject? intentSender,
    int i,
    jni$_.JObject? intent,
    int i1,
    int i2,
    int i3,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSenderForResult(
      reference.pointer,
      _id_startIntentSenderForResult as jni$_.JMethodIDPtr,
      _$intentSender.pointer,
      i,
      _$intent.pointer,
      i1,
      i2,
      i3,
    ).check();
  }

  static final _id_startIntentSenderForResult$1 = _class.instanceMethodId(
    r'startIntentSenderForResult',
    r'(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSenderForResult$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)`
  void startIntentSenderForResult$1(
    jni$_.JObject? intentSender,
    int i,
    jni$_.JObject? intent,
    int i1,
    int i2,
    int i3,
    jni$_.JObject? bundle,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSenderForResult$1(
      reference.pointer,
      _id_startIntentSenderForResult$1 as jni$_.JMethodIDPtr,
      _$intentSender.pointer,
      i,
      _$intent.pointer,
      i1,
      i2,
      i3,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startIntentSenderFromChild = _class.instanceMethodId(
    r'startIntentSenderFromChild',
    r'(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;III)V',
  );

  static final _startIntentSenderFromChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)`
  void startIntentSenderFromChild(
    Activity? activity,
    jni$_.JObject? intentSender,
    int i,
    jni$_.JObject? intent,
    int i1,
    int i2,
    int i3,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSenderFromChild(
      reference.pointer,
      _id_startIntentSenderFromChild as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$intentSender.pointer,
      i,
      _$intent.pointer,
      i1,
      i2,
      i3,
    ).check();
  }

  static final _id_startIntentSenderFromChild$1 = _class.instanceMethodId(
    r'startIntentSenderFromChild',
    r'(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSenderFromChild$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)`
  void startIntentSenderFromChild$1(
    Activity? activity,
    jni$_.JObject? intentSender,
    int i,
    jni$_.JObject? intent,
    int i1,
    int i2,
    int i3,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSenderFromChild$1(
      reference.pointer,
      _id_startIntentSenderFromChild$1 as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$intentSender.pointer,
      i,
      _$intent.pointer,
      i1,
      i2,
      i3,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startLocalVoiceInteraction = _class.instanceMethodId(
    r'startLocalVoiceInteraction',
    r'(Landroid/os/Bundle;)V',
  );

  static final _startLocalVoiceInteraction =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void startLocalVoiceInteraction(android.os.Bundle bundle)`
  void startLocalVoiceInteraction(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startLocalVoiceInteraction(
      reference.pointer,
      _id_startLocalVoiceInteraction as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startLockTask = _class.instanceMethodId(
    r'startLockTask',
    r'()V',
  );

  static final _startLockTask =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void startLockTask()`
  void startLockTask() {
    _startLockTask(reference.pointer, _id_startLockTask as jni$_.JMethodIDPtr).check();
  }

  static final _id_startManagingCursor = _class.instanceMethodId(
    r'startManagingCursor',
    r'(Landroid/database/Cursor;)V',
  );

  static final _startManagingCursor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void startManagingCursor(android.database.Cursor cursor)`
  void startManagingCursor(
    jni$_.JObject? cursor,
  ) {
    final _$cursor = cursor?.reference ?? jni$_.jNullReference;
    _startManagingCursor(reference.pointer, _id_startManagingCursor as jni$_.JMethodIDPtr, _$cursor.pointer).check();
  }

  static final _id_startNextMatchingActivity = _class.instanceMethodId(
    r'startNextMatchingActivity',
    r'(Landroid/content/Intent;)Z',
  );

  static final _startNextMatchingActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean startNextMatchingActivity(android.content.Intent intent)`
  bool startNextMatchingActivity(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startNextMatchingActivity(
      reference.pointer,
      _id_startNextMatchingActivity as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).boolean;
  }

  static final _id_startNextMatchingActivity$1 = _class.instanceMethodId(
    r'startNextMatchingActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)Z',
  );

  static final _startNextMatchingActivity$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean startNextMatchingActivity(android.content.Intent intent, android.os.Bundle bundle)`
  bool startNextMatchingActivity$1(
    jni$_.JObject? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _startNextMatchingActivity$1(
      reference.pointer,
      _id_startNextMatchingActivity$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bundle.pointer,
    ).boolean;
  }

  static final _id_startPostponedEnterTransition = _class.instanceMethodId(
    r'startPostponedEnterTransition',
    r'()V',
  );

  static final _startPostponedEnterTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void startPostponedEnterTransition()`
  void startPostponedEnterTransition() {
    _startPostponedEnterTransition(reference.pointer, _id_startPostponedEnterTransition as jni$_.JMethodIDPtr).check();
  }

  static final _id_startSearch = _class.instanceMethodId(
    r'startSearch',
    r'(Ljava/lang/String;ZLandroid/os/Bundle;Z)V',
  );

  static final _startSearch =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void startSearch(java.lang.String string, boolean z, android.os.Bundle bundle, boolean z1)`
  void startSearch(
    jni$_.JString? string,
    bool z,
    jni$_.JObject? bundle,
    bool z1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startSearch(
      reference.pointer,
      _id_startSearch as jni$_.JMethodIDPtr,
      _$string.pointer,
      z ? 1 : 0,
      _$bundle.pointer,
      z1 ? 1 : 0,
    ).check();
  }

  static final _id_stopLocalVoiceInteraction = _class.instanceMethodId(
    r'stopLocalVoiceInteraction',
    r'()V',
  );

  static final _stopLocalVoiceInteraction =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void stopLocalVoiceInteraction()`
  void stopLocalVoiceInteraction() {
    _stopLocalVoiceInteraction(reference.pointer, _id_stopLocalVoiceInteraction as jni$_.JMethodIDPtr).check();
  }

  static final _id_stopLockTask = _class.instanceMethodId(
    r'stopLockTask',
    r'()V',
  );

  static final _stopLockTask =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void stopLockTask()`
  void stopLockTask() {
    _stopLockTask(reference.pointer, _id_stopLockTask as jni$_.JMethodIDPtr).check();
  }

  static final _id_stopManagingCursor = _class.instanceMethodId(
    r'stopManagingCursor',
    r'(Landroid/database/Cursor;)V',
  );

  static final _stopManagingCursor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void stopManagingCursor(android.database.Cursor cursor)`
  void stopManagingCursor(
    jni$_.JObject? cursor,
  ) {
    final _$cursor = cursor?.reference ?? jni$_.jNullReference;
    _stopManagingCursor(reference.pointer, _id_stopManagingCursor as jni$_.JMethodIDPtr, _$cursor.pointer).check();
  }

  static final _id_takeKeyEvents = _class.instanceMethodId(
    r'takeKeyEvents',
    r'(Z)V',
  );

  static final _takeKeyEvents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void takeKeyEvents(boolean z)`
  void takeKeyEvents(
    bool z,
  ) {
    _takeKeyEvents(reference.pointer, _id_takeKeyEvents as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_triggerSearch = _class.instanceMethodId(
    r'triggerSearch',
    r'(Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _triggerSearch =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void triggerSearch(java.lang.String string, android.os.Bundle bundle)`
  void triggerSearch(
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _triggerSearch(
      reference.pointer,
      _id_triggerSearch as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_unregisterActivityLifecycleCallbacks = _class.instanceMethodId(
    r'unregisterActivityLifecycleCallbacks',
    r'(Landroid/app/Application$ActivityLifecycleCallbacks;)V',
  );

  static final _unregisterActivityLifecycleCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)`
  void unregisterActivityLifecycleCallbacks(
    jni$_.JObject? activityLifecycleCallbacks,
  ) {
    final _$activityLifecycleCallbacks = activityLifecycleCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterActivityLifecycleCallbacks(
      reference.pointer,
      _id_unregisterActivityLifecycleCallbacks as jni$_.JMethodIDPtr,
      _$activityLifecycleCallbacks.pointer,
    ).check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r'unregisterComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _unregisterComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void unregisterComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks = componentCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterComponentCallbacks(
      reference.pointer,
      _id_unregisterComponentCallbacks as jni$_.JMethodIDPtr,
      _$componentCallbacks.pointer,
    ).check();
  }

  static final _id_unregisterForContextMenu = _class.instanceMethodId(
    r'unregisterForContextMenu',
    r'(Landroid/view/View;)V',
  );

  static final _unregisterForContextMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void unregisterForContextMenu(android.view.View view)`
  void unregisterForContextMenu(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _unregisterForContextMenu(
      reference.pointer,
      _id_unregisterForContextMenu as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_unregisterScreenCaptureCallback = _class.instanceMethodId(
    r'unregisterScreenCaptureCallback',
    r'(Landroid/app/Activity$ScreenCaptureCallback;)V',
  );

  static final _unregisterScreenCaptureCallback =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void unregisterScreenCaptureCallback(android.app.Activity$ScreenCaptureCallback screenCaptureCallback)`
  void unregisterScreenCaptureCallback(
    Activity$ScreenCaptureCallback? screenCaptureCallback,
  ) {
    final _$screenCaptureCallback = screenCaptureCallback?.reference ?? jni$_.jNullReference;
    _unregisterScreenCaptureCallback(
      reference.pointer,
      _id_unregisterScreenCaptureCallback as jni$_.JMethodIDPtr,
      _$screenCaptureCallback.pointer,
    ).check();
  }
}

final class $Activity$NullableType extends jni$_.JObjType<Activity?> {
  @jni$_.internal
  const $Activity$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Activity;';

  @jni$_.internal
  @core$_.override
  Activity? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Activity.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Activity?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Activity$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity$NullableType) && other is $Activity$NullableType;
  }
}

final class $Activity$Type extends jni$_.JObjType<Activity> {
  @jni$_.internal
  const $Activity$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Activity;';

  @jni$_.internal
  @core$_.override
  Activity fromReference(jni$_.JReference reference) => Activity.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Activity?> get nullableType => const $Activity$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Activity$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity$Type) && other is $Activity$Type;
  }
}

/// from: `android.content.Context$BindServiceFlags`
class Context$BindServiceFlags extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Context$BindServiceFlags> $type;

  @jni$_.internal
  Context$BindServiceFlags.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/content/Context$BindServiceFlags');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Context$BindServiceFlags$NullableType();
  static const type = $Context$BindServiceFlags$Type();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/Context$BindServiceFlags;',
  );

  static final _of =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public android.content.Context$BindServiceFlags of(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static Context$BindServiceFlags? of(
    int j,
  ) {
    return _of(
      _class.reference.pointer,
      _id_of as jni$_.JMethodIDPtr,
      j,
    ).object<Context$BindServiceFlags?>(const $Context$BindServiceFlags$NullableType());
  }
}

final class $Context$BindServiceFlags$NullableType extends jni$_.JObjType<Context$BindServiceFlags?> {
  @jni$_.internal
  const $Context$BindServiceFlags$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context$BindServiceFlags;';

  @jni$_.internal
  @core$_.override
  Context$BindServiceFlags? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Context$BindServiceFlags.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context$BindServiceFlags?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$BindServiceFlags$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$BindServiceFlags$NullableType) &&
        other is $Context$BindServiceFlags$NullableType;
  }
}

final class $Context$BindServiceFlags$Type extends jni$_.JObjType<Context$BindServiceFlags> {
  @jni$_.internal
  const $Context$BindServiceFlags$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context$BindServiceFlags;';

  @jni$_.internal
  @core$_.override
  Context$BindServiceFlags fromReference(jni$_.JReference reference) => Context$BindServiceFlags.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context$BindServiceFlags?> get nullableType => const $Context$BindServiceFlags$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$BindServiceFlags$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$BindServiceFlags$Type) && other is $Context$BindServiceFlags$Type;
  }
}

/// from: `android.content.Context`
class Context extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Context> $type;

  @jni$_.internal
  Context.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/content/Context');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Context$NullableType();
  static const type = $Context$Type();
  static final _id_ACCESSIBILITY_SERVICE = _class.staticFieldId(
    r'ACCESSIBILITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESSIBILITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESSIBILITY_SERVICE =>
      _id_ACCESSIBILITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACCOUNT_SERVICE = _class.staticFieldId(
    r'ACCOUNT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCOUNT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCOUNT_SERVICE => _id_ACCOUNT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTIVITY_SERVICE = _class.staticFieldId(
    r'ACTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTIVITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTIVITY_SERVICE => _id_ACTIVITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ADVANCED_PROTECTION_SERVICE = _class.staticFieldId(
    r'ADVANCED_PROTECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ADVANCED_PROTECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ADVANCED_PROTECTION_SERVICE =>
      _id_ADVANCED_PROTECTION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ALARM_SERVICE = _class.staticFieldId(
    r'ALARM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ALARM_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ALARM_SERVICE => _id_ALARM_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APPWIDGET_SERVICE = _class.staticFieldId(
    r'APPWIDGET_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPWIDGET_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPWIDGET_SERVICE => _id_APPWIDGET_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APP_FUNCTION_SERVICE = _class.staticFieldId(
    r'APP_FUNCTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APP_FUNCTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APP_FUNCTION_SERVICE =>
      _id_APP_FUNCTION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APP_OPS_SERVICE = _class.staticFieldId(
    r'APP_OPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APP_OPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APP_OPS_SERVICE => _id_APP_OPS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APP_SEARCH_SERVICE = _class.staticFieldId(
    r'APP_SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APP_SEARCH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APP_SEARCH_SERVICE => _id_APP_SEARCH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_SERVICE = _class.staticFieldId(
    r'AUDIO_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_SERVICE => _id_AUDIO_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BATTERY_SERVICE = _class.staticFieldId(
    r'BATTERY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BATTERY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BATTERY_SERVICE => _id_BATTERY_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int BIND_ABOVE_CLIENT`
  static const BIND_ABOVE_CLIENT = 8;

  /// from: `static public final int BIND_ADJUST_WITH_ACTIVITY`
  static const BIND_ADJUST_WITH_ACTIVITY = 128;

  /// from: `static public final int BIND_ALLOW_ACTIVITY_STARTS`
  static const BIND_ALLOW_ACTIVITY_STARTS = 512;

  /// from: `static public final int BIND_ALLOW_OOM_MANAGEMENT`
  static const BIND_ALLOW_OOM_MANAGEMENT = 16;

  /// from: `static public final int BIND_AUTO_CREATE`
  static const BIND_AUTO_CREATE = 1;

  /// from: `static public final int BIND_DEBUG_UNBIND`
  static const BIND_DEBUG_UNBIND = 2;

  /// from: `static public final int BIND_EXTERNAL_SERVICE`
  static const BIND_EXTERNAL_SERVICE = -2147483648;

  /// from: `static public final long BIND_EXTERNAL_SERVICE_LONG`
  static const BIND_EXTERNAL_SERVICE_LONG = 4611686018427387904;

  /// from: `static public final int BIND_IMPORTANT`
  static const BIND_IMPORTANT = 64;

  /// from: `static public final int BIND_INCLUDE_CAPABILITIES`
  static const BIND_INCLUDE_CAPABILITIES = 4096;

  /// from: `static public final int BIND_NOT_FOREGROUND`
  static const BIND_NOT_FOREGROUND = 4;

  /// from: `static public final int BIND_NOT_PERCEPTIBLE`
  static const BIND_NOT_PERCEPTIBLE = 256;

  /// from: `static public final int BIND_PACKAGE_ISOLATED_PROCESS`
  static const BIND_PACKAGE_ISOLATED_PROCESS = 16384;

  /// from: `static public final int BIND_SHARED_ISOLATED_PROCESS`
  static const BIND_SHARED_ISOLATED_PROCESS = 8192;

  /// from: `static public final int BIND_WAIVE_PRIORITY`
  static const BIND_WAIVE_PRIORITY = 32;
  static final _id_BIOMETRIC_SERVICE = _class.staticFieldId(
    r'BIOMETRIC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIOMETRIC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIOMETRIC_SERVICE => _id_BIOMETRIC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BLOB_STORE_SERVICE = _class.staticFieldId(
    r'BLOB_STORE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLOB_STORE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLOB_STORE_SERVICE => _id_BLOB_STORE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BLUETOOTH_SERVICE = _class.staticFieldId(
    r'BLUETOOTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLUETOOTH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLUETOOTH_SERVICE => _id_BLUETOOTH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BUGREPORT_SERVICE = _class.staticFieldId(
    r'BUGREPORT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BUGREPORT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BUGREPORT_SERVICE => _id_BUGREPORT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CAMERA_SERVICE = _class.staticFieldId(
    r'CAMERA_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAMERA_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAMERA_SERVICE => _id_CAMERA_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CAPTIONING_SERVICE = _class.staticFieldId(
    r'CAPTIONING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAPTIONING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAPTIONING_SERVICE => _id_CAPTIONING_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CARRIER_CONFIG_SERVICE = _class.staticFieldId(
    r'CARRIER_CONFIG_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CARRIER_CONFIG_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CARRIER_CONFIG_SERVICE =>
      _id_CARRIER_CONFIG_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CLIPBOARD_SERVICE = _class.staticFieldId(
    r'CLIPBOARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CLIPBOARD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CLIPBOARD_SERVICE => _id_CLIPBOARD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_COMPANION_DEVICE_SERVICE = _class.staticFieldId(
    r'COMPANION_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String COMPANION_DEVICE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get COMPANION_DEVICE_SERVICE =>
      _id_COMPANION_DEVICE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONNECTIVITY_DIAGNOSTICS_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_DIAGNOSTICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONNECTIVITY_DIAGNOSTICS_SERVICE =>
      _id_CONNECTIVITY_DIAGNOSTICS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONNECTIVITY_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONNECTIVITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONNECTIVITY_SERVICE =>
      _id_CONNECTIVITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONSUMER_IR_SERVICE = _class.staticFieldId(
    r'CONSUMER_IR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONSUMER_IR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONSUMER_IR_SERVICE =>
      _id_CONSUMER_IR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTACT_KEYS_SERVICE = _class.staticFieldId(
    r'CONTACT_KEYS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTACT_KEYS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTACT_KEYS_SERVICE =>
      _id_CONTACT_KEYS_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int CONTEXT_IGNORE_SECURITY`
  static const CONTEXT_IGNORE_SECURITY = 2;

  /// from: `static public final int CONTEXT_INCLUDE_CODE`
  static const CONTEXT_INCLUDE_CODE = 1;

  /// from: `static public final int CONTEXT_RESTRICTED`
  static const CONTEXT_RESTRICTED = 4;
  static final _id_CREDENTIAL_SERVICE = _class.staticFieldId(
    r'CREDENTIAL_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CREDENTIAL_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CREDENTIAL_SERVICE => _id_CREDENTIAL_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CROSS_PROFILE_APPS_SERVICE = _class.staticFieldId(
    r'CROSS_PROFILE_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CROSS_PROFILE_APPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CROSS_PROFILE_APPS_SERVICE =>
      _id_CROSS_PROFILE_APPS_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int DEVICE_ID_DEFAULT`
  static const DEVICE_ID_DEFAULT = 0;

  /// from: `static public final int DEVICE_ID_INVALID`
  static const DEVICE_ID_INVALID = -1;
  static final _id_DEVICE_LOCK_SERVICE = _class.staticFieldId(
    r'DEVICE_LOCK_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEVICE_LOCK_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEVICE_LOCK_SERVICE =>
      _id_DEVICE_LOCK_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DEVICE_POLICY_SERVICE = _class.staticFieldId(
    r'DEVICE_POLICY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEVICE_POLICY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEVICE_POLICY_SERVICE =>
      _id_DEVICE_POLICY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_HASH_SERVICE = _class.staticFieldId(
    r'DISPLAY_HASH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_HASH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_HASH_SERVICE =>
      _id_DISPLAY_HASH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_SERVICE = _class.staticFieldId(
    r'DISPLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_SERVICE => _id_DISPLAY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DOMAIN_VERIFICATION_SERVICE = _class.staticFieldId(
    r'DOMAIN_VERIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DOMAIN_VERIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DOMAIN_VERIFICATION_SERVICE =>
      _id_DOMAIN_VERIFICATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DOWNLOAD_SERVICE = _class.staticFieldId(
    r'DOWNLOAD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DOWNLOAD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DOWNLOAD_SERVICE => _id_DOWNLOAD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DROPBOX_SERVICE = _class.staticFieldId(
    r'DROPBOX_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DROPBOX_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DROPBOX_SERVICE => _id_DROPBOX_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_EUICC_SERVICE = _class.staticFieldId(
    r'EUICC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EUICC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EUICC_SERVICE => _id_EUICC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_FILE_INTEGRITY_SERVICE = _class.staticFieldId(
    r'FILE_INTEGRITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FILE_INTEGRITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FILE_INTEGRITY_SERVICE =>
      _id_FILE_INTEGRITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_FINGERPRINT_SERVICE = _class.staticFieldId(
    r'FINGERPRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FINGERPRINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FINGERPRINT_SERVICE =>
      _id_FINGERPRINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_GAME_SERVICE = _class.staticFieldId(
    r'GAME_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GAME_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GAME_SERVICE => _id_GAME_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_GRAMMATICAL_INFLECTION_SERVICE = _class.staticFieldId(
    r'GRAMMATICAL_INFLECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GRAMMATICAL_INFLECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GRAMMATICAL_INFLECTION_SERVICE =>
      _id_GRAMMATICAL_INFLECTION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_HARDWARE_PROPERTIES_SERVICE = _class.staticFieldId(
    r'HARDWARE_PROPERTIES_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HARDWARE_PROPERTIES_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get HARDWARE_PROPERTIES_SERVICE =>
      _id_HARDWARE_PROPERTIES_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_HEALTHCONNECT_SERVICE = _class.staticFieldId(
    r'HEALTHCONNECT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HEALTHCONNECT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get HEALTHCONNECT_SERVICE =>
      _id_HEALTHCONNECT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_INPUT_METHOD_SERVICE = _class.staticFieldId(
    r'INPUT_METHOD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INPUT_METHOD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INPUT_METHOD_SERVICE =>
      _id_INPUT_METHOD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_INPUT_SERVICE = _class.staticFieldId(
    r'INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INPUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INPUT_SERVICE => _id_INPUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_IPSEC_SERVICE = _class.staticFieldId(
    r'IPSEC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IPSEC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IPSEC_SERVICE => _id_IPSEC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_JOB_SCHEDULER_SERVICE = _class.staticFieldId(
    r'JOB_SCHEDULER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String JOB_SCHEDULER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get JOB_SCHEDULER_SERVICE =>
      _id_JOB_SCHEDULER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_KEYGUARD_SERVICE = _class.staticFieldId(
    r'KEYGUARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String KEYGUARD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get KEYGUARD_SERVICE => _id_KEYGUARD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_KEYSTORE_SERVICE = _class.staticFieldId(
    r'KEYSTORE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String KEYSTORE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get KEYSTORE_SERVICE => _id_KEYSTORE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LAUNCHER_APPS_SERVICE = _class.staticFieldId(
    r'LAUNCHER_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LAUNCHER_APPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LAUNCHER_APPS_SERVICE =>
      _id_LAUNCHER_APPS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LAYOUT_INFLATER_SERVICE = _class.staticFieldId(
    r'LAYOUT_INFLATER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LAYOUT_INFLATER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LAYOUT_INFLATER_SERVICE =>
      _id_LAYOUT_INFLATER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LOCALE_SERVICE = _class.staticFieldId(
    r'LOCALE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOCALE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOCALE_SERVICE => _id_LOCALE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LOCATION_SERVICE = _class.staticFieldId(
    r'LOCATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOCATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOCATION_SERVICE => _id_LOCATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_COMMUNICATION_SERVICE = _class.staticFieldId(
    r'MEDIA_COMMUNICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_COMMUNICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_COMMUNICATION_SERVICE =>
      _id_MEDIA_COMMUNICATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_METRICS_SERVICE = _class.staticFieldId(
    r'MEDIA_METRICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_METRICS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_METRICS_SERVICE =>
      _id_MEDIA_METRICS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_PROJECTION_SERVICE = _class.staticFieldId(
    r'MEDIA_PROJECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_PROJECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_PROJECTION_SERVICE =>
      _id_MEDIA_PROJECTION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_QUALITY_SERVICE = _class.staticFieldId(
    r'MEDIA_QUALITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_QUALITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_QUALITY_SERVICE =>
      _id_MEDIA_QUALITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_ROUTER_SERVICE = _class.staticFieldId(
    r'MEDIA_ROUTER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_ROUTER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_ROUTER_SERVICE =>
      _id_MEDIA_ROUTER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_SESSION_SERVICE = _class.staticFieldId(
    r'MEDIA_SESSION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_SESSION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_SESSION_SERVICE =>
      _id_MEDIA_SESSION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MIDI_SERVICE = _class.staticFieldId(
    r'MIDI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MIDI_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MIDI_SERVICE => _id_MIDI_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int MODE_APPEND`
  static const MODE_APPEND = 32768;

  /// from: `static public final int MODE_ENABLE_WRITE_AHEAD_LOGGING`
  static const MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;

  /// from: `static public final int MODE_MULTI_PROCESS`
  static const MODE_MULTI_PROCESS = 4;

  /// from: `static public final int MODE_NO_LOCALIZED_COLLATORS`
  static const MODE_NO_LOCALIZED_COLLATORS = 16;

  /// from: `static public final int MODE_PRIVATE`
  static const MODE_PRIVATE = 0;

  /// from: `static public final int MODE_WORLD_READABLE`
  static const MODE_WORLD_READABLE = 1;

  /// from: `static public final int MODE_WORLD_WRITEABLE`
  static const MODE_WORLD_WRITEABLE = 2;
  static final _id_NETWORK_STATS_SERVICE = _class.staticFieldId(
    r'NETWORK_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NETWORK_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NETWORK_STATS_SERVICE =>
      _id_NETWORK_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NFC_SERVICE = _class.staticFieldId(
    r'NFC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NFC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NFC_SERVICE => _id_NFC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NOTIFICATION_SERVICE = _class.staticFieldId(
    r'NOTIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NOTIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NOTIFICATION_SERVICE =>
      _id_NOTIFICATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NSD_SERVICE = _class.staticFieldId(
    r'NSD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NSD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NSD_SERVICE => _id_NSD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_OVERLAY_SERVICE = _class.staticFieldId(
    r'OVERLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String OVERLAY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get OVERLAY_SERVICE => _id_OVERLAY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PEOPLE_SERVICE = _class.staticFieldId(
    r'PEOPLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PEOPLE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PEOPLE_SERVICE => _id_PEOPLE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PERFORMANCE_HINT_SERVICE = _class.staticFieldId(
    r'PERFORMANCE_HINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERFORMANCE_HINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PERFORMANCE_HINT_SERVICE =>
      _id_PERFORMANCE_HINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PERSISTENT_DATA_BLOCK_SERVICE = _class.staticFieldId(
    r'PERSISTENT_DATA_BLOCK_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERSISTENT_DATA_BLOCK_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PERSISTENT_DATA_BLOCK_SERVICE =>
      _id_PERSISTENT_DATA_BLOCK_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_POWER_SERVICE = _class.staticFieldId(
    r'POWER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String POWER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get POWER_SERVICE => _id_POWER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PRINT_SERVICE = _class.staticFieldId(
    r'PRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PRINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PRINT_SERVICE => _id_PRINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PROFILING_SERVICE = _class.staticFieldId(
    r'PROFILING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROFILING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PROFILING_SERVICE => _id_PROFILING_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int RECEIVER_EXPORTED`
  static const RECEIVER_EXPORTED = 2;

  /// from: `static public final int RECEIVER_NOT_EXPORTED`
  static const RECEIVER_NOT_EXPORTED = 4;

  /// from: `static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS`
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;
  static final _id_RESTRICTIONS_SERVICE = _class.staticFieldId(
    r'RESTRICTIONS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RESTRICTIONS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RESTRICTIONS_SERVICE =>
      _id_RESTRICTIONS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ROLE_SERVICE = _class.staticFieldId(
    r'ROLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ROLE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ROLE_SERVICE => _id_ROLE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SATELLITE_SERVICE = _class.staticFieldId(
    r'SATELLITE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SATELLITE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SATELLITE_SERVICE => _id_SATELLITE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SEARCH_SERVICE = _class.staticFieldId(
    r'SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SEARCH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SEARCH_SERVICE => _id_SEARCH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SECURITY_STATE_SERVICE = _class.staticFieldId(
    r'SECURITY_STATE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SECURITY_STATE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SECURITY_STATE_SERVICE =>
      _id_SECURITY_STATE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SENSOR_SERVICE = _class.staticFieldId(
    r'SENSOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SENSOR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SENSOR_SERVICE => _id_SENSOR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SHORTCUT_SERVICE = _class.staticFieldId(
    r'SHORTCUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SHORTCUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SHORTCUT_SERVICE => _id_SHORTCUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STATUS_BAR_SERVICE = _class.staticFieldId(
    r'STATUS_BAR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STATUS_BAR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STATUS_BAR_SERVICE => _id_STATUS_BAR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STORAGE_SERVICE = _class.staticFieldId(
    r'STORAGE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STORAGE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STORAGE_SERVICE => _id_STORAGE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STORAGE_STATS_SERVICE = _class.staticFieldId(
    r'STORAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STORAGE_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STORAGE_STATS_SERVICE =>
      _id_STORAGE_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SYSTEM_HEALTH_SERVICE = _class.staticFieldId(
    r'SYSTEM_HEALTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYSTEM_HEALTH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SYSTEM_HEALTH_SERVICE =>
      _id_SYSTEM_HEALTH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELECOM_SERVICE = _class.staticFieldId(
    r'TELECOM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELECOM_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELECOM_SERVICE => _id_TELECOM_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_IMS_SERVICE = _class.staticFieldId(
    r'TELEPHONY_IMS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_IMS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_IMS_SERVICE =>
      _id_TELEPHONY_IMS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_SERVICE => _id_TELEPHONY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_SUBSCRIPTION_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SUBSCRIPTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_SUBSCRIPTION_SERVICE =>
      _id_TELEPHONY_SUBSCRIPTION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TETHERING_SERVICE = _class.staticFieldId(
    r'TETHERING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TETHERING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TETHERING_SERVICE => _id_TETHERING_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TEXT_CLASSIFICATION_SERVICE = _class.staticFieldId(
    r'TEXT_CLASSIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_CLASSIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_CLASSIFICATION_SERVICE =>
      _id_TEXT_CLASSIFICATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TEXT_SERVICES_MANAGER_SERVICE = _class.staticFieldId(
    r'TEXT_SERVICES_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_SERVICES_MANAGER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_SERVICES_MANAGER_SERVICE =>
      _id_TEXT_SERVICES_MANAGER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TV_AD_SERVICE = _class.staticFieldId(
    r'TV_AD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TV_AD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TV_AD_SERVICE => _id_TV_AD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TV_INPUT_SERVICE = _class.staticFieldId(
    r'TV_INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TV_INPUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TV_INPUT_SERVICE => _id_TV_INPUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TV_INTERACTIVE_APP_SERVICE = _class.staticFieldId(
    r'TV_INTERACTIVE_APP_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TV_INTERACTIVE_APP_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TV_INTERACTIVE_APP_SERVICE =>
      _id_TV_INTERACTIVE_APP_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_UI_MODE_SERVICE = _class.staticFieldId(
    r'UI_MODE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String UI_MODE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get UI_MODE_SERVICE => _id_UI_MODE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USAGE_STATS_SERVICE = _class.staticFieldId(
    r'USAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USAGE_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USAGE_STATS_SERVICE =>
      _id_USAGE_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USB_SERVICE = _class.staticFieldId(
    r'USB_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USB_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USB_SERVICE => _id_USB_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USER_SERVICE = _class.staticFieldId(
    r'USER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USER_SERVICE => _id_USER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VIBRATOR_MANAGER_SERVICE = _class.staticFieldId(
    r'VIBRATOR_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIBRATOR_MANAGER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIBRATOR_MANAGER_SERVICE =>
      _id_VIBRATOR_MANAGER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VIBRATOR_SERVICE = _class.staticFieldId(
    r'VIBRATOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIBRATOR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIBRATOR_SERVICE => _id_VIBRATOR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VIRTUAL_DEVICE_SERVICE = _class.staticFieldId(
    r'VIRTUAL_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIRTUAL_DEVICE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIRTUAL_DEVICE_SERVICE =>
      _id_VIRTUAL_DEVICE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VPN_MANAGEMENT_SERVICE = _class.staticFieldId(
    r'VPN_MANAGEMENT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VPN_MANAGEMENT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VPN_MANAGEMENT_SERVICE =>
      _id_VPN_MANAGEMENT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WALLPAPER_SERVICE = _class.staticFieldId(
    r'WALLPAPER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WALLPAPER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WALLPAPER_SERVICE => _id_WALLPAPER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_AWARE_SERVICE = _class.staticFieldId(
    r'WIFI_AWARE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_AWARE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_AWARE_SERVICE => _id_WIFI_AWARE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_P2P_SERVICE = _class.staticFieldId(
    r'WIFI_P2P_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_P2P_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_P2P_SERVICE => _id_WIFI_P2P_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_RTT_RANGING_SERVICE = _class.staticFieldId(
    r'WIFI_RTT_RANGING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_RTT_RANGING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_RTT_RANGING_SERVICE =>
      _id_WIFI_RTT_RANGING_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_SERVICE = _class.staticFieldId(
    r'WIFI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_SERVICE => _id_WIFI_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WINDOW_SERVICE = _class.staticFieldId(
    r'WINDOW_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WINDOW_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WINDOW_SERVICE => _id_WINDOW_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_bindIsolatedService = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindIsolatedService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindIsolatedService(
    jni$_.JObject? intent,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JString? string,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags = bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindIsolatedService(
      reference.pointer,
      _id_bindIsolatedService as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bindServiceFlags.pointer,
      _$string.pointer,
      _$executor.pointer,
      _$serviceConnection.pointer,
    ).boolean;
  }

  static final _id_bindIsolatedService$1 = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;ILjava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindIsolatedService(android.content.Intent intent, int i, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindIsolatedService$1(
    jni$_.JObject? intent,
    int i,
    jni$_.JString? string,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindIsolatedService$1(
      reference.pointer,
      _id_bindIsolatedService$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      i,
      _$string.pointer,
      _$executor.pointer,
      _$serviceConnection.pointer,
    ).boolean;
  }

  static final _id_bindService = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindService(
    jni$_.JObject? intent,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags = bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService(
      reference.pointer,
      _id_bindService as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bindServiceFlags.pointer,
      _$executor.pointer,
      _$serviceConnection.pointer,
    ).boolean;
  }

  static final _id_bindService$1 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;)Z',
  );

  static final _bindService$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags)`
  bool bindService$1(
    jni$_.JObject? intent,
    jni$_.JObject? serviceConnection,
    Context$BindServiceFlags? bindServiceFlags,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags = bindServiceFlags?.reference ?? jni$_.jNullReference;
    return _bindService$1(
      reference.pointer,
      _id_bindService$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$serviceConnection.pointer,
      _$bindServiceFlags.pointer,
    ).boolean;
  }

  static final _id_bindService$2 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z',
  );

  static final _bindService$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i)`
  bool bindService$2(
    jni$_.JObject? intent,
    jni$_.JObject? serviceConnection,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService$2(
      reference.pointer,
      _id_bindService$2 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$serviceConnection.pointer,
      i,
    ).boolean;
  }

  static final _id_bindService$3 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;ILjava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindService(android.content.Intent intent, int i, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindService$3(
    jni$_.JObject? intent,
    int i,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService$3(
      reference.pointer,
      _id_bindService$3 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      i,
      _$executor.pointer,
      _$serviceConnection.pointer,
    ).boolean;
  }

  static final _id_bindServiceAsUser = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;Landroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags, android.os.UserHandle userHandle)`
  bool bindServiceAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? serviceConnection,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags = bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    return _bindServiceAsUser(
      reference.pointer,
      _id_bindServiceAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$serviceConnection.pointer,
      _$bindServiceFlags.pointer,
      _$userHandle.pointer,
    ).boolean;
  }

  static final _id_bindServiceAsUser$1 = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.UserHandle userHandle)`
  bool bindServiceAsUser$1(
    jni$_.JObject? intent,
    jni$_.JObject? serviceConnection,
    int i,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    return _bindServiceAsUser$1(
      reference.pointer,
      _id_bindServiceAsUser$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$serviceConnection.pointer,
      i,
      _$userHandle.pointer,
    ).boolean;
  }

  static final _id_checkCallingOrSelfPermission = _class.instanceMethodId(
    r'checkCallingOrSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingOrSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract int checkCallingOrSelfPermission(java.lang.String string)`
  int checkCallingOrSelfPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfPermission(
      reference.pointer,
      _id_checkCallingOrSelfPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).integer;
  }

  static final _id_checkCallingOrSelfUriPermission = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingOrSelfUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public abstract int checkCallingOrSelfUriPermission(android.net.Uri uri, int i)`
  int checkCallingOrSelfUriPermission(
    jni$_.JObject? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfUriPermission(
      reference.pointer,
      _id_checkCallingOrSelfUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
    ).integer;
  }

  static final _id_checkCallingOrSelfUriPermissions = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingOrSelfUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public int[] checkCallingOrSelfUriPermissions(java.util.List<android.net.Uri> list, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkCallingOrSelfUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfUriPermissions(
      reference.pointer,
      _id_checkCallingOrSelfUriPermissions as jni$_.JMethodIDPtr,
      _$list.pointer,
      i,
    ).object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkCallingPermission = _class.instanceMethodId(
    r'checkCallingPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract int checkCallingPermission(java.lang.String string)`
  int checkCallingPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkCallingPermission(
      reference.pointer,
      _id_checkCallingPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).integer;
  }

  static final _id_checkCallingUriPermission = _class.instanceMethodId(
    r'checkCallingUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public abstract int checkCallingUriPermission(android.net.Uri uri, int i)`
  int checkCallingUriPermission(
    jni$_.JObject? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkCallingUriPermission(
      reference.pointer,
      _id_checkCallingUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
    ).integer;
  }

  static final _id_checkCallingUriPermissions = _class.instanceMethodId(
    r'checkCallingUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public int[] checkCallingUriPermissions(java.util.List<android.net.Uri> list, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkCallingUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkCallingUriPermissions(
      reference.pointer,
      _id_checkCallingUriPermissions as jni$_.JMethodIDPtr,
      _$list.pointer,
      i,
    ).object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkContentUriPermissionFull = _class.instanceMethodId(
    r'checkContentUriPermissionFull',
    r'(Landroid/net/Uri;III)I',
  );

  static final _checkContentUriPermissionFull =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public int checkContentUriPermissionFull(android.net.Uri uri, int i, int i1, int i2)`
  int checkContentUriPermissionFull(
    jni$_.JObject? uri,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkContentUriPermissionFull(
      reference.pointer,
      _id_checkContentUriPermissionFull as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      i1,
      i2,
    ).integer;
  }

  static final _id_checkPermission = _class.instanceMethodId(
    r'checkPermission',
    r'(Ljava/lang/String;II)I',
  );

  static final _checkPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int)
          >();

  /// from: `public abstract int checkPermission(java.lang.String string, int i, int i1)`
  int checkPermission(
    jni$_.JString? string,
    int i,
    int i1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkPermission(
      reference.pointer,
      _id_checkPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
      i1,
    ).integer;
  }

  static final _id_checkSelfPermission = _class.instanceMethodId(
    r'checkSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract int checkSelfPermission(java.lang.String string)`
  int checkSelfPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkSelfPermission(
      reference.pointer,
      _id_checkSelfPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).integer;
  }

  static final _id_checkUriPermission = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;III)I',
  );

  static final _checkUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public abstract int checkUriPermission(android.net.Uri uri, int i, int i1, int i2)`
  int checkUriPermission(
    jni$_.JObject? uri,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkUriPermission(
      reference.pointer,
      _id_checkUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      i1,
      i2,
    ).integer;
  }

  static final _id_checkUriPermission$1 = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I',
  );

  static final _checkUriPermission$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public abstract int checkUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2)`
  int checkUriPermission$1(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _checkUriPermission$1(
      reference.pointer,
      _id_checkUriPermission$1 as jni$_.JMethodIDPtr,
      _$uri.pointer,
      _$string.pointer,
      _$string1.pointer,
      i,
      i1,
      i2,
    ).integer;
  }

  static final _id_checkUriPermissions = _class.instanceMethodId(
    r'checkUriPermissions',
    r'(Ljava/util/List;III)[I',
  );

  static final _checkUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public int[] checkUriPermissions(java.util.List<android.net.Uri> list, int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
    int i1,
    int i2,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkUriPermissions(
      reference.pointer,
      _id_checkUriPermissions as jni$_.JMethodIDPtr,
      _$list.pointer,
      i,
      i1,
      i2,
    ).object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_clearWallpaper = _class.instanceMethodId(
    r'clearWallpaper',
    r'()V',
  );

  static final _clearWallpaper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract void clearWallpaper()`
  void clearWallpaper() {
    _clearWallpaper(reference.pointer, _id_clearWallpaper as jni$_.JMethodIDPtr).check();
  }

  static final _id_createAttributionContext = _class.instanceMethodId(
    r'createAttributionContext',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createAttributionContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Context createAttributionContext(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createAttributionContext(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createAttributionContext(
      reference.pointer,
      _id_createAttributionContext as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createConfigurationContext = _class.instanceMethodId(
    r'createConfigurationContext',
    r'(Landroid/content/res/Configuration;)Landroid/content/Context;',
  );

  static final _createConfigurationContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract android.content.Context createConfigurationContext(android.content.res.Configuration configuration)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createConfigurationContext(
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    return _createConfigurationContext(
      reference.pointer,
      _id_createConfigurationContext as jni$_.JMethodIDPtr,
      _$configuration.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createContext = _class.instanceMethodId(
    r'createContext',
    r'(Landroid/content/ContextParams;)Landroid/content/Context;',
  );

  static final _createContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Context createContext(android.content.ContextParams contextParams)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createContext(
    jni$_.JObject? contextParams,
  ) {
    final _$contextParams = contextParams?.reference ?? jni$_.jNullReference;
    return _createContext(
      reference.pointer,
      _id_createContext as jni$_.JMethodIDPtr,
      _$contextParams.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createContextForSplit = _class.instanceMethodId(
    r'createContextForSplit',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createContextForSplit =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract android.content.Context createContextForSplit(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createContextForSplit(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createContextForSplit(
      reference.pointer,
      _id_createContextForSplit as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createDeviceContext = _class.instanceMethodId(
    r'createDeviceContext',
    r'(I)Landroid/content/Context;',
  );

  static final _createDeviceContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.content.Context createDeviceContext(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDeviceContext(
    int i,
  ) {
    return _createDeviceContext(
      reference.pointer,
      _id_createDeviceContext as jni$_.JMethodIDPtr,
      i,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createDeviceProtectedStorageContext = _class.instanceMethodId(
    r'createDeviceProtectedStorageContext',
    r'()Landroid/content/Context;',
  );

  static final _createDeviceProtectedStorageContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.Context createDeviceProtectedStorageContext()`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDeviceProtectedStorageContext() {
    return _createDeviceProtectedStorageContext(
      reference.pointer,
      _id_createDeviceProtectedStorageContext as jni$_.JMethodIDPtr,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createDisplayContext = _class.instanceMethodId(
    r'createDisplayContext',
    r'(Landroid/view/Display;)Landroid/content/Context;',
  );

  static final _createDisplayContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract android.content.Context createDisplayContext(android.view.Display display)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDisplayContext(
    jni$_.JObject? display,
  ) {
    final _$display = display?.reference ?? jni$_.jNullReference;
    return _createDisplayContext(
      reference.pointer,
      _id_createDisplayContext as jni$_.JMethodIDPtr,
      _$display.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createPackageContext = _class.instanceMethodId(
    r'createPackageContext',
    r'(Ljava/lang/String;I)Landroid/content/Context;',
  );

  static final _createPackageContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public abstract android.content.Context createPackageContext(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createPackageContext(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createPackageContext(
      reference.pointer,
      _id_createPackageContext as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createWindowContext = _class.instanceMethodId(
    r'createWindowContext',
    r'(Landroid/view/Display;ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Context createWindowContext(android.view.Display display, int i, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createWindowContext(
    jni$_.JObject? display,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$display = display?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _createWindowContext(
      reference.pointer,
      _id_createWindowContext as jni$_.JMethodIDPtr,
      _$display.pointer,
      i,
      _$bundle.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createWindowContext$1 = _class.instanceMethodId(
    r'createWindowContext',
    r'(ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Context createWindowContext(int i, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createWindowContext$1(
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _createWindowContext$1(
      reference.pointer,
      _id_createWindowContext$1 as jni$_.JMethodIDPtr,
      i,
      _$bundle.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_databaseList = _class.instanceMethodId(
    r'databaseList',
    r'()[Ljava/lang/String;',
  );

  static final _databaseList =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String[] databaseList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? databaseList() {
    return _databaseList(
      reference.pointer,
      _id_databaseList as jni$_.JMethodIDPtr,
    ).object<jni$_.JArray<jni$_.JString?>?>(
      const jni$_.JArrayNullableType<jni$_.JString?>(jni$_.JStringNullableType()),
    );
  }

  static final _id_deleteDatabase = _class.instanceMethodId(
    r'deleteDatabase',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteDatabase =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract boolean deleteDatabase(java.lang.String string)`
  bool deleteDatabase(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteDatabase(reference.pointer, _id_deleteDatabase as jni$_.JMethodIDPtr, _$string.pointer).boolean;
  }

  static final _id_deleteFile = _class.instanceMethodId(
    r'deleteFile',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteFile =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract boolean deleteFile(java.lang.String string)`
  bool deleteFile(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteFile(reference.pointer, _id_deleteFile as jni$_.JMethodIDPtr, _$string.pointer).boolean;
  }

  static final _id_deleteSharedPreferences = _class.instanceMethodId(
    r'deleteSharedPreferences',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteSharedPreferences =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract boolean deleteSharedPreferences(java.lang.String string)`
  bool deleteSharedPreferences(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteSharedPreferences(
      reference.pointer,
      _id_deleteSharedPreferences as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).boolean;
  }

  static final _id_enforceCallingOrSelfPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingOrSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceCallingOrSelfPermission(java.lang.String string, java.lang.String string1)`
  void enforceCallingOrSelfPermission(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforceCallingOrSelfPermission(
      reference.pointer,
      _id_enforceCallingOrSelfPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).check();
  }

  static final _id_enforceCallingOrSelfUriPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingOrSelfUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceCallingOrSelfUriPermission(android.net.Uri uri, int i, java.lang.String string)`
  void enforceCallingOrSelfUriPermission(
    jni$_.JObject? uri,
    int i,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceCallingOrSelfUriPermission(
      reference.pointer,
      _id_enforceCallingOrSelfUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      _$string.pointer,
    ).check();
  }

  static final _id_enforceCallingPermission = _class.instanceMethodId(
    r'enforceCallingPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceCallingPermission(java.lang.String string, java.lang.String string1)`
  void enforceCallingPermission(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforceCallingPermission(
      reference.pointer,
      _id_enforceCallingPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).check();
  }

  static final _id_enforceCallingUriPermission = _class.instanceMethodId(
    r'enforceCallingUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceCallingUriPermission(android.net.Uri uri, int i, java.lang.String string)`
  void enforceCallingUriPermission(
    jni$_.JObject? uri,
    int i,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceCallingUriPermission(
      reference.pointer,
      _id_enforceCallingUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      _$string.pointer,
    ).check();
  }

  static final _id_enforcePermission = _class.instanceMethodId(
    r'enforcePermission',
    r'(Ljava/lang/String;IILjava/lang/String;)V',
  );

  static final _enforcePermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforcePermission(java.lang.String string, int i, int i1, java.lang.String string1)`
  void enforcePermission(
    jni$_.JString? string,
    int i,
    int i1,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforcePermission(
      reference.pointer,
      _id_enforcePermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
      i1,
      _$string1.pointer,
    ).check();
  }

  static final _id_enforceUriPermission = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32, jni$_.Int32, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceUriPermission(android.net.Uri uri, int i, int i1, int i2, java.lang.String string)`
  void enforceUriPermission(
    jni$_.JObject? uri,
    int i,
    int i1,
    int i2,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceUriPermission(
      reference.pointer,
      _id_enforceUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      i1,
      i2,
      _$string.pointer,
    ).check();
  }

  static final _id_enforceUriPermission$1 = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2, java.lang.String string2)`
  void enforceUriPermission$1(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
    int i1,
    int i2,
    jni$_.JString? string2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    _enforceUriPermission$1(
      reference.pointer,
      _id_enforceUriPermission$1 as jni$_.JMethodIDPtr,
      _$uri.pointer,
      _$string.pointer,
      _$string1.pointer,
      i,
      i1,
      i2,
      _$string2.pointer,
    ).check();
  }

  static final _id_fileList = _class.instanceMethodId(
    r'fileList',
    r'()[Ljava/lang/String;',
  );

  static final _fileList =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String[] fileList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? fileList() {
    return _fileList(reference.pointer, _id_fileList as jni$_.JMethodIDPtr).object<jni$_.JArray<jni$_.JString?>?>(
      const jni$_.JArrayNullableType<jni$_.JString?>(jni$_.JStringNullableType()),
    );
  }

  static final _id_getApplicationContext = _class.instanceMethodId(
    r'getApplicationContext',
    r'()Landroid/content/Context;',
  );

  static final _getApplicationContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.Context getApplicationContext()`
  /// The returned object must be released after use, by calling the [release] method.
  Context? getApplicationContext() {
    return _getApplicationContext(
      reference.pointer,
      _id_getApplicationContext as jni$_.JMethodIDPtr,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_getApplicationInfo = _class.instanceMethodId(
    r'getApplicationInfo',
    r'()Landroid/content/pm/ApplicationInfo;',
  );

  static final _getApplicationInfo =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.pm.ApplicationInfo getApplicationInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getApplicationInfo() {
    return _getApplicationInfo(
      reference.pointer,
      _id_getApplicationInfo as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getAssets = _class.instanceMethodId(
    r'getAssets',
    r'()Landroid/content/res/AssetManager;',
  );

  static final _getAssets =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.res.AssetManager getAssets()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAssets() {
    return _getAssets(
      reference.pointer,
      _id_getAssets as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getAttributionSource = _class.instanceMethodId(
    r'getAttributionSource',
    r'()Landroid/content/AttributionSource;',
  );

  static final _getAttributionSource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.AttributionSource getAttributionSource()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAttributionSource() {
    return _getAttributionSource(
      reference.pointer,
      _id_getAttributionSource as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getAttributionTag = _class.instanceMethodId(
    r'getAttributionTag',
    r'()Ljava/lang/String;',
  );

  static final _getAttributionTag =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getAttributionTag()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAttributionTag() {
    return _getAttributionTag(
      reference.pointer,
      _id_getAttributionTag as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getCacheDir = _class.instanceMethodId(
    r'getCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCacheDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCacheDir() {
    return _getCacheDir(
      reference.pointer,
      _id_getCacheDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getClassLoader = _class.instanceMethodId(
    r'getClassLoader',
    r'()Ljava/lang/ClassLoader;',
  );

  static final _getClassLoader =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.ClassLoader getClassLoader()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getClassLoader() {
    return _getClassLoader(
      reference.pointer,
      _id_getClassLoader as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCodeCacheDir = _class.instanceMethodId(
    r'getCodeCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCodeCacheDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getCodeCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCodeCacheDir() {
    return _getCodeCacheDir(
      reference.pointer,
      _id_getCodeCacheDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getColor = _class.instanceMethodId(
    r'getColor',
    r'(I)I',
  );

  static final _getColor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallIntMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final int getColor(int i)`
  int getColor(
    int i,
  ) {
    return _getColor(reference.pointer, _id_getColor as jni$_.JMethodIDPtr, i).integer;
  }

  static final _id_getColorStateList = _class.instanceMethodId(
    r'getColorStateList',
    r'(I)Landroid/content/res/ColorStateList;',
  );

  static final _getColorStateList =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.content.res.ColorStateList getColorStateList(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getColorStateList(
    int i,
  ) {
    return _getColorStateList(
      reference.pointer,
      _id_getColorStateList as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getContentResolver = _class.instanceMethodId(
    r'getContentResolver',
    r'()Landroid/content/ContentResolver;',
  );

  static final _getContentResolver =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.ContentResolver getContentResolver()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getContentResolver() {
    return _getContentResolver(
      reference.pointer,
      _id_getContentResolver as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDataDir = _class.instanceMethodId(
    r'getDataDir',
    r'()Ljava/io/File;',
  );

  static final _getDataDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getDataDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDataDir() {
    return _getDataDir(
      reference.pointer,
      _id_getDataDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDatabasePath = _class.instanceMethodId(
    r'getDatabasePath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getDatabasePath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract java.io.File getDatabasePath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDatabasePath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDatabasePath(
      reference.pointer,
      _id_getDatabasePath as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDeviceId = _class.instanceMethodId(
    r'getDeviceId',
    r'()I',
  );

  static final _getDeviceId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getDeviceId()`
  int getDeviceId() {
    return _getDeviceId(reference.pointer, _id_getDeviceId as jni$_.JMethodIDPtr).integer;
  }

  static final _id_getDir = _class.instanceMethodId(
    r'getDir',
    r'(Ljava/lang/String;I)Ljava/io/File;',
  );

  static final _getDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public abstract java.io.File getDir(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDir(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDir(
      reference.pointer,
      _id_getDir as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDisplay = _class.instanceMethodId(
    r'getDisplay',
    r'()Landroid/view/Display;',
  );

  static final _getDisplay =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.Display getDisplay()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDisplay() {
    return _getDisplay(
      reference.pointer,
      _id_getDisplay as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDrawable = _class.instanceMethodId(
    r'getDrawable',
    r'(I)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawable =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.graphics.drawable.Drawable getDrawable(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDrawable(
    int i,
  ) {
    return _getDrawable(
      reference.pointer,
      _id_getDrawable as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalCacheDir = _class.instanceMethodId(
    r'getExternalCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getExternalCacheDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getExternalCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExternalCacheDir() {
    return _getExternalCacheDir(
      reference.pointer,
      _id_getExternalCacheDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalCacheDirs = _class.instanceMethodId(
    r'getExternalCacheDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalCacheDirs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File[] getExternalCacheDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalCacheDirs() {
    return _getExternalCacheDirs(
      reference.pointer,
      _id_getExternalCacheDirs as jni$_.JMethodIDPtr,
    ).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(jni$_.JObjectNullableType()),
    );
  }

  static final _id_getExternalFilesDir = _class.instanceMethodId(
    r'getExternalFilesDir',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getExternalFilesDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract java.io.File getExternalFilesDir(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExternalFilesDir(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getExternalFilesDir(
      reference.pointer,
      _id_getExternalFilesDir as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalFilesDirs = _class.instanceMethodId(
    r'getExternalFilesDirs',
    r'(Ljava/lang/String;)[Ljava/io/File;',
  );

  static final _getExternalFilesDirs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract java.io.File[] getExternalFilesDirs(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalFilesDirs(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getExternalFilesDirs(
      reference.pointer,
      _id_getExternalFilesDirs as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(jni$_.JObjectNullableType()),
    );
  }

  static final _id_getExternalMediaDirs = _class.instanceMethodId(
    r'getExternalMediaDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalMediaDirs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File[] getExternalMediaDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalMediaDirs() {
    return _getExternalMediaDirs(
      reference.pointer,
      _id_getExternalMediaDirs as jni$_.JMethodIDPtr,
    ).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(jni$_.JObjectNullableType()),
    );
  }

  static final _id_getFileStreamPath = _class.instanceMethodId(
    r'getFileStreamPath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getFileStreamPath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract java.io.File getFileStreamPath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFileStreamPath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getFileStreamPath(
      reference.pointer,
      _id_getFileStreamPath as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getFilesDir = _class.instanceMethodId(
    r'getFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getFilesDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getFilesDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFilesDir() {
    return _getFilesDir(
      reference.pointer,
      _id_getFilesDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMainExecutor = _class.instanceMethodId(
    r'getMainExecutor',
    r'()Ljava/util/concurrent/Executor;',
  );

  static final _getMainExecutor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.concurrent.Executor getMainExecutor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMainExecutor() {
    return _getMainExecutor(
      reference.pointer,
      _id_getMainExecutor as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMainLooper = _class.instanceMethodId(
    r'getMainLooper',
    r'()Landroid/os/Looper;',
  );

  static final _getMainLooper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.os.Looper getMainLooper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMainLooper() {
    return _getMainLooper(
      reference.pointer,
      _id_getMainLooper as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getNoBackupFilesDir = _class.instanceMethodId(
    r'getNoBackupFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getNoBackupFilesDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getNoBackupFilesDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getNoBackupFilesDir() {
    return _getNoBackupFilesDir(
      reference.pointer,
      _id_getNoBackupFilesDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getObbDir = _class.instanceMethodId(
    r'getObbDir',
    r'()Ljava/io/File;',
  );

  static final _getObbDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getObbDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getObbDir() {
    return _getObbDir(
      reference.pointer,
      _id_getObbDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getObbDirs = _class.instanceMethodId(
    r'getObbDirs',
    r'()[Ljava/io/File;',
  );

  static final _getObbDirs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File[] getObbDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getObbDirs() {
    return _getObbDirs(reference.pointer, _id_getObbDirs as jni$_.JMethodIDPtr).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(jni$_.JObjectNullableType()),
    );
  }

  static final _id_getOpPackageName = _class.instanceMethodId(
    r'getOpPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getOpPackageName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getOpPackageName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getOpPackageName() {
    return _getOpPackageName(
      reference.pointer,
      _id_getOpPackageName as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getPackageCodePath = _class.instanceMethodId(
    r'getPackageCodePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageCodePath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getPackageCodePath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageCodePath() {
    return _getPackageCodePath(
      reference.pointer,
      _id_getPackageCodePath as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getPackageManager = _class.instanceMethodId(
    r'getPackageManager',
    r'()Landroid/content/pm/PackageManager;',
  );

  static final _getPackageManager =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.pm.PackageManager getPackageManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getPackageManager() {
    return _getPackageManager(
      reference.pointer,
      _id_getPackageManager as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageName = _class.instanceMethodId(
    r'getPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getPackageName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getPackageName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageName() {
    return _getPackageName(
      reference.pointer,
      _id_getPackageName as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getPackageResourcePath = _class.instanceMethodId(
    r'getPackageResourcePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageResourcePath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getPackageResourcePath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageResourcePath() {
    return _getPackageResourcePath(
      reference.pointer,
      _id_getPackageResourcePath as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getParams = _class.instanceMethodId(
    r'getParams',
    r'()Landroid/content/ContextParams;',
  );

  static final _getParams =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.ContextParams getParams()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getParams() {
    return _getParams(
      reference.pointer,
      _id_getParams as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getResources = _class.instanceMethodId(
    r'getResources',
    r'()Landroid/content/res/Resources;',
  );

  static final _getResources =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.res.Resources getResources()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getResources() {
    return _getResources(
      reference.pointer,
      _id_getResources as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSharedPreferences = _class.instanceMethodId(
    r'getSharedPreferences',
    r'(Ljava/lang/String;I)Landroid/content/SharedPreferences;',
  );

  static final _getSharedPreferences =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSharedPreferences(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSharedPreferences(
      reference.pointer,
      _id_getSharedPreferences as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getString = _class.instanceMethodId(
    r'getString',
    r'(I)Ljava/lang/String;',
  );

  static final _getString =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final java.lang.String getString(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getString(
    int i,
  ) {
    return _getString(
      reference.pointer,
      _id_getString as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getString$1 = _class.instanceMethodId(
    r'getString',
    r'(I[Ljava/lang/Object;)Ljava/lang/String;',
  );

  static final _getString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final java.lang.String getString(int i, java.lang.Object[] objects)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getString$1(
    int i,
    jni$_.JArray<jni$_.JObject?>? objects,
  ) {
    final _$objects = objects?.reference ?? jni$_.jNullReference;
    return _getString$1(
      reference.pointer,
      _id_getString$1 as jni$_.JMethodIDPtr,
      i,
      _$objects.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _getSystemService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final T getSystemService(java.lang.Class<T> class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getSystemService<$T extends jni$_.JObject?>(
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSystemService(
      reference.pointer,
      _id_getSystemService as jni$_.JMethodIDPtr,
      _$class$.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_getSystemService$1 = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _getSystemService$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract java.lang.Object getSystemService(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSystemService$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSystemService$1(
      reference.pointer,
      _id_getSystemService$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSystemServiceName = _class.instanceMethodId(
    r'getSystemServiceName',
    r'(Ljava/lang/Class;)Ljava/lang/String;',
  );

  static final _getSystemServiceName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract java.lang.String getSystemServiceName(java.lang.Class<?> class)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getSystemServiceName(
    jni$_.JObject? class$,
  ) {
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSystemServiceName(
      reference.pointer,
      _id_getSystemServiceName as jni$_.JMethodIDPtr,
      _$class$.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getText = _class.instanceMethodId(
    r'getText',
    r'(I)Ljava/lang/CharSequence;',
  );

  static final _getText =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final java.lang.CharSequence getText(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getText(
    int i,
  ) {
    return _getText(
      reference.pointer,
      _id_getText as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getTheme = _class.instanceMethodId(
    r'getTheme',
    r'()Landroid/content/res/Resources$Theme;',
  );

  static final _getTheme =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.res.Resources$Theme getTheme()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getTheme() {
    return _getTheme(
      reference.pointer,
      _id_getTheme as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getWallpaper = _class.instanceMethodId(
    r'getWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _getWallpaper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.graphics.drawable.Drawable getWallpaper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getWallpaper() {
    return _getWallpaper(
      reference.pointer,
      _id_getWallpaper as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getWallpaperDesiredMinimumHeight = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumHeight',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumHeight =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract int getWallpaperDesiredMinimumHeight()`
  int getWallpaperDesiredMinimumHeight() {
    return _getWallpaperDesiredMinimumHeight(
      reference.pointer,
      _id_getWallpaperDesiredMinimumHeight as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getWallpaperDesiredMinimumWidth = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumWidth',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumWidth =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract int getWallpaperDesiredMinimumWidth()`
  int getWallpaperDesiredMinimumWidth() {
    return _getWallpaperDesiredMinimumWidth(
      reference.pointer,
      _id_getWallpaperDesiredMinimumWidth as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_grantUriPermission = _class.instanceMethodId(
    r'grantUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _grantUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract void grantUriPermission(java.lang.String string, android.net.Uri uri, int i)`
  void grantUriPermission(
    jni$_.JString? string,
    jni$_.JObject? uri,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _grantUriPermission(
      reference.pointer,
      _id_grantUriPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$uri.pointer,
      i,
    ).check();
  }

  static final _id_isDeviceProtectedStorage = _class.instanceMethodId(
    r'isDeviceProtectedStorage',
    r'()Z',
  );

  static final _isDeviceProtectedStorage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract boolean isDeviceProtectedStorage()`
  bool isDeviceProtectedStorage() {
    return _isDeviceProtectedStorage(reference.pointer, _id_isDeviceProtectedStorage as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isRestricted = _class.instanceMethodId(
    r'isRestricted',
    r'()Z',
  );

  static final _isRestricted =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isRestricted()`
  bool isRestricted() {
    return _isRestricted(reference.pointer, _id_isRestricted as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isUiContext = _class.instanceMethodId(
    r'isUiContext',
    r'()Z',
  );

  static final _isUiContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isUiContext()`
  bool isUiContext() {
    return _isUiContext(reference.pointer, _id_isUiContext as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_moveDatabaseFrom = _class.instanceMethodId(
    r'moveDatabaseFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveDatabaseFrom =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean moveDatabaseFrom(android.content.Context context, java.lang.String string)`
  bool moveDatabaseFrom(
    Context? context,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _moveDatabaseFrom(
      reference.pointer,
      _id_moveDatabaseFrom as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$string.pointer,
    ).boolean;
  }

  static final _id_moveSharedPreferencesFrom = _class.instanceMethodId(
    r'moveSharedPreferencesFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveSharedPreferencesFrom =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean moveSharedPreferencesFrom(android.content.Context context, java.lang.String string)`
  bool moveSharedPreferencesFrom(
    Context? context,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _moveSharedPreferencesFrom(
      reference.pointer,
      _id_moveSharedPreferencesFrom as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$string.pointer,
    ).boolean;
  }

  static final _id_obtainStyledAttributes = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes(
    jni$_.JObject? attributeSet,
    jni$_.JIntArray? is$,
  ) {
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes(
      reference.pointer,
      _id_obtainStyledAttributes as jni$_.JMethodIDPtr,
      _$attributeSet.pointer,
      _$is$.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$1 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$1(
    jni$_.JObject? attributeSet,
    jni$_.JIntArray? is$,
    int i,
    int i1,
  ) {
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$1(
      reference.pointer,
      _id_obtainStyledAttributes$1 as jni$_.JMethodIDPtr,
      _$attributeSet.pointer,
      _$is$.pointer,
      i,
      i1,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$2 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(I[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(int i, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$2(
    int i,
    jni$_.JIntArray? is$,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$2(
      reference.pointer,
      _id_obtainStyledAttributes$2 as jni$_.JMethodIDPtr,
      i,
      _$is$.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$3 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'([I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$3(
    jni$_.JIntArray? is$,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$3(
      reference.pointer,
      _id_obtainStyledAttributes$3 as jni$_.JMethodIDPtr,
      _$is$.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openFileInput = _class.instanceMethodId(
    r'openFileInput',
    r'(Ljava/lang/String;)Ljava/io/FileInputStream;',
  );

  static final _openFileInput =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract java.io.FileInputStream openFileInput(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openFileInput(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _openFileInput(
      reference.pointer,
      _id_openFileInput as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openFileOutput = _class.instanceMethodId(
    r'openFileOutput',
    r'(Ljava/lang/String;I)Ljava/io/FileOutputStream;',
  );

  static final _openFileOutput =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public abstract java.io.FileOutputStream openFileOutput(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openFileOutput(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _openFileOutput(
      reference.pointer,
      _id_openFileOutput as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openOrCreateDatabase = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openOrCreateDatabase(
    jni$_.JString? string,
    int i,
    jni$_.JObject? cursorFactory,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cursorFactory = cursorFactory?.reference ?? jni$_.jNullReference;
    return _openOrCreateDatabase(
      reference.pointer,
      _id_openOrCreateDatabase as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
      _$cursorFactory.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openOrCreateDatabase$1 = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory, android.database.DatabaseErrorHandler databaseErrorHandler)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openOrCreateDatabase$1(
    jni$_.JString? string,
    int i,
    jni$_.JObject? cursorFactory,
    jni$_.JObject? databaseErrorHandler,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cursorFactory = cursorFactory?.reference ?? jni$_.jNullReference;
    final _$databaseErrorHandler = databaseErrorHandler?.reference ?? jni$_.jNullReference;
    return _openOrCreateDatabase$1(
      reference.pointer,
      _id_openOrCreateDatabase$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
      _$cursorFactory.pointer,
      _$databaseErrorHandler.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_peekWallpaper = _class.instanceMethodId(
    r'peekWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _peekWallpaper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.graphics.drawable.Drawable peekWallpaper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? peekWallpaper() {
    return _peekWallpaper(
      reference.pointer,
      _id_peekWallpaper as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r'registerComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _registerComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void registerComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks = componentCallbacks?.reference ?? jni$_.jNullReference;
    _registerComponentCallbacks(
      reference.pointer,
      _id_registerComponentCallbacks as jni$_.JMethodIDPtr,
      _$componentCallbacks.pointer,
    ).check();
  }

  static final _id_registerDeviceIdChangeListener = _class.instanceMethodId(
    r'registerDeviceIdChangeListener',
    r'(Ljava/util/concurrent/Executor;Ljava/util/function/IntConsumer;)V',
  );

  static final _registerDeviceIdChangeListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void registerDeviceIdChangeListener(java.util.concurrent.Executor executor, java.util.function.IntConsumer intConsumer)`
  void registerDeviceIdChangeListener(
    jni$_.JObject? executor,
    jni$_.JObject? intConsumer,
  ) {
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$intConsumer = intConsumer?.reference ?? jni$_.jNullReference;
    _registerDeviceIdChangeListener(
      reference.pointer,
      _id_registerDeviceIdChangeListener as jni$_.JMethodIDPtr,
      _$executor.pointer,
      _$intConsumer.pointer,
    ).check();
  }

  static final _id_registerReceiver = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;',
  );

  static final _registerReceiver =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? registerReceiver(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
  ) {
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    return _registerReceiver(
      reference.pointer,
      _id_registerReceiver as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
      _$intentFilter.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerReceiver$1 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;',
  );

  static final _registerReceiver$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? registerReceiver$1(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    int i,
  ) {
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    return _registerReceiver$1(
      reference.pointer,
      _id_registerReceiver$1 as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
      _$intentFilter.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerReceiver$2 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;',
  );

  static final _registerReceiver$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? registerReceiver$2(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    jni$_.JString? string,
    jni$_.JObject? handler,
  ) {
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    return _registerReceiver$2(
      reference.pointer,
      _id_registerReceiver$2 as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
      _$intentFilter.pointer,
      _$string.pointer,
      _$handler.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerReceiver$3 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;',
  );

  static final _registerReceiver$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? registerReceiver$3(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    jni$_.JString? string,
    jni$_.JObject? handler,
    int i,
  ) {
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    return _registerReceiver$3(
      reference.pointer,
      _id_registerReceiver$3 as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
      _$intentFilter.pointer,
      _$string.pointer,
      _$handler.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_removeStickyBroadcast = _class.instanceMethodId(
    r'removeStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _removeStickyBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void removeStickyBroadcast(android.content.Intent intent)`
  void removeStickyBroadcast(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _removeStickyBroadcast(
      reference.pointer,
      _id_removeStickyBroadcast as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).check();
  }

  static final _id_removeStickyBroadcastAsUser = _class.instanceMethodId(
    r'removeStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _removeStickyBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void removeStickyBroadcastAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _removeStickyBroadcastAsUser(
      reference.pointer,
      _id_removeStickyBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
    ).check();
  }

  static final _id_revokeSelfPermissionOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionOnKill',
    r'(Ljava/lang/String;)V',
  );

  static final _revokeSelfPermissionOnKill =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void revokeSelfPermissionOnKill(java.lang.String string)`
  void revokeSelfPermissionOnKill(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _revokeSelfPermissionOnKill(
      reference.pointer,
      _id_revokeSelfPermissionOnKill as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).check();
  }

  static final _id_revokeSelfPermissionsOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionsOnKill',
    r'(Ljava/util/Collection;)V',
  );

  static final _revokeSelfPermissionsOnKill =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void revokeSelfPermissionsOnKill(java.util.Collection<java.lang.String> collection)`
  void revokeSelfPermissionsOnKill(
    jni$_.JObject? collection,
  ) {
    final _$collection = collection?.reference ?? jni$_.jNullReference;
    _revokeSelfPermissionsOnKill(
      reference.pointer,
      _id_revokeSelfPermissionsOnKill as jni$_.JMethodIDPtr,
      _$collection.pointer,
    ).check();
  }

  static final _id_revokeUriPermission = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public abstract void revokeUriPermission(android.net.Uri uri, int i)`
  void revokeUriPermission(
    jni$_.JObject? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _revokeUriPermission(reference.pointer, _id_revokeUriPermission as jni$_.JMethodIDPtr, _$uri.pointer, i).check();
  }

  static final _id_revokeUriPermission$1 = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract void revokeUriPermission(java.lang.String string, android.net.Uri uri, int i)`
  void revokeUriPermission$1(
    jni$_.JString? string,
    jni$_.JObject? uri,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _revokeUriPermission$1(
      reference.pointer,
      _id_revokeUriPermission$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$uri.pointer,
      i,
    ).check();
  }

  static final _id_sendBroadcast = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void sendBroadcast(android.content.Intent intent)`
  void sendBroadcast(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _sendBroadcast(reference.pointer, _id_sendBroadcast as jni$_.JMethodIDPtr, _$intent.pointer).check();
  }

  static final _id_sendBroadcast$1 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendBroadcast$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendBroadcast(android.content.Intent intent, java.lang.String string)`
  void sendBroadcast$1(
    jni$_.JObject? intent,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendBroadcast$1(
      reference.pointer,
      _id_sendBroadcast$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
    ).check();
  }

  static final _id_sendBroadcast$2 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendBroadcast$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)`
  void sendBroadcast$2(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendBroadcast$2(
      reference.pointer,
      _id_sendBroadcast$2 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendBroadcastAsUser = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void sendBroadcastAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _sendBroadcastAsUser(
      reference.pointer,
      _id_sendBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
    ).check();
  }

  static final _id_sendBroadcastAsUser$1 = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V',
  );

  static final _sendBroadcastAsUser$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string)`
  void sendBroadcastAsUser$1(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendBroadcastAsUser$1(
      reference.pointer,
      _id_sendBroadcastAsUser$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
      _$string.pointer,
    ).check();
  }

  static final _id_sendBroadcastWithMultiplePermissions = _class.instanceMethodId(
    r'sendBroadcastWithMultiplePermissions',
    r'(Landroid/content/Intent;[Ljava/lang/String;)V',
  );

  static final _sendBroadcastWithMultiplePermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendBroadcastWithMultiplePermissions(android.content.Intent intent, java.lang.String[] strings)`
  void sendBroadcastWithMultiplePermissions(
    jni$_.JObject? intent,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _sendBroadcastWithMultiplePermissions(
      reference.pointer,
      _id_sendBroadcastWithMultiplePermissions as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$strings.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendOrderedBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string)`
  void sendOrderedBroadcast(
    jni$_.JObject? intent,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast(
      reference.pointer,
      _id_sendOrderedBroadcast as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast$1 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)`
  void sendOrderedBroadcast$1(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$1(
      reference.pointer,
      _id_sendOrderedBroadcast$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string1.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast$2 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)`
  void sendOrderedBroadcast$2(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$2(
      reference.pointer,
      _id_sendOrderedBroadcast$2 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast$3 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle1)`
  void sendOrderedBroadcast$3(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle1,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle1 = bundle1?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$3(
      reference.pointer,
      _id_sendOrderedBroadcast$3 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$bundle.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string1.pointer,
      _$bundle1.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast$4 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$4 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, java.lang.String string1, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string2, android.os.Bundle bundle)`
  void sendOrderedBroadcast$4(
    jni$_.JObject? intent,
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string2,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$4(
      reference.pointer,
      _id_sendOrderedBroadcast$4 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$string1.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string2.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)`
  void sendOrderedBroadcastAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
    jni$_.JString? string,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcastAsUser(
      reference.pointer,
      _id_sendOrderedBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
      _$string.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string1.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendStickyBroadcast = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendStickyBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void sendStickyBroadcast(android.content.Intent intent)`
  void sendStickyBroadcast(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcast(reference.pointer, _id_sendStickyBroadcast as jni$_.JMethodIDPtr, _$intent.pointer).check();
  }

  static final _id_sendStickyBroadcast$1 = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _sendStickyBroadcast$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendStickyBroadcast(android.content.Intent intent, android.os.Bundle bundle)`
  void sendStickyBroadcast$1(
    jni$_.JObject? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcast$1(
      reference.pointer,
      _id_sendStickyBroadcast$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendStickyBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendStickyBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void sendStickyBroadcastAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcastAsUser(
      reference.pointer,
      _id_sendStickyBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
    ).check();
  }

  static final _id_sendStickyOrderedBroadcast = _class.instanceMethodId(
    r'sendStickyOrderedBroadcast',
    r'(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)`
  void sendStickyOrderedBroadcast(
    jni$_.JObject? intent,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyOrderedBroadcast(
      reference.pointer,
      _id_sendStickyOrderedBroadcast as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendStickyOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)`
  void sendStickyOrderedBroadcastAsUser(
    jni$_.JObject? intent,
    jni$_.JObject? userHandle,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyOrderedBroadcastAsUser(
      reference.pointer,
      _id_sendStickyOrderedBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_setTheme = _class.instanceMethodId(
    r'setTheme',
    r'(I)V',
  );

  static final _setTheme =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract void setTheme(int i)`
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setWallpaper = _class.instanceMethodId(
    r'setWallpaper',
    r'(Landroid/graphics/Bitmap;)V',
  );

  static final _setWallpaper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void setWallpaper(android.graphics.Bitmap bitmap)`
  void setWallpaper(
    jni$_.JObject? bitmap,
  ) {
    final _$bitmap = bitmap?.reference ?? jni$_.jNullReference;
    _setWallpaper(reference.pointer, _id_setWallpaper as jni$_.JMethodIDPtr, _$bitmap.pointer).check();
  }

  static final _id_setWallpaper$1 = _class.instanceMethodId(
    r'setWallpaper',
    r'(Ljava/io/InputStream;)V',
  );

  static final _setWallpaper$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void setWallpaper(java.io.InputStream inputStream)`
  void setWallpaper$1(
    jni$_.JObject? inputStream,
  ) {
    final _$inputStream = inputStream?.reference ?? jni$_.jNullReference;
    _setWallpaper$1(reference.pointer, _id_setWallpaper$1 as jni$_.JMethodIDPtr, _$inputStream.pointer).check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;)V',
  );

  static final _startActivities =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void startActivities(android.content.Intent[] intents)`
  void startActivities(
    jni$_.JArray<jni$_.JObject?>? intents,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    _startActivities(reference.pointer, _id_startActivities as jni$_.JMethodIDPtr, _$intents.pointer).check();
  }

  static final _id_startActivities$1 = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivities$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)`
  void startActivities$1(
    jni$_.JArray<jni$_.JObject?>? intents,
    jni$_.JObject? bundle,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivities$1(
      reference.pointer,
      _id_startActivities$1 as jni$_.JMethodIDPtr,
      _$intents.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;)V',
  );

  static final _startActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void startActivity(android.content.Intent intent)`
  void startActivity(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivity(reference.pointer, _id_startActivity as jni$_.JMethodIDPtr, _$intent.pointer).check();
  }

  static final _id_startActivity$1 = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivity$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void startActivity(android.content.Intent intent, android.os.Bundle bundle)`
  void startActivity$1(
    jni$_.JObject? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivity$1(
      reference.pointer,
      _id_startActivity$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startForegroundService = _class.instanceMethodId(
    r'startForegroundService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startForegroundService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract android.content.ComponentName startForegroundService(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startForegroundService(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startForegroundService(
      reference.pointer,
      _id_startForegroundService as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startInstrumentation = _class.instanceMethodId(
    r'startInstrumentation',
    r'(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z',
  );

  static final _startInstrumentation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String string, android.os.Bundle bundle)`
  bool startInstrumentation(
    jni$_.JObject? componentName,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _startInstrumentation(
      reference.pointer,
      _id_startInstrumentation as jni$_.JMethodIDPtr,
      _$componentName.pointer,
      _$string.pointer,
      _$bundle.pointer,
    ).boolean;
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;III)V',
  );

  static final _startIntentSender =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)`
  void startIntentSender(
    jni$_.JObject? intentSender,
    jni$_.JObject? intent,
    int i,
    int i1,
    int i2,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSender(
      reference.pointer,
      _id_startIntentSender as jni$_.JMethodIDPtr,
      _$intentSender.pointer,
      _$intent.pointer,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_startIntentSender$1 = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSender$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)`
  void startIntentSender$1(
    jni$_.JObject? intentSender,
    jni$_.JObject? intent,
    int i,
    int i1,
    int i2,
    jni$_.JObject? bundle,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSender$1(
      reference.pointer,
      _id_startIntentSender$1 as jni$_.JMethodIDPtr,
      _$intentSender.pointer,
      _$intent.pointer,
      i,
      i1,
      i2,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startService = _class.instanceMethodId(
    r'startService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract android.content.ComponentName startService(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startService(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startService(
      reference.pointer,
      _id_startService as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_stopService = _class.instanceMethodId(
    r'stopService',
    r'(Landroid/content/Intent;)Z',
  );

  static final _stopService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract boolean stopService(android.content.Intent intent)`
  bool stopService(
    jni$_.JObject? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _stopService(reference.pointer, _id_stopService as jni$_.JMethodIDPtr, _$intent.pointer).boolean;
  }

  static final _id_unbindService = _class.instanceMethodId(
    r'unbindService',
    r'(Landroid/content/ServiceConnection;)V',
  );

  static final _unbindService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void unbindService(android.content.ServiceConnection serviceConnection)`
  void unbindService(
    jni$_.JObject? serviceConnection,
  ) {
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    _unbindService(reference.pointer, _id_unbindService as jni$_.JMethodIDPtr, _$serviceConnection.pointer).check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r'unregisterComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _unregisterComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void unregisterComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks = componentCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterComponentCallbacks(
      reference.pointer,
      _id_unregisterComponentCallbacks as jni$_.JMethodIDPtr,
      _$componentCallbacks.pointer,
    ).check();
  }

  static final _id_unregisterDeviceIdChangeListener = _class.instanceMethodId(
    r'unregisterDeviceIdChangeListener',
    r'(Ljava/util/function/IntConsumer;)V',
  );

  static final _unregisterDeviceIdChangeListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void unregisterDeviceIdChangeListener(java.util.function.IntConsumer intConsumer)`
  void unregisterDeviceIdChangeListener(
    jni$_.JObject? intConsumer,
  ) {
    final _$intConsumer = intConsumer?.reference ?? jni$_.jNullReference;
    _unregisterDeviceIdChangeListener(
      reference.pointer,
      _id_unregisterDeviceIdChangeListener as jni$_.JMethodIDPtr,
      _$intConsumer.pointer,
    ).check();
  }

  static final _id_unregisterReceiver = _class.instanceMethodId(
    r'unregisterReceiver',
    r'(Landroid/content/BroadcastReceiver;)V',
  );

  static final _unregisterReceiver =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void unregisterReceiver(android.content.BroadcastReceiver broadcastReceiver)`
  void unregisterReceiver(
    jni$_.JObject? broadcastReceiver,
  ) {
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    _unregisterReceiver(
      reference.pointer,
      _id_unregisterReceiver as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
    ).check();
  }

  static final _id_updateServiceGroup = _class.instanceMethodId(
    r'updateServiceGroup',
    r'(Landroid/content/ServiceConnection;II)V',
  );

  static final _updateServiceGroup =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public void updateServiceGroup(android.content.ServiceConnection serviceConnection, int i, int i1)`
  void updateServiceGroup(
    jni$_.JObject? serviceConnection,
    int i,
    int i1,
  ) {
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    _updateServiceGroup(
      reference.pointer,
      _id_updateServiceGroup as jni$_.JMethodIDPtr,
      _$serviceConnection.pointer,
      i,
      i1,
    ).check();
  }
}

final class $Context$NullableType extends jni$_.JObjType<Context?> {
  @jni$_.internal
  const $Context$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context;';

  @jni$_.internal
  @core$_.override
  Context? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Context.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$NullableType) && other is $Context$NullableType;
  }
}

final class $Context$Type extends jni$_.JObjType<Context> {
  @jni$_.internal
  const $Context$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context;';

  @jni$_.internal
  @core$_.override
  Context fromReference(jni$_.JReference reference) => Context.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context?> get nullableType => const $Context$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$Type) && other is $Context$Type;
  }
}

/// from: `androidx.media3.common.C$AudioAllowedCapturePolicy`
class C$AudioAllowedCapturePolicy extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$AudioAllowedCapturePolicy> $type;

  @jni$_.internal
  C$AudioAllowedCapturePolicy.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$AudioAllowedCapturePolicy');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$AudioAllowedCapturePolicy$NullableType();
  static const type = $C$AudioAllowedCapturePolicy$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$AudioAllowedCapturePolicy> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$AudioAllowedCapturePolicy $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$AudioAllowedCapturePolicy',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$AudioAllowedCapturePolicy.implement(
    $C$AudioAllowedCapturePolicy $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$AudioAllowedCapturePolicy.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$AudioAllowedCapturePolicy {
  factory $C$AudioAllowedCapturePolicy() = _$C$AudioAllowedCapturePolicy;
}

final class _$C$AudioAllowedCapturePolicy with $C$AudioAllowedCapturePolicy {
  _$C$AudioAllowedCapturePolicy();
}

final class $C$AudioAllowedCapturePolicy$NullableType extends jni$_.JObjType<C$AudioAllowedCapturePolicy?> {
  @jni$_.internal
  const $C$AudioAllowedCapturePolicy$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$AudioAllowedCapturePolicy;';

  @jni$_.internal
  @core$_.override
  C$AudioAllowedCapturePolicy? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$AudioAllowedCapturePolicy.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$AudioAllowedCapturePolicy?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$AudioAllowedCapturePolicy$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$AudioAllowedCapturePolicy$NullableType) &&
        other is $C$AudioAllowedCapturePolicy$NullableType;
  }
}

final class $C$AudioAllowedCapturePolicy$Type extends jni$_.JObjType<C$AudioAllowedCapturePolicy> {
  @jni$_.internal
  const $C$AudioAllowedCapturePolicy$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$AudioAllowedCapturePolicy;';

  @jni$_.internal
  @core$_.override
  C$AudioAllowedCapturePolicy fromReference(jni$_.JReference reference) => C$AudioAllowedCapturePolicy.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$AudioAllowedCapturePolicy?> get nullableType => const $C$AudioAllowedCapturePolicy$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$AudioAllowedCapturePolicy$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$AudioAllowedCapturePolicy$Type) && other is $C$AudioAllowedCapturePolicy$Type;
  }
}

/// from: `androidx.media3.common.C$AudioContentType`
class C$AudioContentType extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$AudioContentType> $type;

  @jni$_.internal
  C$AudioContentType.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$AudioContentType');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$AudioContentType$NullableType();
  static const type = $C$AudioContentType$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$AudioContentType> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$AudioContentType $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$AudioContentType',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$AudioContentType.implement(
    $C$AudioContentType $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$AudioContentType.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$AudioContentType {
  factory $C$AudioContentType() = _$C$AudioContentType;
}

final class _$C$AudioContentType with $C$AudioContentType {
  _$C$AudioContentType();
}

final class $C$AudioContentType$NullableType extends jni$_.JObjType<C$AudioContentType?> {
  @jni$_.internal
  const $C$AudioContentType$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$AudioContentType;';

  @jni$_.internal
  @core$_.override
  C$AudioContentType? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$AudioContentType.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$AudioContentType?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$AudioContentType$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$AudioContentType$NullableType) && other is $C$AudioContentType$NullableType;
  }
}

final class $C$AudioContentType$Type extends jni$_.JObjType<C$AudioContentType> {
  @jni$_.internal
  const $C$AudioContentType$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$AudioContentType;';

  @jni$_.internal
  @core$_.override
  C$AudioContentType fromReference(jni$_.JReference reference) => C$AudioContentType.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$AudioContentType?> get nullableType => const $C$AudioContentType$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$AudioContentType$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$AudioContentType$Type) && other is $C$AudioContentType$Type;
  }
}

/// from: `androidx.media3.common.C$AudioFlags`
class C$AudioFlags extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$AudioFlags> $type;

  @jni$_.internal
  C$AudioFlags.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$AudioFlags');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$AudioFlags$NullableType();
  static const type = $C$AudioFlags$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$AudioFlags> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$AudioFlags $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$AudioFlags',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$AudioFlags.implement(
    $C$AudioFlags $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$AudioFlags.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$AudioFlags {
  factory $C$AudioFlags() = _$C$AudioFlags;
}

final class _$C$AudioFlags with $C$AudioFlags {
  _$C$AudioFlags();
}

final class $C$AudioFlags$NullableType extends jni$_.JObjType<C$AudioFlags?> {
  @jni$_.internal
  const $C$AudioFlags$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$AudioFlags;';

  @jni$_.internal
  @core$_.override
  C$AudioFlags? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$AudioFlags.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$AudioFlags?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$AudioFlags$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$AudioFlags$NullableType) && other is $C$AudioFlags$NullableType;
  }
}

final class $C$AudioFlags$Type extends jni$_.JObjType<C$AudioFlags> {
  @jni$_.internal
  const $C$AudioFlags$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$AudioFlags;';

  @jni$_.internal
  @core$_.override
  C$AudioFlags fromReference(jni$_.JReference reference) => C$AudioFlags.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$AudioFlags?> get nullableType => const $C$AudioFlags$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$AudioFlags$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$AudioFlags$Type) && other is $C$AudioFlags$Type;
  }
}

/// from: `androidx.media3.common.C$AudioUsage`
class C$AudioUsage extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$AudioUsage> $type;

  @jni$_.internal
  C$AudioUsage.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$AudioUsage');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$AudioUsage$NullableType();
  static const type = $C$AudioUsage$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$AudioUsage> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$AudioUsage $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$AudioUsage',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$AudioUsage.implement(
    $C$AudioUsage $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$AudioUsage.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$AudioUsage {
  factory $C$AudioUsage() = _$C$AudioUsage;
}

final class _$C$AudioUsage with $C$AudioUsage {
  _$C$AudioUsage();
}

final class $C$AudioUsage$NullableType extends jni$_.JObjType<C$AudioUsage?> {
  @jni$_.internal
  const $C$AudioUsage$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$AudioUsage;';

  @jni$_.internal
  @core$_.override
  C$AudioUsage? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$AudioUsage.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$AudioUsage?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$AudioUsage$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$AudioUsage$NullableType) && other is $C$AudioUsage$NullableType;
  }
}

final class $C$AudioUsage$Type extends jni$_.JObjType<C$AudioUsage> {
  @jni$_.internal
  const $C$AudioUsage$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$AudioUsage;';

  @jni$_.internal
  @core$_.override
  C$AudioUsage fromReference(jni$_.JReference reference) => C$AudioUsage.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$AudioUsage?> get nullableType => const $C$AudioUsage$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$AudioUsage$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$AudioUsage$Type) && other is $C$AudioUsage$Type;
  }
}

/// from: `androidx.media3.common.C$AuxiliaryTrackType`
class C$AuxiliaryTrackType extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$AuxiliaryTrackType> $type;

  @jni$_.internal
  C$AuxiliaryTrackType.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$AuxiliaryTrackType');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$AuxiliaryTrackType$NullableType();
  static const type = $C$AuxiliaryTrackType$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$AuxiliaryTrackType> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$AuxiliaryTrackType $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$AuxiliaryTrackType',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$AuxiliaryTrackType.implement(
    $C$AuxiliaryTrackType $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$AuxiliaryTrackType.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$AuxiliaryTrackType {
  factory $C$AuxiliaryTrackType() = _$C$AuxiliaryTrackType;
}

final class _$C$AuxiliaryTrackType with $C$AuxiliaryTrackType {
  _$C$AuxiliaryTrackType();
}

final class $C$AuxiliaryTrackType$NullableType extends jni$_.JObjType<C$AuxiliaryTrackType?> {
  @jni$_.internal
  const $C$AuxiliaryTrackType$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$AuxiliaryTrackType;';

  @jni$_.internal
  @core$_.override
  C$AuxiliaryTrackType? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$AuxiliaryTrackType.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$AuxiliaryTrackType?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$AuxiliaryTrackType$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$AuxiliaryTrackType$NullableType) && other is $C$AuxiliaryTrackType$NullableType;
  }
}

final class $C$AuxiliaryTrackType$Type extends jni$_.JObjType<C$AuxiliaryTrackType> {
  @jni$_.internal
  const $C$AuxiliaryTrackType$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$AuxiliaryTrackType;';

  @jni$_.internal
  @core$_.override
  C$AuxiliaryTrackType fromReference(jni$_.JReference reference) => C$AuxiliaryTrackType.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$AuxiliaryTrackType?> get nullableType => const $C$AuxiliaryTrackType$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$AuxiliaryTrackType$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$AuxiliaryTrackType$Type) && other is $C$AuxiliaryTrackType$Type;
  }
}

/// from: `androidx.media3.common.C$BufferFlags`
class C$BufferFlags extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$BufferFlags> $type;

  @jni$_.internal
  C$BufferFlags.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$BufferFlags');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$BufferFlags$NullableType();
  static const type = $C$BufferFlags$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$BufferFlags> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$BufferFlags $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$BufferFlags',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$BufferFlags.implement(
    $C$BufferFlags $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$BufferFlags.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$BufferFlags {
  factory $C$BufferFlags() = _$C$BufferFlags;
}

final class _$C$BufferFlags with $C$BufferFlags {
  _$C$BufferFlags();
}

final class $C$BufferFlags$NullableType extends jni$_.JObjType<C$BufferFlags?> {
  @jni$_.internal
  const $C$BufferFlags$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$BufferFlags;';

  @jni$_.internal
  @core$_.override
  C$BufferFlags? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$BufferFlags.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$BufferFlags?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$BufferFlags$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$BufferFlags$NullableType) && other is $C$BufferFlags$NullableType;
  }
}

final class $C$BufferFlags$Type extends jni$_.JObjType<C$BufferFlags> {
  @jni$_.internal
  const $C$BufferFlags$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$BufferFlags;';

  @jni$_.internal
  @core$_.override
  C$BufferFlags fromReference(jni$_.JReference reference) => C$BufferFlags.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$BufferFlags?> get nullableType => const $C$BufferFlags$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$BufferFlags$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$BufferFlags$Type) && other is $C$BufferFlags$Type;
  }
}

/// from: `androidx.media3.common.C$ColorRange`
class C$ColorRange extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$ColorRange> $type;

  @jni$_.internal
  C$ColorRange.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$ColorRange');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$ColorRange$NullableType();
  static const type = $C$ColorRange$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$ColorRange> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$ColorRange $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$ColorRange',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$ColorRange.implement(
    $C$ColorRange $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$ColorRange.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$ColorRange {
  factory $C$ColorRange() = _$C$ColorRange;
}

final class _$C$ColorRange with $C$ColorRange {
  _$C$ColorRange();
}

final class $C$ColorRange$NullableType extends jni$_.JObjType<C$ColorRange?> {
  @jni$_.internal
  const $C$ColorRange$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$ColorRange;';

  @jni$_.internal
  @core$_.override
  C$ColorRange? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$ColorRange.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$ColorRange?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$ColorRange$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$ColorRange$NullableType) && other is $C$ColorRange$NullableType;
  }
}

final class $C$ColorRange$Type extends jni$_.JObjType<C$ColorRange> {
  @jni$_.internal
  const $C$ColorRange$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$ColorRange;';

  @jni$_.internal
  @core$_.override
  C$ColorRange fromReference(jni$_.JReference reference) => C$ColorRange.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$ColorRange?> get nullableType => const $C$ColorRange$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$ColorRange$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$ColorRange$Type) && other is $C$ColorRange$Type;
  }
}

/// from: `androidx.media3.common.C$ColorSpace`
class C$ColorSpace extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$ColorSpace> $type;

  @jni$_.internal
  C$ColorSpace.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$ColorSpace');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$ColorSpace$NullableType();
  static const type = $C$ColorSpace$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$ColorSpace> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$ColorSpace $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$ColorSpace',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$ColorSpace.implement(
    $C$ColorSpace $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$ColorSpace.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$ColorSpace {
  factory $C$ColorSpace() = _$C$ColorSpace;
}

final class _$C$ColorSpace with $C$ColorSpace {
  _$C$ColorSpace();
}

final class $C$ColorSpace$NullableType extends jni$_.JObjType<C$ColorSpace?> {
  @jni$_.internal
  const $C$ColorSpace$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$ColorSpace;';

  @jni$_.internal
  @core$_.override
  C$ColorSpace? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$ColorSpace.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$ColorSpace?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$ColorSpace$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$ColorSpace$NullableType) && other is $C$ColorSpace$NullableType;
  }
}

final class $C$ColorSpace$Type extends jni$_.JObjType<C$ColorSpace> {
  @jni$_.internal
  const $C$ColorSpace$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$ColorSpace;';

  @jni$_.internal
  @core$_.override
  C$ColorSpace fromReference(jni$_.JReference reference) => C$ColorSpace.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$ColorSpace?> get nullableType => const $C$ColorSpace$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$ColorSpace$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$ColorSpace$Type) && other is $C$ColorSpace$Type;
  }
}

/// from: `androidx.media3.common.C$ColorTransfer`
class C$ColorTransfer extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$ColorTransfer> $type;

  @jni$_.internal
  C$ColorTransfer.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$ColorTransfer');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$ColorTransfer$NullableType();
  static const type = $C$ColorTransfer$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$ColorTransfer> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$ColorTransfer $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$ColorTransfer',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$ColorTransfer.implement(
    $C$ColorTransfer $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$ColorTransfer.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$ColorTransfer {
  factory $C$ColorTransfer() = _$C$ColorTransfer;
}

final class _$C$ColorTransfer with $C$ColorTransfer {
  _$C$ColorTransfer();
}

final class $C$ColorTransfer$NullableType extends jni$_.JObjType<C$ColorTransfer?> {
  @jni$_.internal
  const $C$ColorTransfer$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$ColorTransfer;';

  @jni$_.internal
  @core$_.override
  C$ColorTransfer? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$ColorTransfer.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$ColorTransfer?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$ColorTransfer$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$ColorTransfer$NullableType) && other is $C$ColorTransfer$NullableType;
  }
}

final class $C$ColorTransfer$Type extends jni$_.JObjType<C$ColorTransfer> {
  @jni$_.internal
  const $C$ColorTransfer$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$ColorTransfer;';

  @jni$_.internal
  @core$_.override
  C$ColorTransfer fromReference(jni$_.JReference reference) => C$ColorTransfer.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$ColorTransfer?> get nullableType => const $C$ColorTransfer$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$ColorTransfer$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$ColorTransfer$Type) && other is $C$ColorTransfer$Type;
  }
}

/// from: `androidx.media3.common.C$ContentType`
class C$ContentType extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$ContentType> $type;

  @jni$_.internal
  C$ContentType.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$ContentType');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$ContentType$NullableType();
  static const type = $C$ContentType$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$ContentType> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$ContentType $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$ContentType',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$ContentType.implement(
    $C$ContentType $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$ContentType.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$ContentType {
  factory $C$ContentType() = _$C$ContentType;
}

final class _$C$ContentType with $C$ContentType {
  _$C$ContentType();
}

final class $C$ContentType$NullableType extends jni$_.JObjType<C$ContentType?> {
  @jni$_.internal
  const $C$ContentType$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$ContentType;';

  @jni$_.internal
  @core$_.override
  C$ContentType? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$ContentType.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$ContentType?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$ContentType$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$ContentType$NullableType) && other is $C$ContentType$NullableType;
  }
}

final class $C$ContentType$Type extends jni$_.JObjType<C$ContentType> {
  @jni$_.internal
  const $C$ContentType$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$ContentType;';

  @jni$_.internal
  @core$_.override
  C$ContentType fromReference(jni$_.JReference reference) => C$ContentType.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$ContentType?> get nullableType => const $C$ContentType$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$ContentType$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$ContentType$Type) && other is $C$ContentType$Type;
  }
}

/// from: `androidx.media3.common.C$CryptoMode`
class C$CryptoMode extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$CryptoMode> $type;

  @jni$_.internal
  C$CryptoMode.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$CryptoMode');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$CryptoMode$NullableType();
  static const type = $C$CryptoMode$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$CryptoMode> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$CryptoMode $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$CryptoMode',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$CryptoMode.implement(
    $C$CryptoMode $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$CryptoMode.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$CryptoMode {
  factory $C$CryptoMode() = _$C$CryptoMode;
}

final class _$C$CryptoMode with $C$CryptoMode {
  _$C$CryptoMode();
}

final class $C$CryptoMode$NullableType extends jni$_.JObjType<C$CryptoMode?> {
  @jni$_.internal
  const $C$CryptoMode$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$CryptoMode;';

  @jni$_.internal
  @core$_.override
  C$CryptoMode? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$CryptoMode.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$CryptoMode?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$CryptoMode$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$CryptoMode$NullableType) && other is $C$CryptoMode$NullableType;
  }
}

final class $C$CryptoMode$Type extends jni$_.JObjType<C$CryptoMode> {
  @jni$_.internal
  const $C$CryptoMode$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$CryptoMode;';

  @jni$_.internal
  @core$_.override
  C$CryptoMode fromReference(jni$_.JReference reference) => C$CryptoMode.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$CryptoMode?> get nullableType => const $C$CryptoMode$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$CryptoMode$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$CryptoMode$Type) && other is $C$CryptoMode$Type;
  }
}

/// from: `androidx.media3.common.C$CryptoType`
class C$CryptoType extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$CryptoType> $type;

  @jni$_.internal
  C$CryptoType.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$CryptoType');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$CryptoType$NullableType();
  static const type = $C$CryptoType$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$CryptoType> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$CryptoType $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$CryptoType',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$CryptoType.implement(
    $C$CryptoType $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$CryptoType.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$CryptoType {
  factory $C$CryptoType() = _$C$CryptoType;
}

final class _$C$CryptoType with $C$CryptoType {
  _$C$CryptoType();
}

final class $C$CryptoType$NullableType extends jni$_.JObjType<C$CryptoType?> {
  @jni$_.internal
  const $C$CryptoType$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$CryptoType;';

  @jni$_.internal
  @core$_.override
  C$CryptoType? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$CryptoType.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$CryptoType?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$CryptoType$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$CryptoType$NullableType) && other is $C$CryptoType$NullableType;
  }
}

final class $C$CryptoType$Type extends jni$_.JObjType<C$CryptoType> {
  @jni$_.internal
  const $C$CryptoType$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$CryptoType;';

  @jni$_.internal
  @core$_.override
  C$CryptoType fromReference(jni$_.JReference reference) => C$CryptoType.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$CryptoType?> get nullableType => const $C$CryptoType$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$CryptoType$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$CryptoType$Type) && other is $C$CryptoType$Type;
  }
}

/// from: `androidx.media3.common.C$DataType`
class C$DataType extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$DataType> $type;

  @jni$_.internal
  C$DataType.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$DataType');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$DataType$NullableType();
  static const type = $C$DataType$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$DataType> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$DataType $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$DataType',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$DataType.implement(
    $C$DataType $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$DataType.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$DataType {
  factory $C$DataType() = _$C$DataType;
}

final class _$C$DataType with $C$DataType {
  _$C$DataType();
}

final class $C$DataType$NullableType extends jni$_.JObjType<C$DataType?> {
  @jni$_.internal
  const $C$DataType$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$DataType;';

  @jni$_.internal
  @core$_.override
  C$DataType? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$DataType.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$DataType?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$DataType$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$DataType$NullableType) && other is $C$DataType$NullableType;
  }
}

final class $C$DataType$Type extends jni$_.JObjType<C$DataType> {
  @jni$_.internal
  const $C$DataType$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$DataType;';

  @jni$_.internal
  @core$_.override
  C$DataType fromReference(jni$_.JReference reference) => C$DataType.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$DataType?> get nullableType => const $C$DataType$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$DataType$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$DataType$Type) && other is $C$DataType$Type;
  }
}

/// from: `androidx.media3.common.C$Encoding`
class C$Encoding extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$Encoding> $type;

  @jni$_.internal
  C$Encoding.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$Encoding');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$Encoding$NullableType();
  static const type = $C$Encoding$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$Encoding> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$Encoding $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$Encoding',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$Encoding.implement(
    $C$Encoding $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$Encoding.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$Encoding {
  factory $C$Encoding() = _$C$Encoding;
}

final class _$C$Encoding with $C$Encoding {
  _$C$Encoding();
}

final class $C$Encoding$NullableType extends jni$_.JObjType<C$Encoding?> {
  @jni$_.internal
  const $C$Encoding$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$Encoding;';

  @jni$_.internal
  @core$_.override
  C$Encoding? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$Encoding.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$Encoding?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$Encoding$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$Encoding$NullableType) && other is $C$Encoding$NullableType;
  }
}

final class $C$Encoding$Type extends jni$_.JObjType<C$Encoding> {
  @jni$_.internal
  const $C$Encoding$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$Encoding;';

  @jni$_.internal
  @core$_.override
  C$Encoding fromReference(jni$_.JReference reference) => C$Encoding.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$Encoding?> get nullableType => const $C$Encoding$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$Encoding$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$Encoding$Type) && other is $C$Encoding$Type;
  }
}

/// from: `androidx.media3.common.C$FirstFrameState`
class C$FirstFrameState extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$FirstFrameState> $type;

  @jni$_.internal
  C$FirstFrameState.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$FirstFrameState');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$FirstFrameState$NullableType();
  static const type = $C$FirstFrameState$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$FirstFrameState> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$FirstFrameState $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$FirstFrameState',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$FirstFrameState.implement(
    $C$FirstFrameState $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$FirstFrameState.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$FirstFrameState {
  factory $C$FirstFrameState() = _$C$FirstFrameState;
}

final class _$C$FirstFrameState with $C$FirstFrameState {
  _$C$FirstFrameState();
}

final class $C$FirstFrameState$NullableType extends jni$_.JObjType<C$FirstFrameState?> {
  @jni$_.internal
  const $C$FirstFrameState$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$FirstFrameState;';

  @jni$_.internal
  @core$_.override
  C$FirstFrameState? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$FirstFrameState.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$FirstFrameState?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$FirstFrameState$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$FirstFrameState$NullableType) && other is $C$FirstFrameState$NullableType;
  }
}

final class $C$FirstFrameState$Type extends jni$_.JObjType<C$FirstFrameState> {
  @jni$_.internal
  const $C$FirstFrameState$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$FirstFrameState;';

  @jni$_.internal
  @core$_.override
  C$FirstFrameState fromReference(jni$_.JReference reference) => C$FirstFrameState.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$FirstFrameState?> get nullableType => const $C$FirstFrameState$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$FirstFrameState$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$FirstFrameState$Type) && other is $C$FirstFrameState$Type;
  }
}

/// from: `androidx.media3.common.C$FormatSupport`
class C$FormatSupport extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$FormatSupport> $type;

  @jni$_.internal
  C$FormatSupport.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$FormatSupport');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$FormatSupport$NullableType();
  static const type = $C$FormatSupport$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$FormatSupport> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$FormatSupport $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$FormatSupport',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$FormatSupport.implement(
    $C$FormatSupport $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$FormatSupport.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$FormatSupport {
  factory $C$FormatSupport() = _$C$FormatSupport;
}

final class _$C$FormatSupport with $C$FormatSupport {
  _$C$FormatSupport();
}

final class $C$FormatSupport$NullableType extends jni$_.JObjType<C$FormatSupport?> {
  @jni$_.internal
  const $C$FormatSupport$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$FormatSupport;';

  @jni$_.internal
  @core$_.override
  C$FormatSupport? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$FormatSupport.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$FormatSupport?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$FormatSupport$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$FormatSupport$NullableType) && other is $C$FormatSupport$NullableType;
  }
}

final class $C$FormatSupport$Type extends jni$_.JObjType<C$FormatSupport> {
  @jni$_.internal
  const $C$FormatSupport$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$FormatSupport;';

  @jni$_.internal
  @core$_.override
  C$FormatSupport fromReference(jni$_.JReference reference) => C$FormatSupport.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$FormatSupport?> get nullableType => const $C$FormatSupport$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$FormatSupport$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$FormatSupport$Type) && other is $C$FormatSupport$Type;
  }
}

/// from: `androidx.media3.common.C$NetworkType`
class C$NetworkType extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$NetworkType> $type;

  @jni$_.internal
  C$NetworkType.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$NetworkType');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$NetworkType$NullableType();
  static const type = $C$NetworkType$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$NetworkType> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$NetworkType $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$NetworkType',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$NetworkType.implement(
    $C$NetworkType $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$NetworkType.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$NetworkType {
  factory $C$NetworkType() = _$C$NetworkType;
}

final class _$C$NetworkType with $C$NetworkType {
  _$C$NetworkType();
}

final class $C$NetworkType$NullableType extends jni$_.JObjType<C$NetworkType?> {
  @jni$_.internal
  const $C$NetworkType$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$NetworkType;';

  @jni$_.internal
  @core$_.override
  C$NetworkType? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$NetworkType.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$NetworkType?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$NetworkType$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$NetworkType$NullableType) && other is $C$NetworkType$NullableType;
  }
}

final class $C$NetworkType$Type extends jni$_.JObjType<C$NetworkType> {
  @jni$_.internal
  const $C$NetworkType$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$NetworkType;';

  @jni$_.internal
  @core$_.override
  C$NetworkType fromReference(jni$_.JReference reference) => C$NetworkType.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$NetworkType?> get nullableType => const $C$NetworkType$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$NetworkType$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$NetworkType$Type) && other is $C$NetworkType$Type;
  }
}

/// from: `androidx.media3.common.C$PcmEncoding`
class C$PcmEncoding extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$PcmEncoding> $type;

  @jni$_.internal
  C$PcmEncoding.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$PcmEncoding');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$PcmEncoding$NullableType();
  static const type = $C$PcmEncoding$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$PcmEncoding> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$PcmEncoding $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$PcmEncoding',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$PcmEncoding.implement(
    $C$PcmEncoding $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$PcmEncoding.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$PcmEncoding {
  factory $C$PcmEncoding() = _$C$PcmEncoding;
}

final class _$C$PcmEncoding with $C$PcmEncoding {
  _$C$PcmEncoding();
}

final class $C$PcmEncoding$NullableType extends jni$_.JObjType<C$PcmEncoding?> {
  @jni$_.internal
  const $C$PcmEncoding$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$PcmEncoding;';

  @jni$_.internal
  @core$_.override
  C$PcmEncoding? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$PcmEncoding.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$PcmEncoding?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$PcmEncoding$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$PcmEncoding$NullableType) && other is $C$PcmEncoding$NullableType;
  }
}

final class $C$PcmEncoding$Type extends jni$_.JObjType<C$PcmEncoding> {
  @jni$_.internal
  const $C$PcmEncoding$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$PcmEncoding;';

  @jni$_.internal
  @core$_.override
  C$PcmEncoding fromReference(jni$_.JReference reference) => C$PcmEncoding.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$PcmEncoding?> get nullableType => const $C$PcmEncoding$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$PcmEncoding$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$PcmEncoding$Type) && other is $C$PcmEncoding$Type;
  }
}

/// from: `androidx.media3.common.C$Priority`
class C$Priority extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$Priority> $type;

  @jni$_.internal
  C$Priority.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$Priority');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$Priority$NullableType();
  static const type = $C$Priority$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$Priority> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$Priority $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$Priority',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$Priority.implement(
    $C$Priority $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$Priority.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$Priority {
  factory $C$Priority() = _$C$Priority;
}

final class _$C$Priority with $C$Priority {
  _$C$Priority();
}

final class $C$Priority$NullableType extends jni$_.JObjType<C$Priority?> {
  @jni$_.internal
  const $C$Priority$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$Priority;';

  @jni$_.internal
  @core$_.override
  C$Priority? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$Priority.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$Priority?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$Priority$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$Priority$NullableType) && other is $C$Priority$NullableType;
  }
}

final class $C$Priority$Type extends jni$_.JObjType<C$Priority> {
  @jni$_.internal
  const $C$Priority$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$Priority;';

  @jni$_.internal
  @core$_.override
  C$Priority fromReference(jni$_.JReference reference) => C$Priority.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$Priority?> get nullableType => const $C$Priority$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$Priority$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$Priority$Type) && other is $C$Priority$Type;
  }
}

/// from: `androidx.media3.common.C$Projection`
class C$Projection extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$Projection> $type;

  @jni$_.internal
  C$Projection.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$Projection');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$Projection$NullableType();
  static const type = $C$Projection$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$Projection> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$Projection $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$Projection',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$Projection.implement(
    $C$Projection $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$Projection.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$Projection {
  factory $C$Projection() = _$C$Projection;
}

final class _$C$Projection with $C$Projection {
  _$C$Projection();
}

final class $C$Projection$NullableType extends jni$_.JObjType<C$Projection?> {
  @jni$_.internal
  const $C$Projection$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$Projection;';

  @jni$_.internal
  @core$_.override
  C$Projection? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$Projection.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$Projection?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$Projection$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$Projection$NullableType) && other is $C$Projection$NullableType;
  }
}

final class $C$Projection$Type extends jni$_.JObjType<C$Projection> {
  @jni$_.internal
  const $C$Projection$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$Projection;';

  @jni$_.internal
  @core$_.override
  C$Projection fromReference(jni$_.JReference reference) => C$Projection.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$Projection?> get nullableType => const $C$Projection$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$Projection$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$Projection$Type) && other is $C$Projection$Type;
  }
}

/// from: `androidx.media3.common.C$RoleFlags`
class C$RoleFlags extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$RoleFlags> $type;

  @jni$_.internal
  C$RoleFlags.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$RoleFlags');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$RoleFlags$NullableType();
  static const type = $C$RoleFlags$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$RoleFlags> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$RoleFlags $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$RoleFlags',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$RoleFlags.implement(
    $C$RoleFlags $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$RoleFlags.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$RoleFlags {
  factory $C$RoleFlags() = _$C$RoleFlags;
}

final class _$C$RoleFlags with $C$RoleFlags {
  _$C$RoleFlags();
}

final class $C$RoleFlags$NullableType extends jni$_.JObjType<C$RoleFlags?> {
  @jni$_.internal
  const $C$RoleFlags$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$RoleFlags;';

  @jni$_.internal
  @core$_.override
  C$RoleFlags? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$RoleFlags.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$RoleFlags?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$RoleFlags$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$RoleFlags$NullableType) && other is $C$RoleFlags$NullableType;
  }
}

final class $C$RoleFlags$Type extends jni$_.JObjType<C$RoleFlags> {
  @jni$_.internal
  const $C$RoleFlags$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$RoleFlags;';

  @jni$_.internal
  @core$_.override
  C$RoleFlags fromReference(jni$_.JReference reference) => C$RoleFlags.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$RoleFlags?> get nullableType => const $C$RoleFlags$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$RoleFlags$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$RoleFlags$Type) && other is $C$RoleFlags$Type;
  }
}

/// from: `androidx.media3.common.C$SelectionFlags`
class C$SelectionFlags extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$SelectionFlags> $type;

  @jni$_.internal
  C$SelectionFlags.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$SelectionFlags');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$SelectionFlags$NullableType();
  static const type = $C$SelectionFlags$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$SelectionFlags> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$SelectionFlags $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$SelectionFlags',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$SelectionFlags.implement(
    $C$SelectionFlags $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$SelectionFlags.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$SelectionFlags {
  factory $C$SelectionFlags() = _$C$SelectionFlags;
}

final class _$C$SelectionFlags with $C$SelectionFlags {
  _$C$SelectionFlags();
}

final class $C$SelectionFlags$NullableType extends jni$_.JObjType<C$SelectionFlags?> {
  @jni$_.internal
  const $C$SelectionFlags$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$SelectionFlags;';

  @jni$_.internal
  @core$_.override
  C$SelectionFlags? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$SelectionFlags.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$SelectionFlags?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$SelectionFlags$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$SelectionFlags$NullableType) && other is $C$SelectionFlags$NullableType;
  }
}

final class $C$SelectionFlags$Type extends jni$_.JObjType<C$SelectionFlags> {
  @jni$_.internal
  const $C$SelectionFlags$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$SelectionFlags;';

  @jni$_.internal
  @core$_.override
  C$SelectionFlags fromReference(jni$_.JReference reference) => C$SelectionFlags.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$SelectionFlags?> get nullableType => const $C$SelectionFlags$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$SelectionFlags$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$SelectionFlags$Type) && other is $C$SelectionFlags$Type;
  }
}

/// from: `androidx.media3.common.C$SelectionReason`
class C$SelectionReason extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$SelectionReason> $type;

  @jni$_.internal
  C$SelectionReason.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$SelectionReason');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$SelectionReason$NullableType();
  static const type = $C$SelectionReason$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$SelectionReason> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$SelectionReason $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$SelectionReason',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$SelectionReason.implement(
    $C$SelectionReason $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$SelectionReason.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$SelectionReason {
  factory $C$SelectionReason() = _$C$SelectionReason;
}

final class _$C$SelectionReason with $C$SelectionReason {
  _$C$SelectionReason();
}

final class $C$SelectionReason$NullableType extends jni$_.JObjType<C$SelectionReason?> {
  @jni$_.internal
  const $C$SelectionReason$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$SelectionReason;';

  @jni$_.internal
  @core$_.override
  C$SelectionReason? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$SelectionReason.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$SelectionReason?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$SelectionReason$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$SelectionReason$NullableType) && other is $C$SelectionReason$NullableType;
  }
}

final class $C$SelectionReason$Type extends jni$_.JObjType<C$SelectionReason> {
  @jni$_.internal
  const $C$SelectionReason$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$SelectionReason;';

  @jni$_.internal
  @core$_.override
  C$SelectionReason fromReference(jni$_.JReference reference) => C$SelectionReason.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$SelectionReason?> get nullableType => const $C$SelectionReason$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$SelectionReason$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$SelectionReason$Type) && other is $C$SelectionReason$Type;
  }
}

/// from: `androidx.media3.common.C$SpatializationBehavior`
class C$SpatializationBehavior extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$SpatializationBehavior> $type;

  @jni$_.internal
  C$SpatializationBehavior.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$SpatializationBehavior');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$SpatializationBehavior$NullableType();
  static const type = $C$SpatializationBehavior$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$SpatializationBehavior> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$SpatializationBehavior $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$SpatializationBehavior',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$SpatializationBehavior.implement(
    $C$SpatializationBehavior $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$SpatializationBehavior.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$SpatializationBehavior {
  factory $C$SpatializationBehavior() = _$C$SpatializationBehavior;
}

final class _$C$SpatializationBehavior with $C$SpatializationBehavior {
  _$C$SpatializationBehavior();
}

final class $C$SpatializationBehavior$NullableType extends jni$_.JObjType<C$SpatializationBehavior?> {
  @jni$_.internal
  const $C$SpatializationBehavior$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$SpatializationBehavior;';

  @jni$_.internal
  @core$_.override
  C$SpatializationBehavior? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$SpatializationBehavior.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$SpatializationBehavior?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$SpatializationBehavior$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$SpatializationBehavior$NullableType) &&
        other is $C$SpatializationBehavior$NullableType;
  }
}

final class $C$SpatializationBehavior$Type extends jni$_.JObjType<C$SpatializationBehavior> {
  @jni$_.internal
  const $C$SpatializationBehavior$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$SpatializationBehavior;';

  @jni$_.internal
  @core$_.override
  C$SpatializationBehavior fromReference(jni$_.JReference reference) => C$SpatializationBehavior.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$SpatializationBehavior?> get nullableType => const $C$SpatializationBehavior$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$SpatializationBehavior$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$SpatializationBehavior$Type) && other is $C$SpatializationBehavior$Type;
  }
}

/// from: `androidx.media3.common.C$StereoMode`
class C$StereoMode extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$StereoMode> $type;

  @jni$_.internal
  C$StereoMode.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$StereoMode');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$StereoMode$NullableType();
  static const type = $C$StereoMode$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$StereoMode> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$StereoMode $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$StereoMode',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$StereoMode.implement(
    $C$StereoMode $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$StereoMode.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$StereoMode {
  factory $C$StereoMode() = _$C$StereoMode;
}

final class _$C$StereoMode with $C$StereoMode {
  _$C$StereoMode();
}

final class $C$StereoMode$NullableType extends jni$_.JObjType<C$StereoMode?> {
  @jni$_.internal
  const $C$StereoMode$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$StereoMode;';

  @jni$_.internal
  @core$_.override
  C$StereoMode? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$StereoMode.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$StereoMode?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$StereoMode$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$StereoMode$NullableType) && other is $C$StereoMode$NullableType;
  }
}

final class $C$StereoMode$Type extends jni$_.JObjType<C$StereoMode> {
  @jni$_.internal
  const $C$StereoMode$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$StereoMode;';

  @jni$_.internal
  @core$_.override
  C$StereoMode fromReference(jni$_.JReference reference) => C$StereoMode.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$StereoMode?> get nullableType => const $C$StereoMode$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$StereoMode$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$StereoMode$Type) && other is $C$StereoMode$Type;
  }
}

/// from: `androidx.media3.common.C$StreamType`
class C$StreamType extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$StreamType> $type;

  @jni$_.internal
  C$StreamType.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$StreamType');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$StreamType$NullableType();
  static const type = $C$StreamType$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$StreamType> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$StreamType $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$StreamType',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$StreamType.implement(
    $C$StreamType $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$StreamType.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$StreamType {
  factory $C$StreamType() = _$C$StreamType;
}

final class _$C$StreamType with $C$StreamType {
  _$C$StreamType();
}

final class $C$StreamType$NullableType extends jni$_.JObjType<C$StreamType?> {
  @jni$_.internal
  const $C$StreamType$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$StreamType;';

  @jni$_.internal
  @core$_.override
  C$StreamType? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$StreamType.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$StreamType?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$StreamType$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$StreamType$NullableType) && other is $C$StreamType$NullableType;
  }
}

final class $C$StreamType$Type extends jni$_.JObjType<C$StreamType> {
  @jni$_.internal
  const $C$StreamType$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$StreamType;';

  @jni$_.internal
  @core$_.override
  C$StreamType fromReference(jni$_.JReference reference) => C$StreamType.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$StreamType?> get nullableType => const $C$StreamType$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$StreamType$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$StreamType$Type) && other is $C$StreamType$Type;
  }
}

/// from: `androidx.media3.common.C$TextureMinFilter`
class C$TextureMinFilter extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$TextureMinFilter> $type;

  @jni$_.internal
  C$TextureMinFilter.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$TextureMinFilter');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$TextureMinFilter$NullableType();
  static const type = $C$TextureMinFilter$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$TextureMinFilter> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$TextureMinFilter $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$TextureMinFilter',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$TextureMinFilter.implement(
    $C$TextureMinFilter $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$TextureMinFilter.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$TextureMinFilter {
  factory $C$TextureMinFilter() = _$C$TextureMinFilter;
}

final class _$C$TextureMinFilter with $C$TextureMinFilter {
  _$C$TextureMinFilter();
}

final class $C$TextureMinFilter$NullableType extends jni$_.JObjType<C$TextureMinFilter?> {
  @jni$_.internal
  const $C$TextureMinFilter$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$TextureMinFilter;';

  @jni$_.internal
  @core$_.override
  C$TextureMinFilter? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$TextureMinFilter.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$TextureMinFilter?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$TextureMinFilter$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$TextureMinFilter$NullableType) && other is $C$TextureMinFilter$NullableType;
  }
}

final class $C$TextureMinFilter$Type extends jni$_.JObjType<C$TextureMinFilter> {
  @jni$_.internal
  const $C$TextureMinFilter$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$TextureMinFilter;';

  @jni$_.internal
  @core$_.override
  C$TextureMinFilter fromReference(jni$_.JReference reference) => C$TextureMinFilter.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$TextureMinFilter?> get nullableType => const $C$TextureMinFilter$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$TextureMinFilter$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$TextureMinFilter$Type) && other is $C$TextureMinFilter$Type;
  }
}

/// from: `androidx.media3.common.C$TrackType`
class C$TrackType extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$TrackType> $type;

  @jni$_.internal
  C$TrackType.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$TrackType');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$TrackType$NullableType();
  static const type = $C$TrackType$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$TrackType> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$TrackType $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$TrackType',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$TrackType.implement(
    $C$TrackType $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$TrackType.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$TrackType {
  factory $C$TrackType() = _$C$TrackType;
}

final class _$C$TrackType with $C$TrackType {
  _$C$TrackType();
}

final class $C$TrackType$NullableType extends jni$_.JObjType<C$TrackType?> {
  @jni$_.internal
  const $C$TrackType$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$TrackType;';

  @jni$_.internal
  @core$_.override
  C$TrackType? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$TrackType.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$TrackType?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$TrackType$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$TrackType$NullableType) && other is $C$TrackType$NullableType;
  }
}

final class $C$TrackType$Type extends jni$_.JObjType<C$TrackType> {
  @jni$_.internal
  const $C$TrackType$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$TrackType;';

  @jni$_.internal
  @core$_.override
  C$TrackType fromReference(jni$_.JReference reference) => C$TrackType.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$TrackType?> get nullableType => const $C$TrackType$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$TrackType$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$TrackType$Type) && other is $C$TrackType$Type;
  }
}

/// from: `androidx.media3.common.C$VideoChangeFrameRateStrategy`
class C$VideoChangeFrameRateStrategy extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$VideoChangeFrameRateStrategy> $type;

  @jni$_.internal
  C$VideoChangeFrameRateStrategy.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$VideoChangeFrameRateStrategy');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$VideoChangeFrameRateStrategy$NullableType();
  static const type = $C$VideoChangeFrameRateStrategy$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$VideoChangeFrameRateStrategy> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$VideoChangeFrameRateStrategy $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$VideoChangeFrameRateStrategy',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$VideoChangeFrameRateStrategy.implement(
    $C$VideoChangeFrameRateStrategy $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$VideoChangeFrameRateStrategy.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$VideoChangeFrameRateStrategy {
  factory $C$VideoChangeFrameRateStrategy() = _$C$VideoChangeFrameRateStrategy;
}

final class _$C$VideoChangeFrameRateStrategy with $C$VideoChangeFrameRateStrategy {
  _$C$VideoChangeFrameRateStrategy();
}

final class $C$VideoChangeFrameRateStrategy$NullableType extends jni$_.JObjType<C$VideoChangeFrameRateStrategy?> {
  @jni$_.internal
  const $C$VideoChangeFrameRateStrategy$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$VideoChangeFrameRateStrategy;';

  @jni$_.internal
  @core$_.override
  C$VideoChangeFrameRateStrategy? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$VideoChangeFrameRateStrategy.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$VideoChangeFrameRateStrategy?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$VideoChangeFrameRateStrategy$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$VideoChangeFrameRateStrategy$NullableType) &&
        other is $C$VideoChangeFrameRateStrategy$NullableType;
  }
}

final class $C$VideoChangeFrameRateStrategy$Type extends jni$_.JObjType<C$VideoChangeFrameRateStrategy> {
  @jni$_.internal
  const $C$VideoChangeFrameRateStrategy$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$VideoChangeFrameRateStrategy;';

  @jni$_.internal
  @core$_.override
  C$VideoChangeFrameRateStrategy fromReference(jni$_.JReference reference) =>
      C$VideoChangeFrameRateStrategy.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$VideoChangeFrameRateStrategy?> get nullableType =>
      const $C$VideoChangeFrameRateStrategy$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$VideoChangeFrameRateStrategy$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$VideoChangeFrameRateStrategy$Type) && other is $C$VideoChangeFrameRateStrategy$Type;
  }
}

/// from: `androidx.media3.common.C$VideoCodecFlags`
class C$VideoCodecFlags extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$VideoCodecFlags> $type;

  @jni$_.internal
  C$VideoCodecFlags.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$VideoCodecFlags');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$VideoCodecFlags$NullableType();
  static const type = $C$VideoCodecFlags$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$VideoCodecFlags> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$VideoCodecFlags $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$VideoCodecFlags',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$VideoCodecFlags.implement(
    $C$VideoCodecFlags $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$VideoCodecFlags.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$VideoCodecFlags {
  factory $C$VideoCodecFlags() = _$C$VideoCodecFlags;
}

final class _$C$VideoCodecFlags with $C$VideoCodecFlags {
  _$C$VideoCodecFlags();
}

final class $C$VideoCodecFlags$NullableType extends jni$_.JObjType<C$VideoCodecFlags?> {
  @jni$_.internal
  const $C$VideoCodecFlags$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$VideoCodecFlags;';

  @jni$_.internal
  @core$_.override
  C$VideoCodecFlags? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$VideoCodecFlags.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$VideoCodecFlags?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$VideoCodecFlags$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$VideoCodecFlags$NullableType) && other is $C$VideoCodecFlags$NullableType;
  }
}

final class $C$VideoCodecFlags$Type extends jni$_.JObjType<C$VideoCodecFlags> {
  @jni$_.internal
  const $C$VideoCodecFlags$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$VideoCodecFlags;';

  @jni$_.internal
  @core$_.override
  C$VideoCodecFlags fromReference(jni$_.JReference reference) => C$VideoCodecFlags.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$VideoCodecFlags?> get nullableType => const $C$VideoCodecFlags$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$VideoCodecFlags$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$VideoCodecFlags$Type) && other is $C$VideoCodecFlags$Type;
  }
}

/// from: `androidx.media3.common.C$VideoOutputMode`
class C$VideoOutputMode extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$VideoOutputMode> $type;

  @jni$_.internal
  C$VideoOutputMode.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$VideoOutputMode');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$VideoOutputMode$NullableType();
  static const type = $C$VideoOutputMode$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$VideoOutputMode> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$VideoOutputMode $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$VideoOutputMode',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$VideoOutputMode.implement(
    $C$VideoOutputMode $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$VideoOutputMode.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$VideoOutputMode {
  factory $C$VideoOutputMode() = _$C$VideoOutputMode;
}

final class _$C$VideoOutputMode with $C$VideoOutputMode {
  _$C$VideoOutputMode();
}

final class $C$VideoOutputMode$NullableType extends jni$_.JObjType<C$VideoOutputMode?> {
  @jni$_.internal
  const $C$VideoOutputMode$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$VideoOutputMode;';

  @jni$_.internal
  @core$_.override
  C$VideoOutputMode? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$VideoOutputMode.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$VideoOutputMode?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$VideoOutputMode$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$VideoOutputMode$NullableType) && other is $C$VideoOutputMode$NullableType;
  }
}

final class $C$VideoOutputMode$Type extends jni$_.JObjType<C$VideoOutputMode> {
  @jni$_.internal
  const $C$VideoOutputMode$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$VideoOutputMode;';

  @jni$_.internal
  @core$_.override
  C$VideoOutputMode fromReference(jni$_.JReference reference) => C$VideoOutputMode.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$VideoOutputMode?> get nullableType => const $C$VideoOutputMode$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$VideoOutputMode$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$VideoOutputMode$Type) && other is $C$VideoOutputMode$Type;
  }
}

/// from: `androidx.media3.common.C$VideoScalingMode`
class C$VideoScalingMode extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$VideoScalingMode> $type;

  @jni$_.internal
  C$VideoScalingMode.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$VideoScalingMode');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$VideoScalingMode$NullableType();
  static const type = $C$VideoScalingMode$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$VideoScalingMode> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$VideoScalingMode $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$VideoScalingMode',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$VideoScalingMode.implement(
    $C$VideoScalingMode $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$VideoScalingMode.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$VideoScalingMode {
  factory $C$VideoScalingMode() = _$C$VideoScalingMode;
}

final class _$C$VideoScalingMode with $C$VideoScalingMode {
  _$C$VideoScalingMode();
}

final class $C$VideoScalingMode$NullableType extends jni$_.JObjType<C$VideoScalingMode?> {
  @jni$_.internal
  const $C$VideoScalingMode$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$VideoScalingMode;';

  @jni$_.internal
  @core$_.override
  C$VideoScalingMode? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$VideoScalingMode.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$VideoScalingMode?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$VideoScalingMode$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$VideoScalingMode$NullableType) && other is $C$VideoScalingMode$NullableType;
  }
}

final class $C$VideoScalingMode$Type extends jni$_.JObjType<C$VideoScalingMode> {
  @jni$_.internal
  const $C$VideoScalingMode$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$VideoScalingMode;';

  @jni$_.internal
  @core$_.override
  C$VideoScalingMode fromReference(jni$_.JReference reference) => C$VideoScalingMode.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$VideoScalingMode?> get nullableType => const $C$VideoScalingMode$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$VideoScalingMode$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$VideoScalingMode$Type) && other is $C$VideoScalingMode$Type;
  }
}

/// from: `androidx.media3.common.C$VolumeFlags`
class C$VolumeFlags extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$VolumeFlags> $type;

  @jni$_.internal
  C$VolumeFlags.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$VolumeFlags');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$VolumeFlags$NullableType();
  static const type = $C$VolumeFlags$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$VolumeFlags> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$VolumeFlags $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$VolumeFlags',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$VolumeFlags.implement(
    $C$VolumeFlags $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$VolumeFlags.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$VolumeFlags {
  factory $C$VolumeFlags() = _$C$VolumeFlags;
}

final class _$C$VolumeFlags with $C$VolumeFlags {
  _$C$VolumeFlags();
}

final class $C$VolumeFlags$NullableType extends jni$_.JObjType<C$VolumeFlags?> {
  @jni$_.internal
  const $C$VolumeFlags$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$VolumeFlags;';

  @jni$_.internal
  @core$_.override
  C$VolumeFlags? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$VolumeFlags.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$VolumeFlags?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$VolumeFlags$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$VolumeFlags$NullableType) && other is $C$VolumeFlags$NullableType;
  }
}

final class $C$VolumeFlags$Type extends jni$_.JObjType<C$VolumeFlags> {
  @jni$_.internal
  const $C$VolumeFlags$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$VolumeFlags;';

  @jni$_.internal
  @core$_.override
  C$VolumeFlags fromReference(jni$_.JReference reference) => C$VolumeFlags.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$VolumeFlags?> get nullableType => const $C$VolumeFlags$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$VolumeFlags$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$VolumeFlags$Type) && other is $C$VolumeFlags$Type;
  }
}

/// from: `androidx.media3.common.C$WakeMode`
class C$WakeMode extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C$WakeMode> $type;

  @jni$_.internal
  C$WakeMode.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C$WakeMode');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$WakeMode$NullableType();
  static const type = $C$WakeMode$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $C$WakeMode> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $C$WakeMode $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.C$WakeMode',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory C$WakeMode.implement(
    $C$WakeMode $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return C$WakeMode.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $C$WakeMode {
  factory $C$WakeMode() = _$C$WakeMode;
}

final class _$C$WakeMode with $C$WakeMode {
  _$C$WakeMode();
}

final class $C$WakeMode$NullableType extends jni$_.JObjType<C$WakeMode?> {
  @jni$_.internal
  const $C$WakeMode$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$WakeMode;';

  @jni$_.internal
  @core$_.override
  C$WakeMode? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C$WakeMode.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$WakeMode?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$WakeMode$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$WakeMode$NullableType) && other is $C$WakeMode$NullableType;
  }
}

final class $C$WakeMode$Type extends jni$_.JObjType<C$WakeMode> {
  @jni$_.internal
  const $C$WakeMode$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C$WakeMode;';

  @jni$_.internal
  @core$_.override
  C$WakeMode fromReference(jni$_.JReference reference) => C$WakeMode.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C$WakeMode?> get nullableType => const $C$WakeMode$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$WakeMode$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$WakeMode$Type) && other is $C$WakeMode$Type;
  }
}

/// from: `androidx.media3.common.C`
class C extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<C> $type;

  @jni$_.internal
  C.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/C');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $C$NullableType();
  static const type = $C$Type();

  /// from: `static public final long TIME_END_OF_SOURCE`
  static const TIME_END_OF_SOURCE = -9223372036854775808;

  /// from: `static public final long TIME_UNSET`
  static const TIME_UNSET = -9223372036854775807;

  /// from: `static public final int INDEX_UNSET`
  static const INDEX_UNSET = -1;

  /// from: `static public final int POSITION_UNSET`
  static const POSITION_UNSET = -1;

  /// from: `static public final float RATE_UNSET`
  static const RATE_UNSET = -3.4028235e+38;

  /// from: `static public final int RATE_UNSET_INT`
  static const RATE_UNSET_INT = -2147483647;

  /// from: `static public final int LENGTH_UNSET`
  static const LENGTH_UNSET = -1;

  /// from: `static public final int PERCENTAGE_UNSET`
  static const PERCENTAGE_UNSET = -1;

  /// from: `static public final long MILLIS_PER_SECOND`
  static const MILLIS_PER_SECOND = 1000;

  /// from: `static public final long MICROS_PER_SECOND`
  static const MICROS_PER_SECOND = 1000000;

  /// from: `static public final long NANOS_PER_SECOND`
  static const NANOS_PER_SECOND = 1000000000;

  /// from: `static public final int BITS_PER_BYTE`
  static const BITS_PER_BYTE = 8;

  /// from: `static public final int BYTES_PER_FLOAT`
  static const BYTES_PER_FLOAT = 4;
  static final _id_SERIF_NAME = _class.staticFieldId(
    r'SERIF_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SERIF_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SERIF_NAME => _id_SERIF_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_SANS_SERIF_NAME = _class.staticFieldId(
    r'SANS_SERIF_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SANS_SERIF_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SANS_SERIF_NAME => _id_SANS_SERIF_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_SSAI_SCHEME = _class.staticFieldId(
    r'SSAI_SCHEME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SSAI_SCHEME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SSAI_SCHEME => _id_SSAI_SCHEME.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int CRYPTO_TYPE_NONE`
  static const CRYPTO_TYPE_NONE = 0;

  /// from: `static public final int CRYPTO_TYPE_UNSUPPORTED`
  static const CRYPTO_TYPE_UNSUPPORTED = 1;

  /// from: `static public final int CRYPTO_TYPE_FRAMEWORK`
  static const CRYPTO_TYPE_FRAMEWORK = 2;

  /// from: `static public final int CRYPTO_TYPE_CUSTOM_BASE`
  static const CRYPTO_TYPE_CUSTOM_BASE = 10000;

  /// from: `static public final int CRYPTO_MODE_UNENCRYPTED`
  static const CRYPTO_MODE_UNENCRYPTED = 0;

  /// from: `static public final int CRYPTO_MODE_AES_CTR`
  static const CRYPTO_MODE_AES_CTR = 1;

  /// from: `static public final int CRYPTO_MODE_AES_CBC`
  static const CRYPTO_MODE_AES_CBC = 2;

  /// from: `static public final int AUDIO_SESSION_ID_UNSET`
  static const AUDIO_SESSION_ID_UNSET = 0;

  /// from: `static public final int ENCODING_INVALID`
  static const ENCODING_INVALID = 0;

  /// from: `static public final int ENCODING_PCM_8BIT`
  static const ENCODING_PCM_8BIT = 3;

  /// from: `static public final int ENCODING_PCM_16BIT`
  static const ENCODING_PCM_16BIT = 2;

  /// from: `static public final int ENCODING_PCM_16BIT_BIG_ENDIAN`
  static const ENCODING_PCM_16BIT_BIG_ENDIAN = 268435456;

  /// from: `static public final int ENCODING_PCM_24BIT`
  static const ENCODING_PCM_24BIT = 21;

  /// from: `static public final int ENCODING_PCM_24BIT_BIG_ENDIAN`
  static const ENCODING_PCM_24BIT_BIG_ENDIAN = 1342177280;

  /// from: `static public final int ENCODING_PCM_32BIT`
  static const ENCODING_PCM_32BIT = 22;

  /// from: `static public final int ENCODING_PCM_32BIT_BIG_ENDIAN`
  static const ENCODING_PCM_32BIT_BIG_ENDIAN = 1610612736;

  /// from: `static public final int ENCODING_PCM_FLOAT`
  static const ENCODING_PCM_FLOAT = 4;

  /// from: `static public final int ENCODING_MP3`
  static const ENCODING_MP3 = 9;

  /// from: `static public final int ENCODING_AAC_LC`
  static const ENCODING_AAC_LC = 10;

  /// from: `static public final int ENCODING_AAC_HE_V1`
  static const ENCODING_AAC_HE_V1 = 11;

  /// from: `static public final int ENCODING_AAC_HE_V2`
  static const ENCODING_AAC_HE_V2 = 12;

  /// from: `static public final int ENCODING_AAC_XHE`
  static const ENCODING_AAC_XHE = 16;

  /// from: `static public final int ENCODING_AAC_ELD`
  static const ENCODING_AAC_ELD = 15;

  /// from: `static public final int ENCODING_AAC_ER_BSAC`
  static const ENCODING_AAC_ER_BSAC = 1073741824;

  /// from: `static public final int ENCODING_AC3`
  static const ENCODING_AC3 = 5;

  /// from: `static public final int ENCODING_E_AC3`
  static const ENCODING_E_AC3 = 6;

  /// from: `static public final int ENCODING_E_AC3_JOC`
  static const ENCODING_E_AC3_JOC = 18;

  /// from: `static public final int ENCODING_AC4`
  static const ENCODING_AC4 = 17;

  /// from: `static public final int ENCODING_DTS`
  static const ENCODING_DTS = 7;

  /// from: `static public final int ENCODING_DTS_HD`
  static const ENCODING_DTS_HD = 8;

  /// from: `static public final int ENCODING_DTS_UHD_P2`
  static const ENCODING_DTS_UHD_P2 = 30;

  /// from: `static public final int ENCODING_DOLBY_TRUEHD`
  static const ENCODING_DOLBY_TRUEHD = 14;

  /// from: `static public final int ENCODING_OPUS`
  static const ENCODING_OPUS = 20;

  /// from: `static public final int SPATIALIZATION_BEHAVIOR_AUTO`
  static const SPATIALIZATION_BEHAVIOR_AUTO = 0;

  /// from: `static public final int SPATIALIZATION_BEHAVIOR_NEVER`
  static const SPATIALIZATION_BEHAVIOR_NEVER = 1;

  /// from: `static public final int STREAM_TYPE_ALARM`
  static const STREAM_TYPE_ALARM = 4;

  /// from: `static public final int STREAM_TYPE_DTMF`
  static const STREAM_TYPE_DTMF = 8;

  /// from: `static public final int STREAM_TYPE_MUSIC`
  static const STREAM_TYPE_MUSIC = 3;

  /// from: `static public final int STREAM_TYPE_NOTIFICATION`
  static const STREAM_TYPE_NOTIFICATION = 5;

  /// from: `static public final int STREAM_TYPE_RING`
  static const STREAM_TYPE_RING = 2;

  /// from: `static public final int STREAM_TYPE_SYSTEM`
  static const STREAM_TYPE_SYSTEM = 1;

  /// from: `static public final int STREAM_TYPE_VOICE_CALL`
  static const STREAM_TYPE_VOICE_CALL = 0;

  /// from: `static public final int STREAM_TYPE_ACCESSIBILITY`
  static const STREAM_TYPE_ACCESSIBILITY = 10;

  /// from: `static public final int STREAM_TYPE_DEFAULT`
  static const STREAM_TYPE_DEFAULT = 3;

  /// from: `static public final int VOLUME_FLAG_SHOW_UI`
  static const VOLUME_FLAG_SHOW_UI = 1;

  /// from: `static public final int VOLUME_FLAG_ALLOW_RINGER_MODES`
  static const VOLUME_FLAG_ALLOW_RINGER_MODES = 2;

  /// from: `static public final int VOLUME_FLAG_PLAY_SOUND`
  static const VOLUME_FLAG_PLAY_SOUND = 4;

  /// from: `static public final int VOLUME_FLAG_REMOVE_SOUND_AND_VIBRATE`
  static const VOLUME_FLAG_REMOVE_SOUND_AND_VIBRATE = 8;

  /// from: `static public final int VOLUME_FLAG_VIBRATE`
  static const VOLUME_FLAG_VIBRATE = 16;

  /// from: `static public final int AUDIO_CONTENT_TYPE_MOVIE`
  static const AUDIO_CONTENT_TYPE_MOVIE = 3;

  /// from: `static public final int CONTENT_TYPE_MOVIE`
  static const CONTENT_TYPE_MOVIE = 3;

  /// from: `static public final int AUDIO_CONTENT_TYPE_MUSIC`
  static const AUDIO_CONTENT_TYPE_MUSIC = 2;

  /// from: `static public final int CONTENT_TYPE_MUSIC`
  static const CONTENT_TYPE_MUSIC = 2;

  /// from: `static public final int AUDIO_CONTENT_TYPE_SONIFICATION`
  static const AUDIO_CONTENT_TYPE_SONIFICATION = 4;

  /// from: `static public final int CONTENT_TYPE_SONIFICATION`
  static const CONTENT_TYPE_SONIFICATION = 4;

  /// from: `static public final int AUDIO_CONTENT_TYPE_SPEECH`
  static const AUDIO_CONTENT_TYPE_SPEECH = 1;

  /// from: `static public final int CONTENT_TYPE_SPEECH`
  static const CONTENT_TYPE_SPEECH = 1;

  /// from: `static public final int AUDIO_CONTENT_TYPE_UNKNOWN`
  static const AUDIO_CONTENT_TYPE_UNKNOWN = 0;

  /// from: `static public final int CONTENT_TYPE_UNKNOWN`
  static const CONTENT_TYPE_UNKNOWN = 0;

  /// from: `static public final int FLAG_AUDIBILITY_ENFORCED`
  static const FLAG_AUDIBILITY_ENFORCED = 1;

  /// from: `static public final int USAGE_ALARM`
  static const USAGE_ALARM = 4;

  /// from: `static public final int USAGE_ASSISTANCE_ACCESSIBILITY`
  static const USAGE_ASSISTANCE_ACCESSIBILITY = 11;

  /// from: `static public final int USAGE_ASSISTANCE_NAVIGATION_GUIDANCE`
  static const USAGE_ASSISTANCE_NAVIGATION_GUIDANCE = 12;

  /// from: `static public final int USAGE_ASSISTANCE_SONIFICATION`
  static const USAGE_ASSISTANCE_SONIFICATION = 13;

  /// from: `static public final int USAGE_ASSISTANT`
  static const USAGE_ASSISTANT = 16;

  /// from: `static public final int USAGE_GAME`
  static const USAGE_GAME = 14;

  /// from: `static public final int USAGE_MEDIA`
  static const USAGE_MEDIA = 1;

  /// from: `static public final int USAGE_NOTIFICATION`
  static const USAGE_NOTIFICATION = 5;

  /// from: `static public final int USAGE_NOTIFICATION_COMMUNICATION_DELAYED`
  static const USAGE_NOTIFICATION_COMMUNICATION_DELAYED = 9;

  /// from: `static public final int USAGE_NOTIFICATION_COMMUNICATION_INSTANT`
  static const USAGE_NOTIFICATION_COMMUNICATION_INSTANT = 8;

  /// from: `static public final int USAGE_NOTIFICATION_COMMUNICATION_REQUEST`
  static const USAGE_NOTIFICATION_COMMUNICATION_REQUEST = 7;

  /// from: `static public final int USAGE_NOTIFICATION_EVENT`
  static const USAGE_NOTIFICATION_EVENT = 10;

  /// from: `static public final int USAGE_NOTIFICATION_RINGTONE`
  static const USAGE_NOTIFICATION_RINGTONE = 6;

  /// from: `static public final int USAGE_UNKNOWN`
  static const USAGE_UNKNOWN = 0;

  /// from: `static public final int USAGE_VOICE_COMMUNICATION`
  static const USAGE_VOICE_COMMUNICATION = 2;

  /// from: `static public final int USAGE_VOICE_COMMUNICATION_SIGNALLING`
  static const USAGE_VOICE_COMMUNICATION_SIGNALLING = 3;

  /// from: `static public final int ALLOW_CAPTURE_BY_ALL`
  static const ALLOW_CAPTURE_BY_ALL = 1;

  /// from: `static public final int ALLOW_CAPTURE_BY_NONE`
  static const ALLOW_CAPTURE_BY_NONE = 3;

  /// from: `static public final int ALLOW_CAPTURE_BY_SYSTEM`
  static const ALLOW_CAPTURE_BY_SYSTEM = 2;

  /// from: `static public final int VIDEO_CODEC_FLAG_H264`
  static const VIDEO_CODEC_FLAG_H264 = 1;

  /// from: `static public final int VIDEO_CODEC_FLAG_H265`
  static const VIDEO_CODEC_FLAG_H265 = 2;

  /// from: `static public final int BUFFER_FLAG_KEY_FRAME`
  static const BUFFER_FLAG_KEY_FRAME = 1;

  /// from: `static public final int BUFFER_FLAG_END_OF_STREAM`
  static const BUFFER_FLAG_END_OF_STREAM = 4;

  /// from: `static public final int BUFFER_FLAG_NOT_DEPENDED_ON`
  static const BUFFER_FLAG_NOT_DEPENDED_ON = 67108864;

  /// from: `static public final int BUFFER_FLAG_FIRST_SAMPLE`
  static const BUFFER_FLAG_FIRST_SAMPLE = 134217728;

  /// from: `static public final int BUFFER_FLAG_HAS_SUPPLEMENTAL_DATA`
  static const BUFFER_FLAG_HAS_SUPPLEMENTAL_DATA = 268435456;

  /// from: `static public final int BUFFER_FLAG_LAST_SAMPLE`
  static const BUFFER_FLAG_LAST_SAMPLE = 536870912;

  /// from: `static public final int BUFFER_FLAG_ENCRYPTED`
  static const BUFFER_FLAG_ENCRYPTED = 1073741824;

  /// from: `static public final int MEDIA_CODEC_PRIORITY_REALTIME`
  static const MEDIA_CODEC_PRIORITY_REALTIME = 0;

  /// from: `static public final int MEDIA_CODEC_PRIORITY_NON_REALTIME`
  static const MEDIA_CODEC_PRIORITY_NON_REALTIME = 1;

  /// from: `static public final int VIDEO_OUTPUT_MODE_NONE`
  static const VIDEO_OUTPUT_MODE_NONE = -1;

  /// from: `static public final int VIDEO_OUTPUT_MODE_YUV`
  static const VIDEO_OUTPUT_MODE_YUV = 0;

  /// from: `static public final int VIDEO_OUTPUT_MODE_SURFACE_YUV`
  static const VIDEO_OUTPUT_MODE_SURFACE_YUV = 1;

  /// from: `static public final int VIDEO_SCALING_MODE_SCALE_TO_FIT`
  static const VIDEO_SCALING_MODE_SCALE_TO_FIT = 1;

  /// from: `static public final int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING`
  static const VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING = 2;

  /// from: `static public final int VIDEO_SCALING_MODE_DEFAULT`
  static const VIDEO_SCALING_MODE_DEFAULT = 1;

  /// from: `static public final int VIDEO_CHANGE_FRAME_RATE_STRATEGY_OFF`
  static const VIDEO_CHANGE_FRAME_RATE_STRATEGY_OFF = -2147483648;

  /// from: `static public final int VIDEO_CHANGE_FRAME_RATE_STRATEGY_ONLY_IF_SEAMLESS`
  static const VIDEO_CHANGE_FRAME_RATE_STRATEGY_ONLY_IF_SEAMLESS = 0;

  /// from: `static public final int SELECTION_FLAG_DEFAULT`
  static const SELECTION_FLAG_DEFAULT = 1;

  /// from: `static public final int SELECTION_FLAG_FORCED`
  static const SELECTION_FLAG_FORCED = 2;

  /// from: `static public final int SELECTION_FLAG_AUTOSELECT`
  static const SELECTION_FLAG_AUTOSELECT = 4;
  static final _id_LANGUAGE_UNDETERMINED = _class.staticFieldId(
    r'LANGUAGE_UNDETERMINED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LANGUAGE_UNDETERMINED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LANGUAGE_UNDETERMINED =>
      _id_LANGUAGE_UNDETERMINED.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int CONTENT_TYPE_DASH`
  static const CONTENT_TYPE_DASH = 0;

  /// from: `static public final int TYPE_DASH`
  static const TYPE_DASH = 0;

  /// from: `static public final int CONTENT_TYPE_SS`
  static const CONTENT_TYPE_SS = 1;

  /// from: `static public final int TYPE_SS`
  static const TYPE_SS = 1;

  /// from: `static public final int CONTENT_TYPE_HLS`
  static const CONTENT_TYPE_HLS = 2;

  /// from: `static public final int TYPE_HLS`
  static const TYPE_HLS = 2;

  /// from: `static public final int CONTENT_TYPE_RTSP`
  static const CONTENT_TYPE_RTSP = 3;

  /// from: `static public final int TYPE_RTSP`
  static const TYPE_RTSP = 3;

  /// from: `static public final int CONTENT_TYPE_OTHER`
  static const CONTENT_TYPE_OTHER = 4;

  /// from: `static public final int TYPE_OTHER`
  static const TYPE_OTHER = 4;

  /// from: `static public final int RESULT_END_OF_INPUT`
  static const RESULT_END_OF_INPUT = -1;

  /// from: `static public final int RESULT_MAX_LENGTH_EXCEEDED`
  static const RESULT_MAX_LENGTH_EXCEEDED = -2;

  /// from: `static public final int RESULT_NOTHING_READ`
  static const RESULT_NOTHING_READ = -3;

  /// from: `static public final int RESULT_BUFFER_READ`
  static const RESULT_BUFFER_READ = -4;

  /// from: `static public final int RESULT_FORMAT_READ`
  static const RESULT_FORMAT_READ = -5;

  /// from: `static public final int DATA_TYPE_UNKNOWN`
  static const DATA_TYPE_UNKNOWN = 0;

  /// from: `static public final int DATA_TYPE_MEDIA`
  static const DATA_TYPE_MEDIA = 1;

  /// from: `static public final int DATA_TYPE_MEDIA_INITIALIZATION`
  static const DATA_TYPE_MEDIA_INITIALIZATION = 2;

  /// from: `static public final int DATA_TYPE_DRM`
  static const DATA_TYPE_DRM = 3;

  /// from: `static public final int DATA_TYPE_MANIFEST`
  static const DATA_TYPE_MANIFEST = 4;

  /// from: `static public final int DATA_TYPE_TIME_SYNCHRONIZATION`
  static const DATA_TYPE_TIME_SYNCHRONIZATION = 5;

  /// from: `static public final int DATA_TYPE_AD`
  static const DATA_TYPE_AD = 6;

  /// from: `static public final int DATA_TYPE_MEDIA_PROGRESSIVE_LIVE`
  static const DATA_TYPE_MEDIA_PROGRESSIVE_LIVE = 7;

  /// from: `static public final int DATA_TYPE_CUSTOM_BASE`
  static const DATA_TYPE_CUSTOM_BASE = 10000;

  /// from: `static public final int TRACK_TYPE_NONE`
  static const TRACK_TYPE_NONE = -2;

  /// from: `static public final int TRACK_TYPE_UNKNOWN`
  static const TRACK_TYPE_UNKNOWN = -1;

  /// from: `static public final int TRACK_TYPE_DEFAULT`
  static const TRACK_TYPE_DEFAULT = 0;

  /// from: `static public final int TRACK_TYPE_AUDIO`
  static const TRACK_TYPE_AUDIO = 1;

  /// from: `static public final int TRACK_TYPE_VIDEO`
  static const TRACK_TYPE_VIDEO = 2;

  /// from: `static public final int TRACK_TYPE_TEXT`
  static const TRACK_TYPE_TEXT = 3;

  /// from: `static public final int TRACK_TYPE_IMAGE`
  static const TRACK_TYPE_IMAGE = 4;

  /// from: `static public final int TRACK_TYPE_METADATA`
  static const TRACK_TYPE_METADATA = 5;

  /// from: `static public final int TRACK_TYPE_CAMERA_MOTION`
  static const TRACK_TYPE_CAMERA_MOTION = 6;

  /// from: `static public final int TRACK_TYPE_CUSTOM_BASE`
  static const TRACK_TYPE_CUSTOM_BASE = 10000;

  /// from: `static public final int SELECTION_REASON_UNKNOWN`
  static const SELECTION_REASON_UNKNOWN = 0;

  /// from: `static public final int SELECTION_REASON_INITIAL`
  static const SELECTION_REASON_INITIAL = 1;

  /// from: `static public final int SELECTION_REASON_MANUAL`
  static const SELECTION_REASON_MANUAL = 2;

  /// from: `static public final int SELECTION_REASON_ADAPTIVE`
  static const SELECTION_REASON_ADAPTIVE = 3;

  /// from: `static public final int SELECTION_REASON_TRICK_PLAY`
  static const SELECTION_REASON_TRICK_PLAY = 4;

  /// from: `static public final int SELECTION_REASON_CUSTOM_BASE`
  static const SELECTION_REASON_CUSTOM_BASE = 10000;

  /// from: `static public final int DEFAULT_BUFFER_SEGMENT_SIZE`
  static const DEFAULT_BUFFER_SEGMENT_SIZE = 65536;

  /// from: `static public final long DEFAULT_SEEK_BACK_INCREMENT_MS`
  static const DEFAULT_SEEK_BACK_INCREMENT_MS = 5000;

  /// from: `static public final long DEFAULT_SEEK_FORWARD_INCREMENT_MS`
  static const DEFAULT_SEEK_FORWARD_INCREMENT_MS = 15000;

  /// from: `static public final long DEFAULT_MAX_SEEK_TO_PREVIOUS_POSITION_MS`
  static const DEFAULT_MAX_SEEK_TO_PREVIOUS_POSITION_MS = 3000;
  static final _id_CENC_TYPE_cenc = _class.staticFieldId(
    r'CENC_TYPE_cenc',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CENC_TYPE_cenc`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CENC_TYPE_cenc => _id_CENC_TYPE_cenc.get(_class, const jni$_.JStringNullableType());

  static final _id_CENC_TYPE_cbc1 = _class.staticFieldId(
    r'CENC_TYPE_cbc1',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CENC_TYPE_cbc1`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CENC_TYPE_cbc1 => _id_CENC_TYPE_cbc1.get(_class, const jni$_.JStringNullableType());

  static final _id_CENC_TYPE_cens = _class.staticFieldId(
    r'CENC_TYPE_cens',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CENC_TYPE_cens`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CENC_TYPE_cens => _id_CENC_TYPE_cens.get(_class, const jni$_.JStringNullableType());

  static final _id_CENC_TYPE_cbcs = _class.staticFieldId(
    r'CENC_TYPE_cbcs',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CENC_TYPE_cbcs`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CENC_TYPE_cbcs => _id_CENC_TYPE_cbcs.get(_class, const jni$_.JStringNullableType());

  static final _id_UUID_NIL = _class.staticFieldId(
    r'UUID_NIL',
    r'Ljava/util/UUID;',
  );

  /// from: `static public final java.util.UUID UUID_NIL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get UUID_NIL => _id_UUID_NIL.get(_class, const jni$_.JObjectNullableType());

  static final _id_COMMON_PSSH_UUID = _class.staticFieldId(
    r'COMMON_PSSH_UUID',
    r'Ljava/util/UUID;',
  );

  /// from: `static public final java.util.UUID COMMON_PSSH_UUID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get COMMON_PSSH_UUID => _id_COMMON_PSSH_UUID.get(_class, const jni$_.JObjectNullableType());

  static final _id_CLEARKEY_UUID = _class.staticFieldId(
    r'CLEARKEY_UUID',
    r'Ljava/util/UUID;',
  );

  /// from: `static public final java.util.UUID CLEARKEY_UUID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CLEARKEY_UUID => _id_CLEARKEY_UUID.get(_class, const jni$_.JObjectNullableType());

  static final _id_WIDEVINE_UUID = _class.staticFieldId(
    r'WIDEVINE_UUID',
    r'Ljava/util/UUID;',
  );

  /// from: `static public final java.util.UUID WIDEVINE_UUID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get WIDEVINE_UUID => _id_WIDEVINE_UUID.get(_class, const jni$_.JObjectNullableType());

  static final _id_PLAYREADY_UUID = _class.staticFieldId(
    r'PLAYREADY_UUID',
    r'Ljava/util/UUID;',
  );

  /// from: `static public final java.util.UUID PLAYREADY_UUID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get PLAYREADY_UUID => _id_PLAYREADY_UUID.get(_class, const jni$_.JObjectNullableType());

  /// from: `static public final int STEREO_MODE_MONO`
  static const STEREO_MODE_MONO = 0;

  /// from: `static public final int STEREO_MODE_TOP_BOTTOM`
  static const STEREO_MODE_TOP_BOTTOM = 1;

  /// from: `static public final int STEREO_MODE_LEFT_RIGHT`
  static const STEREO_MODE_LEFT_RIGHT = 2;

  /// from: `static public final int STEREO_MODE_STEREO_MESH`
  static const STEREO_MODE_STEREO_MESH = 3;

  /// from: `static public final int STEREO_MODE_INTERLEAVED_LEFT_PRIMARY`
  static const STEREO_MODE_INTERLEAVED_LEFT_PRIMARY = 4;

  /// from: `static public final int STEREO_MODE_INTERLEAVED_RIGHT_PRIMARY`
  static const STEREO_MODE_INTERLEAVED_RIGHT_PRIMARY = 5;

  /// from: `static public final int COLOR_SPACE_BT601`
  static const COLOR_SPACE_BT601 = 2;

  /// from: `static public final int COLOR_SPACE_BT709`
  static const COLOR_SPACE_BT709 = 1;

  /// from: `static public final int COLOR_SPACE_BT2020`
  static const COLOR_SPACE_BT2020 = 6;

  /// from: `static public final int COLOR_TRANSFER_LINEAR`
  static const COLOR_TRANSFER_LINEAR = 1;

  /// from: `static public final int COLOR_TRANSFER_SDR`
  static const COLOR_TRANSFER_SDR = 3;

  /// from: `static public final int COLOR_TRANSFER_SRGB`
  static const COLOR_TRANSFER_SRGB = 2;

  /// from: `static public final int COLOR_TRANSFER_GAMMA_2_2`
  static const COLOR_TRANSFER_GAMMA_2_2 = 10;

  /// from: `static public final int COLOR_TRANSFER_ST2084`
  static const COLOR_TRANSFER_ST2084 = 6;

  /// from: `static public final int COLOR_TRANSFER_HLG`
  static const COLOR_TRANSFER_HLG = 7;

  /// from: `static public final int COLOR_RANGE_LIMITED`
  static const COLOR_RANGE_LIMITED = 2;

  /// from: `static public final int COLOR_RANGE_FULL`
  static const COLOR_RANGE_FULL = 1;

  /// from: `static public final int PROJECTION_RECTANGULAR`
  static const PROJECTION_RECTANGULAR = 0;

  /// from: `static public final int PROJECTION_EQUIRECTANGULAR`
  static const PROJECTION_EQUIRECTANGULAR = 1;

  /// from: `static public final int PROJECTION_CUBEMAP`
  static const PROJECTION_CUBEMAP = 2;

  /// from: `static public final int PROJECTION_MESH`
  static const PROJECTION_MESH = 3;

  /// from: `static public final int PRIORITY_MAX`
  static const PRIORITY_MAX = 0;

  /// from: `static public final int PRIORITY_PLAYBACK`
  static const PRIORITY_PLAYBACK = -1000;

  /// from: `static public final int PRIORITY_PROCESSING_FOREGROUND`
  static const PRIORITY_PROCESSING_FOREGROUND = -2000;

  /// from: `static public final int PRIORITY_PLAYBACK_PRELOAD`
  static const PRIORITY_PLAYBACK_PRELOAD = -3000;

  /// from: `static public final int PRIORITY_DOWNLOAD`
  static const PRIORITY_DOWNLOAD = -4000;

  /// from: `static public final int PRIORITY_PROCESSING_BACKGROUND`
  static const PRIORITY_PROCESSING_BACKGROUND = -4000;

  /// from: `static public final int NETWORK_TYPE_UNKNOWN`
  static const NETWORK_TYPE_UNKNOWN = 0;

  /// from: `static public final int NETWORK_TYPE_OFFLINE`
  static const NETWORK_TYPE_OFFLINE = 1;

  /// from: `static public final int NETWORK_TYPE_WIFI`
  static const NETWORK_TYPE_WIFI = 2;

  /// from: `static public final int NETWORK_TYPE_2G`
  static const NETWORK_TYPE_2G = 3;

  /// from: `static public final int NETWORK_TYPE_3G`
  static const NETWORK_TYPE_3G = 4;

  /// from: `static public final int NETWORK_TYPE_4G`
  static const NETWORK_TYPE_4G = 5;

  /// from: `static public final int NETWORK_TYPE_5G_SA`
  static const NETWORK_TYPE_5G_SA = 9;

  /// from: `static public final int NETWORK_TYPE_5G_NSA`
  static const NETWORK_TYPE_5G_NSA = 10;

  /// from: `static public final int NETWORK_TYPE_CELLULAR_UNKNOWN`
  static const NETWORK_TYPE_CELLULAR_UNKNOWN = 6;

  /// from: `static public final int NETWORK_TYPE_ETHERNET`
  static const NETWORK_TYPE_ETHERNET = 7;

  /// from: `static public final int NETWORK_TYPE_OTHER`
  static const NETWORK_TYPE_OTHER = 8;

  /// from: `static public final int WAKE_MODE_NONE`
  static const WAKE_MODE_NONE = 0;

  /// from: `static public final int WAKE_MODE_LOCAL`
  static const WAKE_MODE_LOCAL = 1;

  /// from: `static public final int WAKE_MODE_NETWORK`
  static const WAKE_MODE_NETWORK = 2;

  /// from: `static public final int ROLE_FLAG_MAIN`
  static const ROLE_FLAG_MAIN = 1;

  /// from: `static public final int ROLE_FLAG_ALTERNATE`
  static const ROLE_FLAG_ALTERNATE = 2;

  /// from: `static public final int ROLE_FLAG_SUPPLEMENTARY`
  static const ROLE_FLAG_SUPPLEMENTARY = 4;

  /// from: `static public final int ROLE_FLAG_COMMENTARY`
  static const ROLE_FLAG_COMMENTARY = 8;

  /// from: `static public final int ROLE_FLAG_DUB`
  static const ROLE_FLAG_DUB = 16;

  /// from: `static public final int ROLE_FLAG_EMERGENCY`
  static const ROLE_FLAG_EMERGENCY = 32;

  /// from: `static public final int ROLE_FLAG_CAPTION`
  static const ROLE_FLAG_CAPTION = 64;

  /// from: `static public final int ROLE_FLAG_SUBTITLE`
  static const ROLE_FLAG_SUBTITLE = 128;

  /// from: `static public final int ROLE_FLAG_SIGN`
  static const ROLE_FLAG_SIGN = 256;

  /// from: `static public final int ROLE_FLAG_DESCRIBES_VIDEO`
  static const ROLE_FLAG_DESCRIBES_VIDEO = 512;

  /// from: `static public final int ROLE_FLAG_DESCRIBES_MUSIC_AND_SOUND`
  static const ROLE_FLAG_DESCRIBES_MUSIC_AND_SOUND = 1024;

  /// from: `static public final int ROLE_FLAG_ENHANCED_DIALOG_INTELLIGIBILITY`
  static const ROLE_FLAG_ENHANCED_DIALOG_INTELLIGIBILITY = 2048;

  /// from: `static public final int ROLE_FLAG_TRANSCRIBES_DIALOG`
  static const ROLE_FLAG_TRANSCRIBES_DIALOG = 4096;

  /// from: `static public final int ROLE_FLAG_EASY_TO_READ`
  static const ROLE_FLAG_EASY_TO_READ = 8192;

  /// from: `static public final int ROLE_FLAG_TRICK_PLAY`
  static const ROLE_FLAG_TRICK_PLAY = 16384;

  /// from: `static public final int ROLE_FLAG_AUXILIARY`
  static const ROLE_FLAG_AUXILIARY = 32768;

  /// from: `static public final int AUXILIARY_TRACK_TYPE_UNDEFINED`
  static const AUXILIARY_TRACK_TYPE_UNDEFINED = 0;

  /// from: `static public final int AUXILIARY_TRACK_TYPE_ORIGINAL`
  static const AUXILIARY_TRACK_TYPE_ORIGINAL = 1;

  /// from: `static public final int AUXILIARY_TRACK_TYPE_DEPTH_LINEAR`
  static const AUXILIARY_TRACK_TYPE_DEPTH_LINEAR = 2;

  /// from: `static public final int AUXILIARY_TRACK_TYPE_DEPTH_INVERSE`
  static const AUXILIARY_TRACK_TYPE_DEPTH_INVERSE = 3;

  /// from: `static public final int AUXILIARY_TRACK_TYPE_DEPTH_METADATA`
  static const AUXILIARY_TRACK_TYPE_DEPTH_METADATA = 4;

  /// from: `static public final int FORMAT_HANDLED`
  static const FORMAT_HANDLED = 4;

  /// from: `static public final int FORMAT_EXCEEDS_CAPABILITIES`
  static const FORMAT_EXCEEDS_CAPABILITIES = 3;

  /// from: `static public final int FORMAT_UNSUPPORTED_DRM`
  static const FORMAT_UNSUPPORTED_DRM = 2;

  /// from: `static public final int FORMAT_UNSUPPORTED_SUBTYPE`
  static const FORMAT_UNSUPPORTED_SUBTYPE = 1;

  /// from: `static public final int FORMAT_UNSUPPORTED_TYPE`
  static const FORMAT_UNSUPPORTED_TYPE = 0;

  /// from: `static public final int FIRST_FRAME_NOT_RENDERED_ONLY_ALLOWED_IF_STARTED`
  static const FIRST_FRAME_NOT_RENDERED_ONLY_ALLOWED_IF_STARTED = 0;

  /// from: `static public final int FIRST_FRAME_NOT_RENDERED`
  static const FIRST_FRAME_NOT_RENDERED = 1;

  /// from: `static public final int FIRST_FRAME_NOT_RENDERED_AFTER_STREAM_CHANGE`
  static const FIRST_FRAME_NOT_RENDERED_AFTER_STREAM_CHANGE = 2;

  /// from: `static public final int FIRST_FRAME_RENDERED`
  static const FIRST_FRAME_RENDERED = 3;

  /// from: `static public final int TEXTURE_MIN_FILTER_LINEAR`
  static const TEXTURE_MIN_FILTER_LINEAR = 9729;

  /// from: `static public final int TEXTURE_MIN_FILTER_LINEAR_MIPMAP_LINEAR`
  static const TEXTURE_MIN_FILTER_LINEAR_MIPMAP_LINEAR = 9987;
  static final _id_usToMs = _class.staticMethodId(
    r'usToMs',
    r'(J)J',
  );

  static final _usToMs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallStaticLongMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public long usToMs(long j)`
  static int usToMs(
    int j,
  ) {
    return _usToMs(_class.reference.pointer, _id_usToMs as jni$_.JMethodIDPtr, j).long;
  }

  static final _id_msToUs = _class.staticMethodId(
    r'msToUs',
    r'(J)J',
  );

  static final _msToUs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallStaticLongMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public long msToUs(long j)`
  static int msToUs(
    int j,
  ) {
    return _msToUs(_class.reference.pointer, _id_msToUs as jni$_.JMethodIDPtr, j).long;
  }

  static final _id_generateAudioSessionIdV21 = _class.staticMethodId(
    r'generateAudioSessionIdV21',
    r'(Landroid/content/Context;)I',
  );

  static final _generateAudioSessionIdV21 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public int generateAudioSessionIdV21(android.content.Context context)`
  static int generateAudioSessionIdV21(
    Context? context,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return _generateAudioSessionIdV21(
      _class.reference.pointer,
      _id_generateAudioSessionIdV21 as jni$_.JMethodIDPtr,
      _$context.pointer,
    ).integer;
  }

  static final _id_getFormatSupportString = _class.staticMethodId(
    r'getFormatSupportString',
    r'(I)Ljava/lang/String;',
  );

  static final _getFormatSupportString =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public java.lang.String getFormatSupportString(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? getFormatSupportString(
    int i,
  ) {
    return _getFormatSupportString(
      _class.reference.pointer,
      _id_getFormatSupportString as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getErrorCodeForMediaDrmErrorCode = _class.staticMethodId(
    r'getErrorCodeForMediaDrmErrorCode',
    r'(I)I',
  );

  static final _getErrorCodeForMediaDrmErrorCode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public int getErrorCodeForMediaDrmErrorCode(int i)`
  static int getErrorCodeForMediaDrmErrorCode(
    int i,
  ) {
    return _getErrorCodeForMediaDrmErrorCode(
      _class.reference.pointer,
      _id_getErrorCodeForMediaDrmErrorCode as jni$_.JMethodIDPtr,
      i,
    ).integer;
  }
}

final class $C$NullableType extends jni$_.JObjType<C?> {
  @jni$_.internal
  const $C$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C;';

  @jni$_.internal
  @core$_.override
  C? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : C.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$NullableType) && other is $C$NullableType;
  }
}

final class $C$Type extends jni$_.JObjType<C> {
  @jni$_.internal
  const $C$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/C;';

  @jni$_.internal
  @core$_.override
  C fromReference(jni$_.JReference reference) => C.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<C?> get nullableType => const $C$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($C$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($C$Type) && other is $C$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$AdsConfiguration$Builder`
class MediaItem$AdsConfiguration$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$AdsConfiguration$Builder> $type;

  @jni$_.internal
  MediaItem$AdsConfiguration$Builder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$AdsConfiguration$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$AdsConfiguration$Builder$NullableType();
  static const type = $MediaItem$AdsConfiguration$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/net/Uri;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void <init>(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$AdsConfiguration$Builder(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return MediaItem$AdsConfiguration$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr, _$uri.pointer).reference,
    );
  }

  static final _id_setAdTagUri = _class.instanceMethodId(
    r'setAdTagUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem$AdsConfiguration$Builder;',
  );

  static final _setAdTagUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$AdsConfiguration$Builder setAdTagUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$AdsConfiguration$Builder? setAdTagUri(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setAdTagUri(
      reference.pointer,
      _id_setAdTagUri as jni$_.JMethodIDPtr,
      _$uri.pointer,
    ).object<MediaItem$AdsConfiguration$Builder?>(const $MediaItem$AdsConfiguration$Builder$NullableType());
  }

  static final _id_setAdsId = _class.instanceMethodId(
    r'setAdsId',
    r'(Ljava/lang/Object;)Landroidx/media3/common/MediaItem$AdsConfiguration$Builder;',
  );

  static final _setAdsId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$AdsConfiguration$Builder setAdsId(java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$AdsConfiguration$Builder? setAdsId(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _setAdsId(
      reference.pointer,
      _id_setAdsId as jni$_.JMethodIDPtr,
      _$object.pointer,
    ).object<MediaItem$AdsConfiguration$Builder?>(const $MediaItem$AdsConfiguration$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaItem$AdsConfiguration;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$AdsConfiguration build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$AdsConfiguration? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<MediaItem$AdsConfiguration?>(const $MediaItem$AdsConfiguration$NullableType());
  }
}

final class $MediaItem$AdsConfiguration$Builder$NullableType
    extends jni$_.JObjType<MediaItem$AdsConfiguration$Builder?> {
  @jni$_.internal
  const $MediaItem$AdsConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$AdsConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$AdsConfiguration$Builder? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$AdsConfiguration$Builder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$AdsConfiguration$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$AdsConfiguration$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$AdsConfiguration$Builder$NullableType) &&
        other is $MediaItem$AdsConfiguration$Builder$NullableType;
  }
}

final class $MediaItem$AdsConfiguration$Builder$Type extends jni$_.JObjType<MediaItem$AdsConfiguration$Builder> {
  @jni$_.internal
  const $MediaItem$AdsConfiguration$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$AdsConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$AdsConfiguration$Builder fromReference(jni$_.JReference reference) =>
      MediaItem$AdsConfiguration$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$AdsConfiguration$Builder?> get nullableType =>
      const $MediaItem$AdsConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$AdsConfiguration$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$AdsConfiguration$Builder$Type) &&
        other is $MediaItem$AdsConfiguration$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$AdsConfiguration`
class MediaItem$AdsConfiguration extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$AdsConfiguration> $type;

  @jni$_.internal
  MediaItem$AdsConfiguration.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$AdsConfiguration');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$AdsConfiguration$NullableType();
  static const type = $MediaItem$AdsConfiguration$Type();
  static final _id_adTagUri = _class.instanceFieldId(
    r'adTagUri',
    r'Landroid/net/Uri;',
  );

  /// from: `public final android.net.Uri adTagUri`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get adTagUri => _id_adTagUri.get(this, const jni$_.JObjectNullableType());

  static final _id_adsId = _class.instanceFieldId(
    r'adsId',
    r'Ljava/lang/Object;',
  );

  /// from: `public final java.lang.Object adsId`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get adsId => _id_adsId.get(this, const jni$_.JObjectNullableType());

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaItem$AdsConfiguration$Builder;',
  );

  static final _buildUpon =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$AdsConfiguration$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$AdsConfiguration$Builder? buildUpon() {
    return _buildUpon(
      reference.pointer,
      _id_buildUpon as jni$_.JMethodIDPtr,
    ).object<MediaItem$AdsConfiguration$Builder?>(const $MediaItem$AdsConfiguration$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr, _$object.pointer).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr).integer;
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$AdsConfiguration;',
  );

  static final _fromBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public androidx.media3.common.MediaItem$AdsConfiguration fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$AdsConfiguration? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(
      _class.reference.pointer,
      _id_fromBundle as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).object<MediaItem$AdsConfiguration?>(const $MediaItem$AdsConfiguration$NullableType());
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(
      reference.pointer,
      _id_toBundle as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $MediaItem$AdsConfiguration$NullableType extends jni$_.JObjType<MediaItem$AdsConfiguration?> {
  @jni$_.internal
  const $MediaItem$AdsConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$AdsConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$AdsConfiguration? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$AdsConfiguration.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$AdsConfiguration?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$AdsConfiguration$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$AdsConfiguration$NullableType) &&
        other is $MediaItem$AdsConfiguration$NullableType;
  }
}

final class $MediaItem$AdsConfiguration$Type extends jni$_.JObjType<MediaItem$AdsConfiguration> {
  @jni$_.internal
  const $MediaItem$AdsConfiguration$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$AdsConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$AdsConfiguration fromReference(jni$_.JReference reference) => MediaItem$AdsConfiguration.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$AdsConfiguration?> get nullableType => const $MediaItem$AdsConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$AdsConfiguration$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$AdsConfiguration$Type) && other is $MediaItem$AdsConfiguration$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$Builder`
class MediaItem$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$Builder> $type;

  @jni$_.internal
  MediaItem$Builder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$Builder$NullableType();
  static const type = $MediaItem$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$Builder() {
    return MediaItem$Builder.fromReference(_new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference);
  }

  static final _id_setMediaId = _class.instanceMethodId(
    r'setMediaId',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setMediaId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setMediaId(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setMediaId(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setMediaId(
      reference.pointer,
      _id_setMediaId as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setUri = _class.instanceMethodId(
    r'setUri',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setUri(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setUri(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setUri(
      reference.pointer,
      _id_setUri as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setUri$1 = _class.instanceMethodId(
    r'setUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setUri$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setUri$1(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setUri$1(
      reference.pointer,
      _id_setUri$1 as jni$_.JMethodIDPtr,
      _$uri.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setMimeType = _class.instanceMethodId(
    r'setMimeType',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setMimeType(
      reference.pointer,
      _id_setMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setClippingConfiguration = _class.instanceMethodId(
    r'setClippingConfiguration',
    r'(Landroidx/media3/common/MediaItem$ClippingConfiguration;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setClippingConfiguration =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setClippingConfiguration(androidx.media3.common.MediaItem$ClippingConfiguration clippingConfiguration)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setClippingConfiguration(
    MediaItem$ClippingConfiguration? clippingConfiguration,
  ) {
    final _$clippingConfiguration = clippingConfiguration?.reference ?? jni$_.jNullReference;
    return _setClippingConfiguration(
      reference.pointer,
      _id_setClippingConfiguration as jni$_.JMethodIDPtr,
      _$clippingConfiguration.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setClipStartPositionMs = _class.instanceMethodId(
    r'setClipStartPositionMs',
    r'(J)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setClipStartPositionMs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setClipStartPositionMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setClipStartPositionMs(
    int j,
  ) {
    return _setClipStartPositionMs(
      reference.pointer,
      _id_setClipStartPositionMs as jni$_.JMethodIDPtr,
      j,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setClipEndPositionMs = _class.instanceMethodId(
    r'setClipEndPositionMs',
    r'(J)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setClipEndPositionMs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setClipEndPositionMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setClipEndPositionMs(
    int j,
  ) {
    return _setClipEndPositionMs(
      reference.pointer,
      _id_setClipEndPositionMs as jni$_.JMethodIDPtr,
      j,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setClipRelativeToLiveWindow = _class.instanceMethodId(
    r'setClipRelativeToLiveWindow',
    r'(Z)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setClipRelativeToLiveWindow =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setClipRelativeToLiveWindow(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setClipRelativeToLiveWindow(
    bool z,
  ) {
    return _setClipRelativeToLiveWindow(
      reference.pointer,
      _id_setClipRelativeToLiveWindow as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setClipRelativeToDefaultPosition = _class.instanceMethodId(
    r'setClipRelativeToDefaultPosition',
    r'(Z)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setClipRelativeToDefaultPosition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setClipRelativeToDefaultPosition(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setClipRelativeToDefaultPosition(
    bool z,
  ) {
    return _setClipRelativeToDefaultPosition(
      reference.pointer,
      _id_setClipRelativeToDefaultPosition as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setClipStartsAtKeyFrame = _class.instanceMethodId(
    r'setClipStartsAtKeyFrame',
    r'(Z)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setClipStartsAtKeyFrame =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setClipStartsAtKeyFrame(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setClipStartsAtKeyFrame(
    bool z,
  ) {
    return _setClipStartsAtKeyFrame(
      reference.pointer,
      _id_setClipStartsAtKeyFrame as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmConfiguration = _class.instanceMethodId(
    r'setDrmConfiguration',
    r'(Landroidx/media3/common/MediaItem$DrmConfiguration;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmConfiguration =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmConfiguration(androidx.media3.common.MediaItem$DrmConfiguration drmConfiguration)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmConfiguration(
    MediaItem$DrmConfiguration? drmConfiguration,
  ) {
    final _$drmConfiguration = drmConfiguration?.reference ?? jni$_.jNullReference;
    return _setDrmConfiguration(
      reference.pointer,
      _id_setDrmConfiguration as jni$_.JMethodIDPtr,
      _$drmConfiguration.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmLicenseUri = _class.instanceMethodId(
    r'setDrmLicenseUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmLicenseUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmLicenseUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmLicenseUri(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setDrmLicenseUri(
      reference.pointer,
      _id_setDrmLicenseUri as jni$_.JMethodIDPtr,
      _$uri.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmLicenseUri$1 = _class.instanceMethodId(
    r'setDrmLicenseUri',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmLicenseUri$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmLicenseUri(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmLicenseUri$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setDrmLicenseUri$1(
      reference.pointer,
      _id_setDrmLicenseUri$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmLicenseRequestHeaders = _class.instanceMethodId(
    r'setDrmLicenseRequestHeaders',
    r'(Ljava/util/Map;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmLicenseRequestHeaders =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmLicenseRequestHeaders(java.util.Map<java.lang.String, java.lang.String> map)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmLicenseRequestHeaders(
    jni$_.JMap<jni$_.JString?, jni$_.JString?>? map,
  ) {
    final _$map = map?.reference ?? jni$_.jNullReference;
    return _setDrmLicenseRequestHeaders(
      reference.pointer,
      _id_setDrmLicenseRequestHeaders as jni$_.JMethodIDPtr,
      _$map.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmUuid = _class.instanceMethodId(
    r'setDrmUuid',
    r'(Ljava/util/UUID;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmUuid =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmUuid(java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmUuid(
    jni$_.JObject? uUID,
  ) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _setDrmUuid(
      reference.pointer,
      _id_setDrmUuid as jni$_.JMethodIDPtr,
      _$uUID.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmMultiSession = _class.instanceMethodId(
    r'setDrmMultiSession',
    r'(Z)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmMultiSession =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmMultiSession(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmMultiSession(
    bool z,
  ) {
    return _setDrmMultiSession(
      reference.pointer,
      _id_setDrmMultiSession as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmForceDefaultLicenseUri = _class.instanceMethodId(
    r'setDrmForceDefaultLicenseUri',
    r'(Z)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmForceDefaultLicenseUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmForceDefaultLicenseUri(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmForceDefaultLicenseUri(
    bool z,
  ) {
    return _setDrmForceDefaultLicenseUri(
      reference.pointer,
      _id_setDrmForceDefaultLicenseUri as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmPlayClearContentWithoutKey = _class.instanceMethodId(
    r'setDrmPlayClearContentWithoutKey',
    r'(Z)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmPlayClearContentWithoutKey =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmPlayClearContentWithoutKey(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmPlayClearContentWithoutKey(
    bool z,
  ) {
    return _setDrmPlayClearContentWithoutKey(
      reference.pointer,
      _id_setDrmPlayClearContentWithoutKey as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmSessionForClearPeriods = _class.instanceMethodId(
    r'setDrmSessionForClearPeriods',
    r'(Z)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmSessionForClearPeriods =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmSessionForClearPeriods(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmSessionForClearPeriods(
    bool z,
  ) {
    return _setDrmSessionForClearPeriods(
      reference.pointer,
      _id_setDrmSessionForClearPeriods as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmSessionForClearTypes = _class.instanceMethodId(
    r'setDrmSessionForClearTypes',
    r'(Ljava/util/List;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmSessionForClearTypes =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmSessionForClearTypes(java.util.List<java.lang.Integer> list)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmSessionForClearTypes(
    jni$_.JList<jni$_.JInteger?>? list,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _setDrmSessionForClearTypes(
      reference.pointer,
      _id_setDrmSessionForClearTypes as jni$_.JMethodIDPtr,
      _$list.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setDrmKeySetId = _class.instanceMethodId(
    r'setDrmKeySetId',
    r'([B)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setDrmKeySetId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setDrmKeySetId(byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setDrmKeySetId(
    jni$_.JByteArray? bs,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _setDrmKeySetId(
      reference.pointer,
      _id_setDrmKeySetId as jni$_.JMethodIDPtr,
      _$bs.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setStreamKeys = _class.instanceMethodId(
    r'setStreamKeys',
    r'(Ljava/util/List;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setStreamKeys =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setStreamKeys(java.util.List<androidx.media3.common.StreamKey> list)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setStreamKeys(
    jni$_.JList<jni$_.JObject?>? list,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _setStreamKeys(
      reference.pointer,
      _id_setStreamKeys as jni$_.JMethodIDPtr,
      _$list.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setCustomCacheKey = _class.instanceMethodId(
    r'setCustomCacheKey',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setCustomCacheKey =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setCustomCacheKey(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setCustomCacheKey(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setCustomCacheKey(
      reference.pointer,
      _id_setCustomCacheKey as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setSubtitles = _class.instanceMethodId(
    r'setSubtitles',
    r'(Ljava/util/List;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setSubtitles =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setSubtitles(java.util.List<androidx.media3.common.MediaItem$Subtitle> list)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setSubtitles(
    jni$_.JList<MediaItem$Subtitle?>? list,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _setSubtitles(
      reference.pointer,
      _id_setSubtitles as jni$_.JMethodIDPtr,
      _$list.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setSubtitleConfigurations = _class.instanceMethodId(
    r'setSubtitleConfigurations',
    r'(Ljava/util/List;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setSubtitleConfigurations =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setSubtitleConfigurations(java.util.List<androidx.media3.common.MediaItem$SubtitleConfiguration> list)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setSubtitleConfigurations(
    jni$_.JList<MediaItem$SubtitleConfiguration?>? list,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _setSubtitleConfigurations(
      reference.pointer,
      _id_setSubtitleConfigurations as jni$_.JMethodIDPtr,
      _$list.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setAdsConfiguration = _class.instanceMethodId(
    r'setAdsConfiguration',
    r'(Landroidx/media3/common/MediaItem$AdsConfiguration;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setAdsConfiguration =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setAdsConfiguration(androidx.media3.common.MediaItem$AdsConfiguration adsConfiguration)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setAdsConfiguration(
    MediaItem$AdsConfiguration? adsConfiguration,
  ) {
    final _$adsConfiguration = adsConfiguration?.reference ?? jni$_.jNullReference;
    return _setAdsConfiguration(
      reference.pointer,
      _id_setAdsConfiguration as jni$_.JMethodIDPtr,
      _$adsConfiguration.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setAdTagUri = _class.instanceMethodId(
    r'setAdTagUri',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setAdTagUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setAdTagUri(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setAdTagUri(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setAdTagUri(
      reference.pointer,
      _id_setAdTagUri as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setAdTagUri$1 = _class.instanceMethodId(
    r'setAdTagUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setAdTagUri$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setAdTagUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setAdTagUri$1(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setAdTagUri$1(
      reference.pointer,
      _id_setAdTagUri$1 as jni$_.JMethodIDPtr,
      _$uri.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setAdTagUri$2 = _class.instanceMethodId(
    r'setAdTagUri',
    r'(Landroid/net/Uri;Ljava/lang/Object;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setAdTagUri$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setAdTagUri(android.net.Uri uri, java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setAdTagUri$2(
    jni$_.JObject? uri,
    jni$_.JObject? object,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _setAdTagUri$2(
      reference.pointer,
      _id_setAdTagUri$2 as jni$_.JMethodIDPtr,
      _$uri.pointer,
      _$object.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setLiveConfiguration = _class.instanceMethodId(
    r'setLiveConfiguration',
    r'(Landroidx/media3/common/MediaItem$LiveConfiguration;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setLiveConfiguration =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setLiveConfiguration(androidx.media3.common.MediaItem$LiveConfiguration liveConfiguration)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setLiveConfiguration(
    MediaItem$LiveConfiguration? liveConfiguration,
  ) {
    final _$liveConfiguration = liveConfiguration?.reference ?? jni$_.jNullReference;
    return _setLiveConfiguration(
      reference.pointer,
      _id_setLiveConfiguration as jni$_.JMethodIDPtr,
      _$liveConfiguration.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setLiveTargetOffsetMs = _class.instanceMethodId(
    r'setLiveTargetOffsetMs',
    r'(J)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setLiveTargetOffsetMs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setLiveTargetOffsetMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setLiveTargetOffsetMs(
    int j,
  ) {
    return _setLiveTargetOffsetMs(
      reference.pointer,
      _id_setLiveTargetOffsetMs as jni$_.JMethodIDPtr,
      j,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setLiveMinOffsetMs = _class.instanceMethodId(
    r'setLiveMinOffsetMs',
    r'(J)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setLiveMinOffsetMs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setLiveMinOffsetMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setLiveMinOffsetMs(
    int j,
  ) {
    return _setLiveMinOffsetMs(
      reference.pointer,
      _id_setLiveMinOffsetMs as jni$_.JMethodIDPtr,
      j,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setLiveMaxOffsetMs = _class.instanceMethodId(
    r'setLiveMaxOffsetMs',
    r'(J)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setLiveMaxOffsetMs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setLiveMaxOffsetMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setLiveMaxOffsetMs(
    int j,
  ) {
    return _setLiveMaxOffsetMs(
      reference.pointer,
      _id_setLiveMaxOffsetMs as jni$_.JMethodIDPtr,
      j,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setLiveMinPlaybackSpeed = _class.instanceMethodId(
    r'setLiveMinPlaybackSpeed',
    r'(F)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setLiveMinPlaybackSpeed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Double,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setLiveMinPlaybackSpeed(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setLiveMinPlaybackSpeed(
    double f,
  ) {
    return _setLiveMinPlaybackSpeed(
      reference.pointer,
      _id_setLiveMinPlaybackSpeed as jni$_.JMethodIDPtr,
      f,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setLiveMaxPlaybackSpeed = _class.instanceMethodId(
    r'setLiveMaxPlaybackSpeed',
    r'(F)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setLiveMaxPlaybackSpeed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Double,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setLiveMaxPlaybackSpeed(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setLiveMaxPlaybackSpeed(
    double f,
  ) {
    return _setLiveMaxPlaybackSpeed(
      reference.pointer,
      _id_setLiveMaxPlaybackSpeed as jni$_.JMethodIDPtr,
      f,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setTag = _class.instanceMethodId(
    r'setTag',
    r'(Ljava/lang/Object;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setTag =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setTag(java.lang.Object object)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setTag(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _setTag(
      reference.pointer,
      _id_setTag as jni$_.JMethodIDPtr,
      _$object.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setImageDurationMs = _class.instanceMethodId(
    r'setImageDurationMs',
    r'(J)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setImageDurationMs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$Builder setImageDurationMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setImageDurationMs(
    int j,
  ) {
    return _setImageDurationMs(
      reference.pointer,
      _id_setImageDurationMs as jni$_.JMethodIDPtr,
      j,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setMediaMetadata = _class.instanceMethodId(
    r'setMediaMetadata',
    r'(Landroidx/media3/common/MediaMetadata;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setMediaMetadata =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setMediaMetadata(androidx.media3.common.MediaMetadata mediaMetadata)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setMediaMetadata(
    MediaMetadata? mediaMetadata,
  ) {
    final _$mediaMetadata = mediaMetadata?.reference ?? jni$_.jNullReference;
    return _setMediaMetadata(
      reference.pointer,
      _id_setMediaMetadata as jni$_.JMethodIDPtr,
      _$mediaMetadata.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_setRequestMetadata = _class.instanceMethodId(
    r'setRequestMetadata',
    r'(Landroidx/media3/common/MediaItem$RequestMetadata;)Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _setRequestMetadata =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder setRequestMetadata(androidx.media3.common.MediaItem$RequestMetadata requestMetadata)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? setRequestMetadata(
    MediaItem$RequestMetadata? requestMetadata,
  ) {
    final _$requestMetadata = requestMetadata?.reference ?? jni$_.jNullReference;
    return _setRequestMetadata(
      reference.pointer,
      _id_setRequestMetadata as jni$_.JMethodIDPtr,
      _$requestMetadata.pointer,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaItem;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<MediaItem?>(const $MediaItem$NullableType());
  }
}

final class $MediaItem$Builder$NullableType extends jni$_.JObjType<MediaItem$Builder?> {
  @jni$_.internal
  const $MediaItem$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$Builder? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$Builder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$Builder$NullableType) && other is $MediaItem$Builder$NullableType;
  }
}

final class $MediaItem$Builder$Type extends jni$_.JObjType<MediaItem$Builder> {
  @jni$_.internal
  const $MediaItem$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$Builder fromReference(jni$_.JReference reference) => MediaItem$Builder.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$Builder?> get nullableType => const $MediaItem$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$Builder$Type) && other is $MediaItem$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$ClippingConfiguration$Builder`
class MediaItem$ClippingConfiguration$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$ClippingConfiguration$Builder> $type;

  @jni$_.internal
  MediaItem$ClippingConfiguration$Builder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$ClippingConfiguration$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$ClippingConfiguration$Builder$NullableType();
  static const type = $MediaItem$ClippingConfiguration$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$ClippingConfiguration$Builder() {
    return MediaItem$ClippingConfiguration$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_setStartPositionMs = _class.instanceMethodId(
    r'setStartPositionMs',
    r'(J)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setStartPositionMs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setStartPositionMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setStartPositionMs(
    int j,
  ) {
    return _setStartPositionMs(
      reference.pointer,
      _id_setStartPositionMs as jni$_.JMethodIDPtr,
      j,
    ).object<MediaItem$ClippingConfiguration$Builder?>(const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_setStartPositionUs = _class.instanceMethodId(
    r'setStartPositionUs',
    r'(J)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setStartPositionUs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setStartPositionUs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setStartPositionUs(
    int j,
  ) {
    return _setStartPositionUs(
      reference.pointer,
      _id_setStartPositionUs as jni$_.JMethodIDPtr,
      j,
    ).object<MediaItem$ClippingConfiguration$Builder?>(const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_setEndPositionMs = _class.instanceMethodId(
    r'setEndPositionMs',
    r'(J)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setEndPositionMs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setEndPositionMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setEndPositionMs(
    int j,
  ) {
    return _setEndPositionMs(
      reference.pointer,
      _id_setEndPositionMs as jni$_.JMethodIDPtr,
      j,
    ).object<MediaItem$ClippingConfiguration$Builder?>(const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_setEndPositionUs = _class.instanceMethodId(
    r'setEndPositionUs',
    r'(J)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setEndPositionUs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setEndPositionUs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setEndPositionUs(
    int j,
  ) {
    return _setEndPositionUs(
      reference.pointer,
      _id_setEndPositionUs as jni$_.JMethodIDPtr,
      j,
    ).object<MediaItem$ClippingConfiguration$Builder?>(const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_setRelativeToLiveWindow = _class.instanceMethodId(
    r'setRelativeToLiveWindow',
    r'(Z)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setRelativeToLiveWindow =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setRelativeToLiveWindow(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setRelativeToLiveWindow(
    bool z,
  ) {
    return _setRelativeToLiveWindow(
      reference.pointer,
      _id_setRelativeToLiveWindow as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$ClippingConfiguration$Builder?>(const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_setRelativeToDefaultPosition = _class.instanceMethodId(
    r'setRelativeToDefaultPosition',
    r'(Z)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setRelativeToDefaultPosition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setRelativeToDefaultPosition(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setRelativeToDefaultPosition(
    bool z,
  ) {
    return _setRelativeToDefaultPosition(
      reference.pointer,
      _id_setRelativeToDefaultPosition as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$ClippingConfiguration$Builder?>(const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_setStartsAtKeyFrame = _class.instanceMethodId(
    r'setStartsAtKeyFrame',
    r'(Z)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setStartsAtKeyFrame =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setStartsAtKeyFrame(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setStartsAtKeyFrame(
    bool z,
  ) {
    return _setStartsAtKeyFrame(
      reference.pointer,
      _id_setStartsAtKeyFrame as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$ClippingConfiguration$Builder?>(const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_setAllowUnseekableMedia = _class.instanceMethodId(
    r'setAllowUnseekableMedia',
    r'(Z)Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _setAllowUnseekableMedia =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder setAllowUnseekableMedia(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? setAllowUnseekableMedia(
    bool z,
  ) {
    return _setAllowUnseekableMedia(
      reference.pointer,
      _id_setAllowUnseekableMedia as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$ClippingConfiguration$Builder?>(const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaItem$ClippingConfiguration;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<MediaItem$ClippingConfiguration?>(const $MediaItem$ClippingConfiguration$NullableType());
  }

  static final _id_buildClippingProperties = _class.instanceMethodId(
    r'buildClippingProperties',
    r'()Landroidx/media3/common/MediaItem$ClippingProperties;',
  );

  static final _buildClippingProperties =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$ClippingProperties buildClippingProperties()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingProperties? buildClippingProperties() {
    return _buildClippingProperties(
      reference.pointer,
      _id_buildClippingProperties as jni$_.JMethodIDPtr,
    ).object<MediaItem$ClippingProperties?>(const $MediaItem$ClippingProperties$NullableType());
  }
}

final class $MediaItem$ClippingConfiguration$Builder$NullableType
    extends jni$_.JObjType<MediaItem$ClippingConfiguration$Builder?> {
  @jni$_.internal
  const $MediaItem$ClippingConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$ClippingConfiguration$Builder? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$ClippingConfiguration$Builder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$ClippingConfiguration$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$ClippingConfiguration$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$ClippingConfiguration$Builder$NullableType) &&
        other is $MediaItem$ClippingConfiguration$Builder$NullableType;
  }
}

final class $MediaItem$ClippingConfiguration$Builder$Type
    extends jni$_.JObjType<MediaItem$ClippingConfiguration$Builder> {
  @jni$_.internal
  const $MediaItem$ClippingConfiguration$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$ClippingConfiguration$Builder fromReference(jni$_.JReference reference) =>
      MediaItem$ClippingConfiguration$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$ClippingConfiguration$Builder?> get nullableType =>
      const $MediaItem$ClippingConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$ClippingConfiguration$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$ClippingConfiguration$Builder$Type) &&
        other is $MediaItem$ClippingConfiguration$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$ClippingConfiguration`
class MediaItem$ClippingConfiguration extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$ClippingConfiguration> $type;

  @jni$_.internal
  MediaItem$ClippingConfiguration.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$ClippingConfiguration');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$ClippingConfiguration$NullableType();
  static const type = $MediaItem$ClippingConfiguration$Type();
  static final _id_UNSET = _class.staticFieldId(
    r'UNSET',
    r'Landroidx/media3/common/MediaItem$ClippingConfiguration;',
  );

  /// from: `static public final androidx.media3.common.MediaItem$ClippingConfiguration UNSET`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$ClippingConfiguration? get UNSET =>
      _id_UNSET.get(_class, const $MediaItem$ClippingConfiguration$NullableType());

  static final _id_startPositionMs = _class.instanceFieldId(
    r'startPositionMs',
    r'J',
  );

  /// from: `public final long startPositionMs`
  int get startPositionMs => _id_startPositionMs.get(this, const jni$_.jlongType());

  static final _id_startPositionUs = _class.instanceFieldId(
    r'startPositionUs',
    r'J',
  );

  /// from: `public final long startPositionUs`
  int get startPositionUs => _id_startPositionUs.get(this, const jni$_.jlongType());

  static final _id_endPositionMs = _class.instanceFieldId(
    r'endPositionMs',
    r'J',
  );

  /// from: `public final long endPositionMs`
  int get endPositionMs => _id_endPositionMs.get(this, const jni$_.jlongType());

  static final _id_endPositionUs = _class.instanceFieldId(
    r'endPositionUs',
    r'J',
  );

  /// from: `public final long endPositionUs`
  int get endPositionUs => _id_endPositionUs.get(this, const jni$_.jlongType());

  static final _id_relativeToLiveWindow = _class.instanceFieldId(
    r'relativeToLiveWindow',
    r'Z',
  );

  /// from: `public final boolean relativeToLiveWindow`
  bool get relativeToLiveWindow => _id_relativeToLiveWindow.get(this, const jni$_.jbooleanType());

  static final _id_relativeToDefaultPosition = _class.instanceFieldId(
    r'relativeToDefaultPosition',
    r'Z',
  );

  /// from: `public final boolean relativeToDefaultPosition`
  bool get relativeToDefaultPosition => _id_relativeToDefaultPosition.get(this, const jni$_.jbooleanType());

  static final _id_startsAtKeyFrame = _class.instanceFieldId(
    r'startsAtKeyFrame',
    r'Z',
  );

  /// from: `public final boolean startsAtKeyFrame`
  bool get startsAtKeyFrame => _id_startsAtKeyFrame.get(this, const jni$_.jbooleanType());

  static final _id_allowUnseekableMedia = _class.instanceFieldId(
    r'allowUnseekableMedia',
    r'Z',
  );

  /// from: `public final boolean allowUnseekableMedia`
  bool get allowUnseekableMedia => _id_allowUnseekableMedia.get(this, const jni$_.jbooleanType());

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaItem$ClippingConfiguration$Builder;',
  );

  static final _buildUpon =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$ClippingConfiguration$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration$Builder? buildUpon() {
    return _buildUpon(
      reference.pointer,
      _id_buildUpon as jni$_.JMethodIDPtr,
    ).object<MediaItem$ClippingConfiguration$Builder?>(const $MediaItem$ClippingConfiguration$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr, _$object.pointer).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr).integer;
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(
      reference.pointer,
      _id_toBundle as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$ClippingProperties;',
  );

  static final _fromBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public androidx.media3.common.MediaItem$ClippingProperties fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$ClippingProperties? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(
      _class.reference.pointer,
      _id_fromBundle as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).object<MediaItem$ClippingProperties?>(const $MediaItem$ClippingProperties$NullableType());
  }
}

final class $MediaItem$ClippingConfiguration$NullableType extends jni$_.JObjType<MediaItem$ClippingConfiguration?> {
  @jni$_.internal
  const $MediaItem$ClippingConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$ClippingConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$ClippingConfiguration? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$ClippingConfiguration.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$ClippingConfiguration?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$ClippingConfiguration$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$ClippingConfiguration$NullableType) &&
        other is $MediaItem$ClippingConfiguration$NullableType;
  }
}

final class $MediaItem$ClippingConfiguration$Type extends jni$_.JObjType<MediaItem$ClippingConfiguration> {
  @jni$_.internal
  const $MediaItem$ClippingConfiguration$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$ClippingConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$ClippingConfiguration fromReference(jni$_.JReference reference) =>
      MediaItem$ClippingConfiguration.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$ClippingConfiguration?> get nullableType =>
      const $MediaItem$ClippingConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$ClippingConfiguration$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$ClippingConfiguration$Type) &&
        other is $MediaItem$ClippingConfiguration$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$ClippingProperties`
class MediaItem$ClippingProperties extends MediaItem$ClippingConfiguration {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$ClippingProperties> $type;

  @jni$_.internal
  MediaItem$ClippingProperties.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$ClippingProperties');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$ClippingProperties$NullableType();
  static const type = $MediaItem$ClippingProperties$Type();
  static final _id_UNSET$1 = _class.staticFieldId(
    r'UNSET',
    r'Landroidx/media3/common/MediaItem$ClippingProperties;',
  );

  /// from: `static public final androidx.media3.common.MediaItem$ClippingProperties UNSET`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$ClippingProperties? get UNSET$1 =>
      _id_UNSET$1.get(_class, const $MediaItem$ClippingProperties$NullableType());
}

final class $MediaItem$ClippingProperties$NullableType extends jni$_.JObjType<MediaItem$ClippingProperties?> {
  @jni$_.internal
  const $MediaItem$ClippingProperties$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$ClippingProperties;';

  @jni$_.internal
  @core$_.override
  MediaItem$ClippingProperties? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$ClippingProperties.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $MediaItem$ClippingConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$ClippingProperties?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($MediaItem$ClippingProperties$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$ClippingProperties$NullableType) &&
        other is $MediaItem$ClippingProperties$NullableType;
  }
}

final class $MediaItem$ClippingProperties$Type extends jni$_.JObjType<MediaItem$ClippingProperties> {
  @jni$_.internal
  const $MediaItem$ClippingProperties$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$ClippingProperties;';

  @jni$_.internal
  @core$_.override
  MediaItem$ClippingProperties fromReference(jni$_.JReference reference) => MediaItem$ClippingProperties.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $MediaItem$ClippingConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$ClippingProperties?> get nullableType => const $MediaItem$ClippingProperties$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($MediaItem$ClippingProperties$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$ClippingProperties$Type) && other is $MediaItem$ClippingProperties$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$DrmConfiguration$Builder`
class MediaItem$DrmConfiguration$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$DrmConfiguration$Builder> $type;

  @jni$_.internal
  MediaItem$DrmConfiguration$Builder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$DrmConfiguration$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$DrmConfiguration$Builder$NullableType();
  static const type = $MediaItem$DrmConfiguration$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/util/UUID;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void <init>(java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$DrmConfiguration$Builder(
    jni$_.JObject? uUID,
  ) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return MediaItem$DrmConfiguration$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr, _$uUID.pointer).reference,
    );
  }

  static final _id_setScheme = _class.instanceMethodId(
    r'setScheme',
    r'(Ljava/util/UUID;)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setScheme =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setScheme(java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setScheme(
    jni$_.JObject? uUID,
  ) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _setScheme(
      reference.pointer,
      _id_setScheme as jni$_.JMethodIDPtr,
      _$uUID.pointer,
    ).object<MediaItem$DrmConfiguration$Builder?>(const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setLicenseUri = _class.instanceMethodId(
    r'setLicenseUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setLicenseUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setLicenseUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setLicenseUri(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setLicenseUri(
      reference.pointer,
      _id_setLicenseUri as jni$_.JMethodIDPtr,
      _$uri.pointer,
    ).object<MediaItem$DrmConfiguration$Builder?>(const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setLicenseUri$1 = _class.instanceMethodId(
    r'setLicenseUri',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setLicenseUri$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setLicenseUri(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setLicenseUri$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setLicenseUri$1(
      reference.pointer,
      _id_setLicenseUri$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<MediaItem$DrmConfiguration$Builder?>(const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setLicenseRequestHeaders = _class.instanceMethodId(
    r'setLicenseRequestHeaders',
    r'(Ljava/util/Map;)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setLicenseRequestHeaders =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setLicenseRequestHeaders(java.util.Map<java.lang.String, java.lang.String> map)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setLicenseRequestHeaders(
    jni$_.JMap<jni$_.JString?, jni$_.JString?>? map,
  ) {
    final _$map = map?.reference ?? jni$_.jNullReference;
    return _setLicenseRequestHeaders(
      reference.pointer,
      _id_setLicenseRequestHeaders as jni$_.JMethodIDPtr,
      _$map.pointer,
    ).object<MediaItem$DrmConfiguration$Builder?>(const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setMultiSession = _class.instanceMethodId(
    r'setMultiSession',
    r'(Z)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setMultiSession =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setMultiSession(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setMultiSession(
    bool z,
  ) {
    return _setMultiSession(
      reference.pointer,
      _id_setMultiSession as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$DrmConfiguration$Builder?>(const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setForceDefaultLicenseUri = _class.instanceMethodId(
    r'setForceDefaultLicenseUri',
    r'(Z)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setForceDefaultLicenseUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setForceDefaultLicenseUri(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setForceDefaultLicenseUri(
    bool z,
  ) {
    return _setForceDefaultLicenseUri(
      reference.pointer,
      _id_setForceDefaultLicenseUri as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$DrmConfiguration$Builder?>(const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setPlayClearContentWithoutKey = _class.instanceMethodId(
    r'setPlayClearContentWithoutKey',
    r'(Z)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setPlayClearContentWithoutKey =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setPlayClearContentWithoutKey(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setPlayClearContentWithoutKey(
    bool z,
  ) {
    return _setPlayClearContentWithoutKey(
      reference.pointer,
      _id_setPlayClearContentWithoutKey as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$DrmConfiguration$Builder?>(const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_forceSessionsForAudioAndVideoTracks = _class.instanceMethodId(
    r'forceSessionsForAudioAndVideoTracks',
    r'(Z)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _forceSessionsForAudioAndVideoTracks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder forceSessionsForAudioAndVideoTracks(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? forceSessionsForAudioAndVideoTracks(
    bool z,
  ) {
    return _forceSessionsForAudioAndVideoTracks(
      reference.pointer,
      _id_forceSessionsForAudioAndVideoTracks as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$DrmConfiguration$Builder?>(const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setForceSessionsForAudioAndVideoTracks = _class.instanceMethodId(
    r'setForceSessionsForAudioAndVideoTracks',
    r'(Z)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setForceSessionsForAudioAndVideoTracks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setForceSessionsForAudioAndVideoTracks(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setForceSessionsForAudioAndVideoTracks(
    bool z,
  ) {
    return _setForceSessionsForAudioAndVideoTracks(
      reference.pointer,
      _id_setForceSessionsForAudioAndVideoTracks as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<MediaItem$DrmConfiguration$Builder?>(const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setForcedSessionTrackTypes = _class.instanceMethodId(
    r'setForcedSessionTrackTypes',
    r'(Ljava/util/List;)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setForcedSessionTrackTypes =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setForcedSessionTrackTypes(java.util.List<java.lang.Integer> list)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setForcedSessionTrackTypes(
    jni$_.JList<jni$_.JInteger?>? list,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _setForcedSessionTrackTypes(
      reference.pointer,
      _id_setForcedSessionTrackTypes as jni$_.JMethodIDPtr,
      _$list.pointer,
    ).object<MediaItem$DrmConfiguration$Builder?>(const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_setKeySetId = _class.instanceMethodId(
    r'setKeySetId',
    r'([B)Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _setKeySetId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder setKeySetId(byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? setKeySetId(
    jni$_.JByteArray? bs,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _setKeySetId(
      reference.pointer,
      _id_setKeySetId as jni$_.JMethodIDPtr,
      _$bs.pointer,
    ).object<MediaItem$DrmConfiguration$Builder?>(const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaItem$DrmConfiguration;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<MediaItem$DrmConfiguration?>(const $MediaItem$DrmConfiguration$NullableType());
  }
}

final class $MediaItem$DrmConfiguration$Builder$NullableType
    extends jni$_.JObjType<MediaItem$DrmConfiguration$Builder?> {
  @jni$_.internal
  const $MediaItem$DrmConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$DrmConfiguration$Builder? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$DrmConfiguration$Builder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$DrmConfiguration$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$DrmConfiguration$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$DrmConfiguration$Builder$NullableType) &&
        other is $MediaItem$DrmConfiguration$Builder$NullableType;
  }
}

final class $MediaItem$DrmConfiguration$Builder$Type extends jni$_.JObjType<MediaItem$DrmConfiguration$Builder> {
  @jni$_.internal
  const $MediaItem$DrmConfiguration$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$DrmConfiguration$Builder fromReference(jni$_.JReference reference) =>
      MediaItem$DrmConfiguration$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$DrmConfiguration$Builder?> get nullableType =>
      const $MediaItem$DrmConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$DrmConfiguration$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$DrmConfiguration$Builder$Type) &&
        other is $MediaItem$DrmConfiguration$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$DrmConfiguration`
class MediaItem$DrmConfiguration extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$DrmConfiguration> $type;

  @jni$_.internal
  MediaItem$DrmConfiguration.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$DrmConfiguration');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$DrmConfiguration$NullableType();
  static const type = $MediaItem$DrmConfiguration$Type();
  static final _id_scheme = _class.instanceFieldId(
    r'scheme',
    r'Ljava/util/UUID;',
  );

  /// from: `public final java.util.UUID scheme`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get scheme => _id_scheme.get(this, const jni$_.JObjectNullableType());

  static final _id_uuid = _class.instanceFieldId(
    r'uuid',
    r'Ljava/util/UUID;',
  );

  /// from: `public final java.util.UUID uuid`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get uuid => _id_uuid.get(this, const jni$_.JObjectNullableType());

  static final _id_licenseUri = _class.instanceFieldId(
    r'licenseUri',
    r'Landroid/net/Uri;',
  );

  /// from: `public final android.net.Uri licenseUri`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get licenseUri => _id_licenseUri.get(this, const jni$_.JObjectNullableType());

  static final _id_requestHeaders = _class.instanceFieldId(
    r'requestHeaders',
    r'Lcom/google/common/collect/ImmutableMap;',
  );

  /// from: `public final com.google.common.collect.ImmutableMap<java.lang.String, java.lang.String> requestHeaders`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get requestHeaders => _id_requestHeaders.get(this, const jni$_.JObjectNullableType());

  static final _id_licenseRequestHeaders = _class.instanceFieldId(
    r'licenseRequestHeaders',
    r'Lcom/google/common/collect/ImmutableMap;',
  );

  /// from: `public final com.google.common.collect.ImmutableMap<java.lang.String, java.lang.String> licenseRequestHeaders`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get licenseRequestHeaders => _id_licenseRequestHeaders.get(this, const jni$_.JObjectNullableType());

  static final _id_multiSession = _class.instanceFieldId(
    r'multiSession',
    r'Z',
  );

  /// from: `public final boolean multiSession`
  bool get multiSession => _id_multiSession.get(this, const jni$_.jbooleanType());

  static final _id_playClearContentWithoutKey = _class.instanceFieldId(
    r'playClearContentWithoutKey',
    r'Z',
  );

  /// from: `public final boolean playClearContentWithoutKey`
  bool get playClearContentWithoutKey => _id_playClearContentWithoutKey.get(this, const jni$_.jbooleanType());

  static final _id_forceDefaultLicenseUri = _class.instanceFieldId(
    r'forceDefaultLicenseUri',
    r'Z',
  );

  /// from: `public final boolean forceDefaultLicenseUri`
  bool get forceDefaultLicenseUri => _id_forceDefaultLicenseUri.get(this, const jni$_.jbooleanType());

  static final _id_sessionForClearTypes = _class.instanceFieldId(
    r'sessionForClearTypes',
    r'Lcom/google/common/collect/ImmutableList;',
  );

  /// from: `public final com.google.common.collect.ImmutableList<java.lang.Integer> sessionForClearTypes`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get sessionForClearTypes => _id_sessionForClearTypes.get(this, const jni$_.JObjectNullableType());

  static final _id_forcedSessionTrackTypes = _class.instanceFieldId(
    r'forcedSessionTrackTypes',
    r'Lcom/google/common/collect/ImmutableList;',
  );

  /// from: `public final com.google.common.collect.ImmutableList<java.lang.Integer> forcedSessionTrackTypes`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get forcedSessionTrackTypes =>
      _id_forcedSessionTrackTypes.get(this, const jni$_.JObjectNullableType());

  static final _id_getKeySetId = _class.instanceMethodId(
    r'getKeySetId',
    r'()[B',
  );

  static final _getKeySetId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public byte[] getKeySetId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? getKeySetId() {
    return _getKeySetId(
      reference.pointer,
      _id_getKeySetId as jni$_.JMethodIDPtr,
    ).object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaItem$DrmConfiguration$Builder;',
  );

  static final _buildUpon =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$DrmConfiguration$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration$Builder? buildUpon() {
    return _buildUpon(
      reference.pointer,
      _id_buildUpon as jni$_.JMethodIDPtr,
    ).object<MediaItem$DrmConfiguration$Builder?>(const $MediaItem$DrmConfiguration$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr, _$object.pointer).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr).integer;
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$DrmConfiguration;',
  );

  static final _fromBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public androidx.media3.common.MediaItem$DrmConfiguration fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$DrmConfiguration? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(
      _class.reference.pointer,
      _id_fromBundle as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).object<MediaItem$DrmConfiguration?>(const $MediaItem$DrmConfiguration$NullableType());
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(
      reference.pointer,
      _id_toBundle as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $MediaItem$DrmConfiguration$NullableType extends jni$_.JObjType<MediaItem$DrmConfiguration?> {
  @jni$_.internal
  const $MediaItem$DrmConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$DrmConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$DrmConfiguration? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$DrmConfiguration.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$DrmConfiguration?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$DrmConfiguration$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$DrmConfiguration$NullableType) &&
        other is $MediaItem$DrmConfiguration$NullableType;
  }
}

final class $MediaItem$DrmConfiguration$Type extends jni$_.JObjType<MediaItem$DrmConfiguration> {
  @jni$_.internal
  const $MediaItem$DrmConfiguration$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$DrmConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$DrmConfiguration fromReference(jni$_.JReference reference) => MediaItem$DrmConfiguration.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$DrmConfiguration?> get nullableType => const $MediaItem$DrmConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$DrmConfiguration$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$DrmConfiguration$Type) && other is $MediaItem$DrmConfiguration$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$LiveConfiguration$Builder`
class MediaItem$LiveConfiguration$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$LiveConfiguration$Builder> $type;

  @jni$_.internal
  MediaItem$LiveConfiguration$Builder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$LiveConfiguration$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$LiveConfiguration$Builder$NullableType();
  static const type = $MediaItem$LiveConfiguration$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$LiveConfiguration$Builder() {
    return MediaItem$LiveConfiguration$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_setTargetOffsetMs = _class.instanceMethodId(
    r'setTargetOffsetMs',
    r'(J)Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;',
  );

  static final _setTargetOffsetMs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$LiveConfiguration$Builder setTargetOffsetMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration$Builder? setTargetOffsetMs(
    int j,
  ) {
    return _setTargetOffsetMs(
      reference.pointer,
      _id_setTargetOffsetMs as jni$_.JMethodIDPtr,
      j,
    ).object<MediaItem$LiveConfiguration$Builder?>(const $MediaItem$LiveConfiguration$Builder$NullableType());
  }

  static final _id_setMinOffsetMs = _class.instanceMethodId(
    r'setMinOffsetMs',
    r'(J)Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;',
  );

  static final _setMinOffsetMs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$LiveConfiguration$Builder setMinOffsetMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration$Builder? setMinOffsetMs(
    int j,
  ) {
    return _setMinOffsetMs(
      reference.pointer,
      _id_setMinOffsetMs as jni$_.JMethodIDPtr,
      j,
    ).object<MediaItem$LiveConfiguration$Builder?>(const $MediaItem$LiveConfiguration$Builder$NullableType());
  }

  static final _id_setMaxOffsetMs = _class.instanceMethodId(
    r'setMaxOffsetMs',
    r'(J)Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;',
  );

  static final _setMaxOffsetMs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$LiveConfiguration$Builder setMaxOffsetMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration$Builder? setMaxOffsetMs(
    int j,
  ) {
    return _setMaxOffsetMs(
      reference.pointer,
      _id_setMaxOffsetMs as jni$_.JMethodIDPtr,
      j,
    ).object<MediaItem$LiveConfiguration$Builder?>(const $MediaItem$LiveConfiguration$Builder$NullableType());
  }

  static final _id_setMinPlaybackSpeed = _class.instanceMethodId(
    r'setMinPlaybackSpeed',
    r'(F)Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;',
  );

  static final _setMinPlaybackSpeed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Double,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `public androidx.media3.common.MediaItem$LiveConfiguration$Builder setMinPlaybackSpeed(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration$Builder? setMinPlaybackSpeed(
    double f,
  ) {
    return _setMinPlaybackSpeed(
      reference.pointer,
      _id_setMinPlaybackSpeed as jni$_.JMethodIDPtr,
      f,
    ).object<MediaItem$LiveConfiguration$Builder?>(const $MediaItem$LiveConfiguration$Builder$NullableType());
  }

  static final _id_setMaxPlaybackSpeed = _class.instanceMethodId(
    r'setMaxPlaybackSpeed',
    r'(F)Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;',
  );

  static final _setMaxPlaybackSpeed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Double,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `public androidx.media3.common.MediaItem$LiveConfiguration$Builder setMaxPlaybackSpeed(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration$Builder? setMaxPlaybackSpeed(
    double f,
  ) {
    return _setMaxPlaybackSpeed(
      reference.pointer,
      _id_setMaxPlaybackSpeed as jni$_.JMethodIDPtr,
      f,
    ).object<MediaItem$LiveConfiguration$Builder?>(const $MediaItem$LiveConfiguration$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaItem$LiveConfiguration;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$LiveConfiguration build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<MediaItem$LiveConfiguration?>(const $MediaItem$LiveConfiguration$NullableType());
  }
}

final class $MediaItem$LiveConfiguration$Builder$NullableType
    extends jni$_.JObjType<MediaItem$LiveConfiguration$Builder?> {
  @jni$_.internal
  const $MediaItem$LiveConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$LiveConfiguration$Builder? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$LiveConfiguration$Builder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$LiveConfiguration$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$LiveConfiguration$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$LiveConfiguration$Builder$NullableType) &&
        other is $MediaItem$LiveConfiguration$Builder$NullableType;
  }
}

final class $MediaItem$LiveConfiguration$Builder$Type extends jni$_.JObjType<MediaItem$LiveConfiguration$Builder> {
  @jni$_.internal
  const $MediaItem$LiveConfiguration$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$LiveConfiguration$Builder fromReference(jni$_.JReference reference) =>
      MediaItem$LiveConfiguration$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$LiveConfiguration$Builder?> get nullableType =>
      const $MediaItem$LiveConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$LiveConfiguration$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$LiveConfiguration$Builder$Type) &&
        other is $MediaItem$LiveConfiguration$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$LiveConfiguration`
class MediaItem$LiveConfiguration extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$LiveConfiguration> $type;

  @jni$_.internal
  MediaItem$LiveConfiguration.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$LiveConfiguration');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$LiveConfiguration$NullableType();
  static const type = $MediaItem$LiveConfiguration$Type();
  static final _id_UNSET = _class.staticFieldId(
    r'UNSET',
    r'Landroidx/media3/common/MediaItem$LiveConfiguration;',
  );

  /// from: `static public final androidx.media3.common.MediaItem$LiveConfiguration UNSET`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$LiveConfiguration? get UNSET =>
      _id_UNSET.get(_class, const $MediaItem$LiveConfiguration$NullableType());

  static final _id_targetOffsetMs = _class.instanceFieldId(
    r'targetOffsetMs',
    r'J',
  );

  /// from: `public final long targetOffsetMs`
  int get targetOffsetMs => _id_targetOffsetMs.get(this, const jni$_.jlongType());

  static final _id_minOffsetMs = _class.instanceFieldId(
    r'minOffsetMs',
    r'J',
  );

  /// from: `public final long minOffsetMs`
  int get minOffsetMs => _id_minOffsetMs.get(this, const jni$_.jlongType());

  static final _id_maxOffsetMs = _class.instanceFieldId(
    r'maxOffsetMs',
    r'J',
  );

  /// from: `public final long maxOffsetMs`
  int get maxOffsetMs => _id_maxOffsetMs.get(this, const jni$_.jlongType());

  static final _id_minPlaybackSpeed = _class.instanceFieldId(
    r'minPlaybackSpeed',
    r'F',
  );

  /// from: `public final float minPlaybackSpeed`
  double get minPlaybackSpeed => _id_minPlaybackSpeed.get(this, const jni$_.jfloatType());

  static final _id_maxPlaybackSpeed = _class.instanceFieldId(
    r'maxPlaybackSpeed',
    r'F',
  );

  /// from: `public final float maxPlaybackSpeed`
  double get maxPlaybackSpeed => _id_maxPlaybackSpeed.get(this, const jni$_.jfloatType());

  static final _id_new$ = _class.constructorId(
    r'(JJJFF)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int64, jni$_.Int64, jni$_.Int64, jni$_.Double, jni$_.Double)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int, int, double, double)
          >();

  /// from: `public void <init>(long j, long j1, long j2, float f, float f1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$LiveConfiguration(
    int j,
    int j1,
    int j2,
    double f,
    double f1,
  ) {
    return MediaItem$LiveConfiguration.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr, j, j1, j2, f, f1).reference,
    );
  }

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaItem$LiveConfiguration$Builder;',
  );

  static final _buildUpon =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$LiveConfiguration$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration$Builder? buildUpon() {
    return _buildUpon(
      reference.pointer,
      _id_buildUpon as jni$_.JMethodIDPtr,
    ).object<MediaItem$LiveConfiguration$Builder?>(const $MediaItem$LiveConfiguration$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr, _$object.pointer).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr).integer;
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(
      reference.pointer,
      _id_toBundle as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$LiveConfiguration;',
  );

  static final _fromBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public androidx.media3.common.MediaItem$LiveConfiguration fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$LiveConfiguration? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(
      _class.reference.pointer,
      _id_fromBundle as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).object<MediaItem$LiveConfiguration?>(const $MediaItem$LiveConfiguration$NullableType());
  }
}

final class $MediaItem$LiveConfiguration$NullableType extends jni$_.JObjType<MediaItem$LiveConfiguration?> {
  @jni$_.internal
  const $MediaItem$LiveConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$LiveConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$LiveConfiguration? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$LiveConfiguration.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$LiveConfiguration?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$LiveConfiguration$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$LiveConfiguration$NullableType) &&
        other is $MediaItem$LiveConfiguration$NullableType;
  }
}

final class $MediaItem$LiveConfiguration$Type extends jni$_.JObjType<MediaItem$LiveConfiguration> {
  @jni$_.internal
  const $MediaItem$LiveConfiguration$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$LiveConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$LiveConfiguration fromReference(jni$_.JReference reference) => MediaItem$LiveConfiguration.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$LiveConfiguration?> get nullableType => const $MediaItem$LiveConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$LiveConfiguration$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$LiveConfiguration$Type) && other is $MediaItem$LiveConfiguration$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$LocalConfiguration`
class MediaItem$LocalConfiguration extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$LocalConfiguration> $type;

  @jni$_.internal
  MediaItem$LocalConfiguration.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$LocalConfiguration');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$LocalConfiguration$NullableType();
  static const type = $MediaItem$LocalConfiguration$Type();
  static final _id_uri = _class.instanceFieldId(
    r'uri',
    r'Landroid/net/Uri;',
  );

  /// from: `public final android.net.Uri uri`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get uri => _id_uri.get(this, const jni$_.JObjectNullableType());

  static final _id_mimeType = _class.instanceFieldId(
    r'mimeType',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String mimeType`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get mimeType => _id_mimeType.get(this, const jni$_.JStringNullableType());

  static final _id_drmConfiguration = _class.instanceFieldId(
    r'drmConfiguration',
    r'Landroidx/media3/common/MediaItem$DrmConfiguration;',
  );

  /// from: `public final androidx.media3.common.MediaItem$DrmConfiguration drmConfiguration`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$DrmConfiguration? get drmConfiguration =>
      _id_drmConfiguration.get(this, const $MediaItem$DrmConfiguration$NullableType());

  static final _id_adsConfiguration = _class.instanceFieldId(
    r'adsConfiguration',
    r'Landroidx/media3/common/MediaItem$AdsConfiguration;',
  );

  /// from: `public final androidx.media3.common.MediaItem$AdsConfiguration adsConfiguration`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$AdsConfiguration? get adsConfiguration =>
      _id_adsConfiguration.get(this, const $MediaItem$AdsConfiguration$NullableType());

  static final _id_streamKeys = _class.instanceFieldId(
    r'streamKeys',
    r'Ljava/util/List;',
  );

  /// from: `public final java.util.List<androidx.media3.common.StreamKey> streamKeys`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<jni$_.JObject?>? get streamKeys =>
      _id_streamKeys.get(this, const jni$_.JListNullableType<jni$_.JObject?>(jni$_.JObjectNullableType()));

  static final _id_customCacheKey = _class.instanceFieldId(
    r'customCacheKey',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String customCacheKey`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get customCacheKey => _id_customCacheKey.get(this, const jni$_.JStringNullableType());

  static final _id_subtitleConfigurations = _class.instanceFieldId(
    r'subtitleConfigurations',
    r'Lcom/google/common/collect/ImmutableList;',
  );

  /// from: `public final com.google.common.collect.ImmutableList<androidx.media3.common.MediaItem$SubtitleConfiguration> subtitleConfigurations`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get subtitleConfigurations => _id_subtitleConfigurations.get(this, const jni$_.JObjectNullableType());

  static final _id_subtitles = _class.instanceFieldId(
    r'subtitles',
    r'Ljava/util/List;',
  );

  /// from: `public final java.util.List<androidx.media3.common.MediaItem$Subtitle> subtitles`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<MediaItem$Subtitle?>? get subtitles =>
      _id_subtitles.get(this, const jni$_.JListNullableType<MediaItem$Subtitle?>($MediaItem$Subtitle$NullableType()));

  static final _id_tag = _class.instanceFieldId(
    r'tag',
    r'Ljava/lang/Object;',
  );

  /// from: `public final java.lang.Object tag`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get tag => _id_tag.get(this, const jni$_.JObjectNullableType());

  static final _id_imageDurationMs = _class.instanceFieldId(
    r'imageDurationMs',
    r'J',
  );

  /// from: `public final long imageDurationMs`
  int get imageDurationMs => _id_imageDurationMs.get(this, const jni$_.jlongType());

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr, _$object.pointer).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr).integer;
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(
      reference.pointer,
      _id_toBundle as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$LocalConfiguration;',
  );

  static final _fromBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public androidx.media3.common.MediaItem$LocalConfiguration fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$LocalConfiguration? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(
      _class.reference.pointer,
      _id_fromBundle as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).object<MediaItem$LocalConfiguration?>(const $MediaItem$LocalConfiguration$NullableType());
  }
}

final class $MediaItem$LocalConfiguration$NullableType extends jni$_.JObjType<MediaItem$LocalConfiguration?> {
  @jni$_.internal
  const $MediaItem$LocalConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$LocalConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$LocalConfiguration? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$LocalConfiguration.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$LocalConfiguration?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$LocalConfiguration$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$LocalConfiguration$NullableType) &&
        other is $MediaItem$LocalConfiguration$NullableType;
  }
}

final class $MediaItem$LocalConfiguration$Type extends jni$_.JObjType<MediaItem$LocalConfiguration> {
  @jni$_.internal
  const $MediaItem$LocalConfiguration$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$LocalConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$LocalConfiguration fromReference(jni$_.JReference reference) => MediaItem$LocalConfiguration.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$LocalConfiguration?> get nullableType => const $MediaItem$LocalConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$LocalConfiguration$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$LocalConfiguration$Type) && other is $MediaItem$LocalConfiguration$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$RequestMetadata$Builder`
class MediaItem$RequestMetadata$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$RequestMetadata$Builder> $type;

  @jni$_.internal
  MediaItem$RequestMetadata$Builder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$RequestMetadata$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$RequestMetadata$Builder$NullableType();
  static const type = $MediaItem$RequestMetadata$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$RequestMetadata$Builder() {
    return MediaItem$RequestMetadata$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_setMediaUri = _class.instanceMethodId(
    r'setMediaUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem$RequestMetadata$Builder;',
  );

  static final _setMediaUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$RequestMetadata$Builder setMediaUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$RequestMetadata$Builder? setMediaUri(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setMediaUri(
      reference.pointer,
      _id_setMediaUri as jni$_.JMethodIDPtr,
      _$uri.pointer,
    ).object<MediaItem$RequestMetadata$Builder?>(const $MediaItem$RequestMetadata$Builder$NullableType());
  }

  static final _id_setSearchQuery = _class.instanceMethodId(
    r'setSearchQuery',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$RequestMetadata$Builder;',
  );

  static final _setSearchQuery =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$RequestMetadata$Builder setSearchQuery(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$RequestMetadata$Builder? setSearchQuery(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setSearchQuery(
      reference.pointer,
      _id_setSearchQuery as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<MediaItem$RequestMetadata$Builder?>(const $MediaItem$RequestMetadata$Builder$NullableType());
  }

  static final _id_setExtras = _class.instanceMethodId(
    r'setExtras',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$RequestMetadata$Builder;',
  );

  static final _setExtras =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$RequestMetadata$Builder setExtras(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$RequestMetadata$Builder? setExtras(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _setExtras(
      reference.pointer,
      _id_setExtras as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).object<MediaItem$RequestMetadata$Builder?>(const $MediaItem$RequestMetadata$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaItem$RequestMetadata;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$RequestMetadata build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$RequestMetadata? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<MediaItem$RequestMetadata?>(const $MediaItem$RequestMetadata$NullableType());
  }
}

final class $MediaItem$RequestMetadata$Builder$NullableType extends jni$_.JObjType<MediaItem$RequestMetadata$Builder?> {
  @jni$_.internal
  const $MediaItem$RequestMetadata$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$RequestMetadata$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$RequestMetadata$Builder? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$RequestMetadata$Builder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$RequestMetadata$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$RequestMetadata$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$RequestMetadata$Builder$NullableType) &&
        other is $MediaItem$RequestMetadata$Builder$NullableType;
  }
}

final class $MediaItem$RequestMetadata$Builder$Type extends jni$_.JObjType<MediaItem$RequestMetadata$Builder> {
  @jni$_.internal
  const $MediaItem$RequestMetadata$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$RequestMetadata$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$RequestMetadata$Builder fromReference(jni$_.JReference reference) =>
      MediaItem$RequestMetadata$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$RequestMetadata$Builder?> get nullableType =>
      const $MediaItem$RequestMetadata$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$RequestMetadata$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$RequestMetadata$Builder$Type) &&
        other is $MediaItem$RequestMetadata$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$RequestMetadata`
class MediaItem$RequestMetadata extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$RequestMetadata> $type;

  @jni$_.internal
  MediaItem$RequestMetadata.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$RequestMetadata');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$RequestMetadata$NullableType();
  static const type = $MediaItem$RequestMetadata$Type();
  static final _id_EMPTY = _class.staticFieldId(
    r'EMPTY',
    r'Landroidx/media3/common/MediaItem$RequestMetadata;',
  );

  /// from: `static public final androidx.media3.common.MediaItem$RequestMetadata EMPTY`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$RequestMetadata? get EMPTY => _id_EMPTY.get(_class, const $MediaItem$RequestMetadata$NullableType());

  static final _id_mediaUri = _class.instanceFieldId(
    r'mediaUri',
    r'Landroid/net/Uri;',
  );

  /// from: `public final android.net.Uri mediaUri`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get mediaUri => _id_mediaUri.get(this, const jni$_.JObjectNullableType());

  static final _id_searchQuery = _class.instanceFieldId(
    r'searchQuery',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String searchQuery`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get searchQuery => _id_searchQuery.get(this, const jni$_.JStringNullableType());

  static final _id_extras = _class.instanceFieldId(
    r'extras',
    r'Landroid/os/Bundle;',
  );

  /// from: `public final android.os.Bundle extras`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get extras => _id_extras.get(this, const jni$_.JObjectNullableType());

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaItem$RequestMetadata$Builder;',
  );

  static final _buildUpon =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$RequestMetadata$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$RequestMetadata$Builder? buildUpon() {
    return _buildUpon(
      reference.pointer,
      _id_buildUpon as jni$_.JMethodIDPtr,
    ).object<MediaItem$RequestMetadata$Builder?>(const $MediaItem$RequestMetadata$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr, _$object.pointer).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr).integer;
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(
      reference.pointer,
      _id_toBundle as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$RequestMetadata;',
  );

  static final _fromBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public androidx.media3.common.MediaItem$RequestMetadata fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$RequestMetadata? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(
      _class.reference.pointer,
      _id_fromBundle as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).object<MediaItem$RequestMetadata?>(const $MediaItem$RequestMetadata$NullableType());
  }
}

final class $MediaItem$RequestMetadata$NullableType extends jni$_.JObjType<MediaItem$RequestMetadata?> {
  @jni$_.internal
  const $MediaItem$RequestMetadata$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$RequestMetadata;';

  @jni$_.internal
  @core$_.override
  MediaItem$RequestMetadata? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$RequestMetadata.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$RequestMetadata?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$RequestMetadata$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$RequestMetadata$NullableType) &&
        other is $MediaItem$RequestMetadata$NullableType;
  }
}

final class $MediaItem$RequestMetadata$Type extends jni$_.JObjType<MediaItem$RequestMetadata> {
  @jni$_.internal
  const $MediaItem$RequestMetadata$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$RequestMetadata;';

  @jni$_.internal
  @core$_.override
  MediaItem$RequestMetadata fromReference(jni$_.JReference reference) => MediaItem$RequestMetadata.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$RequestMetadata?> get nullableType => const $MediaItem$RequestMetadata$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$RequestMetadata$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$RequestMetadata$Type) && other is $MediaItem$RequestMetadata$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$Subtitle`
class MediaItem$Subtitle extends MediaItem$SubtitleConfiguration {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$Subtitle> $type;

  @jni$_.internal
  MediaItem$Subtitle.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$Subtitle');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$Subtitle$NullableType();
  static const type = $MediaItem$Subtitle$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.net.Uri uri, java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$Subtitle(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return MediaItem$Subtitle.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$uri.pointer,
        _$string.pointer,
        _$string1.pointer,
      ).reference,
    );
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;I)V',
  );

  static final _new$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void <init>(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$Subtitle.new$1(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return MediaItem$Subtitle.fromReference(
      _new$1(
        _class.reference.pointer,
        _id_new$1 as jni$_.JMethodIDPtr,
        _$uri.pointer,
        _$string.pointer,
        _$string1.pointer,
        i,
      ).reference,
    );
  }

  static final _id_new$2 = _class.constructorId(
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V',
  );

  static final _new$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, java.lang.String string2)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$Subtitle.new$2(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
    int i1,
    jni$_.JString? string2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    return MediaItem$Subtitle.fromReference(
      _new$2(
        _class.reference.pointer,
        _id_new$2 as jni$_.JMethodIDPtr,
        _$uri.pointer,
        _$string.pointer,
        _$string1.pointer,
        i,
        i1,
        _$string2.pointer,
      ).reference,
    );
  }
}

final class $MediaItem$Subtitle$NullableType extends jni$_.JObjType<MediaItem$Subtitle?> {
  @jni$_.internal
  const $MediaItem$Subtitle$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$Subtitle;';

  @jni$_.internal
  @core$_.override
  MediaItem$Subtitle? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$Subtitle.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $MediaItem$SubtitleConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$Subtitle?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($MediaItem$Subtitle$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$Subtitle$NullableType) && other is $MediaItem$Subtitle$NullableType;
  }
}

final class $MediaItem$Subtitle$Type extends jni$_.JObjType<MediaItem$Subtitle> {
  @jni$_.internal
  const $MediaItem$Subtitle$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$Subtitle;';

  @jni$_.internal
  @core$_.override
  MediaItem$Subtitle fromReference(jni$_.JReference reference) => MediaItem$Subtitle.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $MediaItem$SubtitleConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$Subtitle?> get nullableType => const $MediaItem$Subtitle$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($MediaItem$Subtitle$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$Subtitle$Type) && other is $MediaItem$Subtitle$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$SubtitleConfiguration$Builder`
class MediaItem$SubtitleConfiguration$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$SubtitleConfiguration$Builder> $type;

  @jni$_.internal
  MediaItem$SubtitleConfiguration$Builder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$SubtitleConfiguration$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$SubtitleConfiguration$Builder$NullableType();
  static const type = $MediaItem$SubtitleConfiguration$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/net/Uri;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void <init>(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaItem$SubtitleConfiguration$Builder(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return MediaItem$SubtitleConfiguration$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr, _$uri.pointer).reference,
    );
  }

  static final _id_setUri = _class.instanceMethodId(
    r'setUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _setUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder setUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? setUri(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setUri(
      reference.pointer,
      _id_setUri as jni$_.JMethodIDPtr,
      _$uri.pointer,
    ).object<MediaItem$SubtitleConfiguration$Builder?>(const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_setMimeType = _class.instanceMethodId(
    r'setMimeType',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _setMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder setMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? setMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setMimeType(
      reference.pointer,
      _id_setMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<MediaItem$SubtitleConfiguration$Builder?>(const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_setLanguage = _class.instanceMethodId(
    r'setLanguage',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _setLanguage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder setLanguage(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? setLanguage(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setLanguage(
      reference.pointer,
      _id_setLanguage as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<MediaItem$SubtitleConfiguration$Builder?>(const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_setSelectionFlags = _class.instanceMethodId(
    r'setSelectionFlags',
    r'(I)Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _setSelectionFlags =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder setSelectionFlags(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? setSelectionFlags(
    int i,
  ) {
    return _setSelectionFlags(
      reference.pointer,
      _id_setSelectionFlags as jni$_.JMethodIDPtr,
      i,
    ).object<MediaItem$SubtitleConfiguration$Builder?>(const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_setRoleFlags = _class.instanceMethodId(
    r'setRoleFlags',
    r'(I)Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _setRoleFlags =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder setRoleFlags(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? setRoleFlags(
    int i,
  ) {
    return _setRoleFlags(
      reference.pointer,
      _id_setRoleFlags as jni$_.JMethodIDPtr,
      i,
    ).object<MediaItem$SubtitleConfiguration$Builder?>(const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_setLabel = _class.instanceMethodId(
    r'setLabel',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _setLabel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder setLabel(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? setLabel(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setLabel(
      reference.pointer,
      _id_setLabel as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<MediaItem$SubtitleConfiguration$Builder?>(const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_setId = _class.instanceMethodId(
    r'setId',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _setId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder setId(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? setId(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setId(
      reference.pointer,
      _id_setId as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<MediaItem$SubtitleConfiguration$Builder?>(const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaItem$SubtitleConfiguration;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<MediaItem$SubtitleConfiguration?>(const $MediaItem$SubtitleConfiguration$NullableType());
  }
}

final class $MediaItem$SubtitleConfiguration$Builder$NullableType
    extends jni$_.JObjType<MediaItem$SubtitleConfiguration$Builder?> {
  @jni$_.internal
  const $MediaItem$SubtitleConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$SubtitleConfiguration$Builder? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$SubtitleConfiguration$Builder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$SubtitleConfiguration$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$SubtitleConfiguration$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$SubtitleConfiguration$Builder$NullableType) &&
        other is $MediaItem$SubtitleConfiguration$Builder$NullableType;
  }
}

final class $MediaItem$SubtitleConfiguration$Builder$Type
    extends jni$_.JObjType<MediaItem$SubtitleConfiguration$Builder> {
  @jni$_.internal
  const $MediaItem$SubtitleConfiguration$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;';

  @jni$_.internal
  @core$_.override
  MediaItem$SubtitleConfiguration$Builder fromReference(jni$_.JReference reference) =>
      MediaItem$SubtitleConfiguration$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$SubtitleConfiguration$Builder?> get nullableType =>
      const $MediaItem$SubtitleConfiguration$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$SubtitleConfiguration$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$SubtitleConfiguration$Builder$Type) &&
        other is $MediaItem$SubtitleConfiguration$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaItem$SubtitleConfiguration`
class MediaItem$SubtitleConfiguration extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem$SubtitleConfiguration> $type;

  @jni$_.internal
  MediaItem$SubtitleConfiguration.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem$SubtitleConfiguration');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$SubtitleConfiguration$NullableType();
  static const type = $MediaItem$SubtitleConfiguration$Type();
  static final _id_uri = _class.instanceFieldId(
    r'uri',
    r'Landroid/net/Uri;',
  );

  /// from: `public final android.net.Uri uri`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get uri => _id_uri.get(this, const jni$_.JObjectNullableType());

  static final _id_mimeType = _class.instanceFieldId(
    r'mimeType',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String mimeType`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get mimeType => _id_mimeType.get(this, const jni$_.JStringNullableType());

  static final _id_language = _class.instanceFieldId(
    r'language',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String language`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get language => _id_language.get(this, const jni$_.JStringNullableType());

  static final _id_selectionFlags = _class.instanceFieldId(
    r'selectionFlags',
    r'I',
  );

  /// from: `public final int selectionFlags`
  int get selectionFlags => _id_selectionFlags.get(this, const jni$_.jintType());

  static final _id_roleFlags = _class.instanceFieldId(
    r'roleFlags',
    r'I',
  );

  /// from: `public final int roleFlags`
  int get roleFlags => _id_roleFlags.get(this, const jni$_.jintType());

  static final _id_label = _class.instanceFieldId(
    r'label',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String label`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get label => _id_label.get(this, const jni$_.JStringNullableType());

  static final _id_id = _class.instanceFieldId(
    r'id',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String id`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get id => _id_id.get(this, const jni$_.JStringNullableType());

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaItem$SubtitleConfiguration$Builder;',
  );

  static final _buildUpon =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$SubtitleConfiguration$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$SubtitleConfiguration$Builder? buildUpon() {
    return _buildUpon(
      reference.pointer,
      _id_buildUpon as jni$_.JMethodIDPtr,
    ).object<MediaItem$SubtitleConfiguration$Builder?>(const $MediaItem$SubtitleConfiguration$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr, _$object.pointer).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr).integer;
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem$SubtitleConfiguration;',
  );

  static final _fromBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public androidx.media3.common.MediaItem$SubtitleConfiguration fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem$SubtitleConfiguration? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(
      _class.reference.pointer,
      _id_fromBundle as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).object<MediaItem$SubtitleConfiguration?>(const $MediaItem$SubtitleConfiguration$NullableType());
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(
      reference.pointer,
      _id_toBundle as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $MediaItem$SubtitleConfiguration$NullableType extends jni$_.JObjType<MediaItem$SubtitleConfiguration?> {
  @jni$_.internal
  const $MediaItem$SubtitleConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$SubtitleConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$SubtitleConfiguration? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem$SubtitleConfiguration.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$SubtitleConfiguration?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$SubtitleConfiguration$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$SubtitleConfiguration$NullableType) &&
        other is $MediaItem$SubtitleConfiguration$NullableType;
  }
}

final class $MediaItem$SubtitleConfiguration$Type extends jni$_.JObjType<MediaItem$SubtitleConfiguration> {
  @jni$_.internal
  const $MediaItem$SubtitleConfiguration$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem$SubtitleConfiguration;';

  @jni$_.internal
  @core$_.override
  MediaItem$SubtitleConfiguration fromReference(jni$_.JReference reference) =>
      MediaItem$SubtitleConfiguration.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem$SubtitleConfiguration?> get nullableType =>
      const $MediaItem$SubtitleConfiguration$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$SubtitleConfiguration$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$SubtitleConfiguration$Type) &&
        other is $MediaItem$SubtitleConfiguration$Type;
  }
}

/// from: `androidx.media3.common.MediaItem`
class MediaItem extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaItem> $type;

  @jni$_.internal
  MediaItem.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaItem');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaItem$NullableType();
  static const type = $MediaItem$Type();
  static final _id_DEFAULT_MEDIA_ID = _class.staticFieldId(
    r'DEFAULT_MEDIA_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEFAULT_MEDIA_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEFAULT_MEDIA_ID => _id_DEFAULT_MEDIA_ID.get(_class, const jni$_.JStringNullableType());

  static final _id_EMPTY = _class.staticFieldId(
    r'EMPTY',
    r'Landroidx/media3/common/MediaItem;',
  );

  /// from: `static public final androidx.media3.common.MediaItem EMPTY`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem? get EMPTY => _id_EMPTY.get(_class, const $MediaItem$NullableType());

  static final _id_mediaId = _class.instanceFieldId(
    r'mediaId',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String mediaId`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get mediaId => _id_mediaId.get(this, const jni$_.JStringNullableType());

  static final _id_localConfiguration = _class.instanceFieldId(
    r'localConfiguration',
    r'Landroidx/media3/common/MediaItem$LocalConfiguration;',
  );

  /// from: `public final androidx.media3.common.MediaItem$LocalConfiguration localConfiguration`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LocalConfiguration? get localConfiguration =>
      _id_localConfiguration.get(this, const $MediaItem$LocalConfiguration$NullableType());

  static final _id_playbackProperties = _class.instanceFieldId(
    r'playbackProperties',
    r'Landroidx/media3/common/MediaItem$LocalConfiguration;',
  );

  /// from: `public final androidx.media3.common.MediaItem$LocalConfiguration playbackProperties`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LocalConfiguration? get playbackProperties =>
      _id_playbackProperties.get(this, const $MediaItem$LocalConfiguration$NullableType());

  static final _id_liveConfiguration = _class.instanceFieldId(
    r'liveConfiguration',
    r'Landroidx/media3/common/MediaItem$LiveConfiguration;',
  );

  /// from: `public final androidx.media3.common.MediaItem$LiveConfiguration liveConfiguration`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$LiveConfiguration? get liveConfiguration =>
      _id_liveConfiguration.get(this, const $MediaItem$LiveConfiguration$NullableType());

  static final _id_mediaMetadata = _class.instanceFieldId(
    r'mediaMetadata',
    r'Landroidx/media3/common/MediaMetadata;',
  );

  /// from: `public final androidx.media3.common.MediaMetadata mediaMetadata`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata? get mediaMetadata => _id_mediaMetadata.get(this, const $MediaMetadata$NullableType());

  static final _id_clippingConfiguration = _class.instanceFieldId(
    r'clippingConfiguration',
    r'Landroidx/media3/common/MediaItem$ClippingConfiguration;',
  );

  /// from: `public final androidx.media3.common.MediaItem$ClippingConfiguration clippingConfiguration`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingConfiguration? get clippingConfiguration =>
      _id_clippingConfiguration.get(this, const $MediaItem$ClippingConfiguration$NullableType());

  static final _id_clippingProperties = _class.instanceFieldId(
    r'clippingProperties',
    r'Landroidx/media3/common/MediaItem$ClippingProperties;',
  );

  /// from: `public final androidx.media3.common.MediaItem$ClippingProperties clippingProperties`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$ClippingProperties? get clippingProperties =>
      _id_clippingProperties.get(this, const $MediaItem$ClippingProperties$NullableType());

  static final _id_requestMetadata = _class.instanceFieldId(
    r'requestMetadata',
    r'Landroidx/media3/common/MediaItem$RequestMetadata;',
  );

  /// from: `public final androidx.media3.common.MediaItem$RequestMetadata requestMetadata`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$RequestMetadata? get requestMetadata =>
      _id_requestMetadata.get(this, const $MediaItem$RequestMetadata$NullableType());

  static final _id_fromUri = _class.staticMethodId(
    r'fromUri',
    r'(Ljava/lang/String;)Landroidx/media3/common/MediaItem;',
  );

  static final _fromUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public androidx.media3.common.MediaItem fromUri(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem? fromUri(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _fromUri(
      _class.reference.pointer,
      _id_fromUri as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<MediaItem?>(const $MediaItem$NullableType());
  }

  static final _id_fromUri$1 = _class.staticMethodId(
    r'fromUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaItem;',
  );

  static final _fromUri$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public androidx.media3.common.MediaItem fromUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem? fromUri$1(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _fromUri$1(
      _class.reference.pointer,
      _id_fromUri$1 as jni$_.JMethodIDPtr,
      _$uri.pointer,
    ).object<MediaItem?>(const $MediaItem$NullableType());
  }

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaItem$Builder;',
  );

  static final _buildUpon =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaItem$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem$Builder? buildUpon() {
    return _buildUpon(
      reference.pointer,
      _id_buildUpon as jni$_.JMethodIDPtr,
    ).object<MediaItem$Builder?>(const $MediaItem$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr, _$object.pointer).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr).integer;
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(
      reference.pointer,
      _id_toBundle as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_toBundleIncludeLocalConfiguration = _class.instanceMethodId(
    r'toBundleIncludeLocalConfiguration',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundleIncludeLocalConfiguration =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.Bundle toBundleIncludeLocalConfiguration()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundleIncludeLocalConfiguration() {
    return _toBundleIncludeLocalConfiguration(
      reference.pointer,
      _id_toBundleIncludeLocalConfiguration as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaItem;',
  );

  static final _fromBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public androidx.media3.common.MediaItem fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaItem? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(
      _class.reference.pointer,
      _id_fromBundle as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).object<MediaItem?>(const $MediaItem$NullableType());
  }
}

final class $MediaItem$NullableType extends jni$_.JObjType<MediaItem?> {
  @jni$_.internal
  const $MediaItem$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem;';

  @jni$_.internal
  @core$_.override
  MediaItem? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaItem.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$NullableType) && other is $MediaItem$NullableType;
  }
}

final class $MediaItem$Type extends jni$_.JObjType<MediaItem> {
  @jni$_.internal
  const $MediaItem$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaItem;';

  @jni$_.internal
  @core$_.override
  MediaItem fromReference(jni$_.JReference reference) => MediaItem.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaItem?> get nullableType => const $MediaItem$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaItem$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaItem$Type) && other is $MediaItem$Type;
  }
}

/// from: `androidx.media3.common.MediaMetadata$Builder`
class MediaMetadata$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaMetadata$Builder> $type;

  @jni$_.internal
  MediaMetadata$Builder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaMetadata$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaMetadata$Builder$NullableType();
  static const type = $MediaMetadata$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory MediaMetadata$Builder() {
    return MediaMetadata$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_setTitle = _class.instanceMethodId(
    r'setTitle',
    r'(Ljava/lang/CharSequence;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setTitle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setTitle(java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setTitle(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _setTitle(
      reference.pointer,
      _id_setTitle as jni$_.JMethodIDPtr,
      _$charSequence.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setArtist = _class.instanceMethodId(
    r'setArtist',
    r'(Ljava/lang/CharSequence;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setArtist =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setArtist(java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setArtist(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _setArtist(
      reference.pointer,
      _id_setArtist as jni$_.JMethodIDPtr,
      _$charSequence.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setAlbumTitle = _class.instanceMethodId(
    r'setAlbumTitle',
    r'(Ljava/lang/CharSequence;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setAlbumTitle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setAlbumTitle(java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setAlbumTitle(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _setAlbumTitle(
      reference.pointer,
      _id_setAlbumTitle as jni$_.JMethodIDPtr,
      _$charSequence.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setAlbumArtist = _class.instanceMethodId(
    r'setAlbumArtist',
    r'(Ljava/lang/CharSequence;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setAlbumArtist =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setAlbumArtist(java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setAlbumArtist(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _setAlbumArtist(
      reference.pointer,
      _id_setAlbumArtist as jni$_.JMethodIDPtr,
      _$charSequence.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setDisplayTitle = _class.instanceMethodId(
    r'setDisplayTitle',
    r'(Ljava/lang/CharSequence;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setDisplayTitle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setDisplayTitle(java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setDisplayTitle(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _setDisplayTitle(
      reference.pointer,
      _id_setDisplayTitle as jni$_.JMethodIDPtr,
      _$charSequence.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setSubtitle = _class.instanceMethodId(
    r'setSubtitle',
    r'(Ljava/lang/CharSequence;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setSubtitle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setSubtitle(java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setSubtitle(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _setSubtitle(
      reference.pointer,
      _id_setSubtitle as jni$_.JMethodIDPtr,
      _$charSequence.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setDescription = _class.instanceMethodId(
    r'setDescription',
    r'(Ljava/lang/CharSequence;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setDescription =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setDescription(java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setDescription(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _setDescription(
      reference.pointer,
      _id_setDescription as jni$_.JMethodIDPtr,
      _$charSequence.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setDurationMs = _class.instanceMethodId(
    r'setDurationMs',
    r'(Ljava/lang/Long;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setDurationMs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setDurationMs(java.lang.Long long)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setDurationMs(
    jni$_.JLong? long,
  ) {
    final _$long = long?.reference ?? jni$_.jNullReference;
    return _setDurationMs(
      reference.pointer,
      _id_setDurationMs as jni$_.JMethodIDPtr,
      _$long.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setUserRating = _class.instanceMethodId(
    r'setUserRating',
    r'(Landroidx/media3/common/Rating;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setUserRating =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setUserRating(androidx.media3.common.Rating rating)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setUserRating(
    jni$_.JObject? rating,
  ) {
    final _$rating = rating?.reference ?? jni$_.jNullReference;
    return _setUserRating(
      reference.pointer,
      _id_setUserRating as jni$_.JMethodIDPtr,
      _$rating.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setOverallRating = _class.instanceMethodId(
    r'setOverallRating',
    r'(Landroidx/media3/common/Rating;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setOverallRating =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setOverallRating(androidx.media3.common.Rating rating)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setOverallRating(
    jni$_.JObject? rating,
  ) {
    final _$rating = rating?.reference ?? jni$_.jNullReference;
    return _setOverallRating(
      reference.pointer,
      _id_setOverallRating as jni$_.JMethodIDPtr,
      _$rating.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setArtworkData = _class.instanceMethodId(
    r'setArtworkData',
    r'([B)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setArtworkData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setArtworkData(byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setArtworkData(
    jni$_.JByteArray? bs,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _setArtworkData(
      reference.pointer,
      _id_setArtworkData as jni$_.JMethodIDPtr,
      _$bs.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setArtworkData$1 = _class.instanceMethodId(
    r'setArtworkData',
    r'([BLjava/lang/Integer;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setArtworkData$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setArtworkData(byte[] bs, java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setArtworkData$1(
    jni$_.JByteArray? bs,
    jni$_.JInteger? integer,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _setArtworkData$1(
      reference.pointer,
      _id_setArtworkData$1 as jni$_.JMethodIDPtr,
      _$bs.pointer,
      _$integer.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_maybeSetArtworkData = _class.instanceMethodId(
    r'maybeSetArtworkData',
    r'([BI)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _maybeSetArtworkData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder maybeSetArtworkData(byte[] bs, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? maybeSetArtworkData(
    jni$_.JByteArray? bs,
    int i,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _maybeSetArtworkData(
      reference.pointer,
      _id_maybeSetArtworkData as jni$_.JMethodIDPtr,
      _$bs.pointer,
      i,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setArtworkUri = _class.instanceMethodId(
    r'setArtworkUri',
    r'(Landroid/net/Uri;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setArtworkUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setArtworkUri(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setArtworkUri(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setArtworkUri(
      reference.pointer,
      _id_setArtworkUri as jni$_.JMethodIDPtr,
      _$uri.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setTrackNumber = _class.instanceMethodId(
    r'setTrackNumber',
    r'(Ljava/lang/Integer;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setTrackNumber =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setTrackNumber(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setTrackNumber(
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _setTrackNumber(
      reference.pointer,
      _id_setTrackNumber as jni$_.JMethodIDPtr,
      _$integer.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setTotalTrackCount = _class.instanceMethodId(
    r'setTotalTrackCount',
    r'(Ljava/lang/Integer;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setTotalTrackCount =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setTotalTrackCount(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setTotalTrackCount(
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _setTotalTrackCount(
      reference.pointer,
      _id_setTotalTrackCount as jni$_.JMethodIDPtr,
      _$integer.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setFolderType = _class.instanceMethodId(
    r'setFolderType',
    r'(Ljava/lang/Integer;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setFolderType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setFolderType(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setFolderType(
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _setFolderType(
      reference.pointer,
      _id_setFolderType as jni$_.JMethodIDPtr,
      _$integer.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setIsBrowsable = _class.instanceMethodId(
    r'setIsBrowsable',
    r'(Ljava/lang/Boolean;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setIsBrowsable =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setIsBrowsable(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setIsBrowsable(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _setIsBrowsable(
      reference.pointer,
      _id_setIsBrowsable as jni$_.JMethodIDPtr,
      _$boolean.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setIsPlayable = _class.instanceMethodId(
    r'setIsPlayable',
    r'(Ljava/lang/Boolean;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setIsPlayable =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setIsPlayable(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setIsPlayable(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _setIsPlayable(
      reference.pointer,
      _id_setIsPlayable as jni$_.JMethodIDPtr,
      _$boolean.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setYear = _class.instanceMethodId(
    r'setYear',
    r'(Ljava/lang/Integer;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setYear =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setYear(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setYear(
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _setYear(
      reference.pointer,
      _id_setYear as jni$_.JMethodIDPtr,
      _$integer.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setRecordingYear = _class.instanceMethodId(
    r'setRecordingYear',
    r'(Ljava/lang/Integer;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setRecordingYear =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setRecordingYear(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setRecordingYear(
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _setRecordingYear(
      reference.pointer,
      _id_setRecordingYear as jni$_.JMethodIDPtr,
      _$integer.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setRecordingMonth = _class.instanceMethodId(
    r'setRecordingMonth',
    r'(Ljava/lang/Integer;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setRecordingMonth =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setRecordingMonth(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setRecordingMonth(
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _setRecordingMonth(
      reference.pointer,
      _id_setRecordingMonth as jni$_.JMethodIDPtr,
      _$integer.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setRecordingDay = _class.instanceMethodId(
    r'setRecordingDay',
    r'(Ljava/lang/Integer;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setRecordingDay =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setRecordingDay(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setRecordingDay(
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _setRecordingDay(
      reference.pointer,
      _id_setRecordingDay as jni$_.JMethodIDPtr,
      _$integer.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setReleaseYear = _class.instanceMethodId(
    r'setReleaseYear',
    r'(Ljava/lang/Integer;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setReleaseYear =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setReleaseYear(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setReleaseYear(
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _setReleaseYear(
      reference.pointer,
      _id_setReleaseYear as jni$_.JMethodIDPtr,
      _$integer.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setReleaseMonth = _class.instanceMethodId(
    r'setReleaseMonth',
    r'(Ljava/lang/Integer;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setReleaseMonth =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setReleaseMonth(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setReleaseMonth(
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _setReleaseMonth(
      reference.pointer,
      _id_setReleaseMonth as jni$_.JMethodIDPtr,
      _$integer.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setReleaseDay = _class.instanceMethodId(
    r'setReleaseDay',
    r'(Ljava/lang/Integer;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setReleaseDay =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setReleaseDay(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setReleaseDay(
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _setReleaseDay(
      reference.pointer,
      _id_setReleaseDay as jni$_.JMethodIDPtr,
      _$integer.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setWriter = _class.instanceMethodId(
    r'setWriter',
    r'(Ljava/lang/CharSequence;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setWriter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setWriter(java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setWriter(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _setWriter(
      reference.pointer,
      _id_setWriter as jni$_.JMethodIDPtr,
      _$charSequence.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setComposer = _class.instanceMethodId(
    r'setComposer',
    r'(Ljava/lang/CharSequence;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setComposer =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setComposer(java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setComposer(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _setComposer(
      reference.pointer,
      _id_setComposer as jni$_.JMethodIDPtr,
      _$charSequence.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setConductor = _class.instanceMethodId(
    r'setConductor',
    r'(Ljava/lang/CharSequence;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setConductor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setConductor(java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setConductor(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _setConductor(
      reference.pointer,
      _id_setConductor as jni$_.JMethodIDPtr,
      _$charSequence.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setDiscNumber = _class.instanceMethodId(
    r'setDiscNumber',
    r'(Ljava/lang/Integer;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setDiscNumber =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setDiscNumber(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setDiscNumber(
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _setDiscNumber(
      reference.pointer,
      _id_setDiscNumber as jni$_.JMethodIDPtr,
      _$integer.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setTotalDiscCount = _class.instanceMethodId(
    r'setTotalDiscCount',
    r'(Ljava/lang/Integer;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setTotalDiscCount =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setTotalDiscCount(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setTotalDiscCount(
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _setTotalDiscCount(
      reference.pointer,
      _id_setTotalDiscCount as jni$_.JMethodIDPtr,
      _$integer.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setGenre = _class.instanceMethodId(
    r'setGenre',
    r'(Ljava/lang/CharSequence;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setGenre =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setGenre(java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setGenre(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _setGenre(
      reference.pointer,
      _id_setGenre as jni$_.JMethodIDPtr,
      _$charSequence.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setCompilation = _class.instanceMethodId(
    r'setCompilation',
    r'(Ljava/lang/CharSequence;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setCompilation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setCompilation(java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setCompilation(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _setCompilation(
      reference.pointer,
      _id_setCompilation as jni$_.JMethodIDPtr,
      _$charSequence.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setStation = _class.instanceMethodId(
    r'setStation',
    r'(Ljava/lang/CharSequence;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setStation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setStation(java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setStation(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _setStation(
      reference.pointer,
      _id_setStation as jni$_.JMethodIDPtr,
      _$charSequence.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setMediaType = _class.instanceMethodId(
    r'setMediaType',
    r'(Ljava/lang/Integer;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setMediaType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setMediaType(java.lang.Integer integer)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setMediaType(
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _setMediaType(
      reference.pointer,
      _id_setMediaType as jni$_.JMethodIDPtr,
      _$integer.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setExtras = _class.instanceMethodId(
    r'setExtras',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setExtras =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setExtras(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setExtras(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _setExtras(
      reference.pointer,
      _id_setExtras as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_setSupportedCommands = _class.instanceMethodId(
    r'setSupportedCommands',
    r'(Ljava/util/List;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _setSupportedCommands =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder setSupportedCommands(java.util.List<java.lang.String> list)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? setSupportedCommands(
    jni$_.JList<jni$_.JString?>? list,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _setSupportedCommands(
      reference.pointer,
      _id_setSupportedCommands as jni$_.JMethodIDPtr,
      _$list.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_populateFromMetadata = _class.instanceMethodId(
    r'populateFromMetadata',
    r'(Landroidx/media3/common/Metadata;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _populateFromMetadata =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder populateFromMetadata(androidx.media3.common.Metadata metadata)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? populateFromMetadata(
    jni$_.JObject? metadata,
  ) {
    final _$metadata = metadata?.reference ?? jni$_.jNullReference;
    return _populateFromMetadata(
      reference.pointer,
      _id_populateFromMetadata as jni$_.JMethodIDPtr,
      _$metadata.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_populateFromMetadata$1 = _class.instanceMethodId(
    r'populateFromMetadata',
    r'(Ljava/util/List;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _populateFromMetadata$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder populateFromMetadata(java.util.List<androidx.media3.common.Metadata> list)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? populateFromMetadata$1(
    jni$_.JList<jni$_.JObject?>? list,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _populateFromMetadata$1(
      reference.pointer,
      _id_populateFromMetadata$1 as jni$_.JMethodIDPtr,
      _$list.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_populate = _class.instanceMethodId(
    r'populate',
    r'(Landroidx/media3/common/MediaMetadata;)Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _populate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder populate(androidx.media3.common.MediaMetadata mediaMetadata)`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? populate(
    MediaMetadata? mediaMetadata,
  ) {
    final _$mediaMetadata = mediaMetadata?.reference ?? jni$_.jNullReference;
    return _populate(
      reference.pointer,
      _id_populate as jni$_.JMethodIDPtr,
      _$mediaMetadata.pointer,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/common/MediaMetadata;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaMetadata build()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<MediaMetadata?>(const $MediaMetadata$NullableType());
  }
}

final class $MediaMetadata$Builder$NullableType extends jni$_.JObjType<MediaMetadata$Builder?> {
  @jni$_.internal
  const $MediaMetadata$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaMetadata$Builder;';

  @jni$_.internal
  @core$_.override
  MediaMetadata$Builder? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaMetadata$Builder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaMetadata$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaMetadata$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaMetadata$Builder$NullableType) && other is $MediaMetadata$Builder$NullableType;
  }
}

final class $MediaMetadata$Builder$Type extends jni$_.JObjType<MediaMetadata$Builder> {
  @jni$_.internal
  const $MediaMetadata$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaMetadata$Builder;';

  @jni$_.internal
  @core$_.override
  MediaMetadata$Builder fromReference(jni$_.JReference reference) => MediaMetadata$Builder.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaMetadata$Builder?> get nullableType => const $MediaMetadata$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaMetadata$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaMetadata$Builder$Type) && other is $MediaMetadata$Builder$Type;
  }
}

/// from: `androidx.media3.common.MediaMetadata$FolderType`
class MediaMetadata$FolderType extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaMetadata$FolderType> $type;

  @jni$_.internal
  MediaMetadata$FolderType.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaMetadata$FolderType');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaMetadata$FolderType$NullableType();
  static const type = $MediaMetadata$FolderType$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $MediaMetadata$FolderType> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $MediaMetadata$FolderType $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.MediaMetadata$FolderType',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MediaMetadata$FolderType.implement(
    $MediaMetadata$FolderType $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return MediaMetadata$FolderType.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MediaMetadata$FolderType {
  factory $MediaMetadata$FolderType() = _$MediaMetadata$FolderType;
}

final class _$MediaMetadata$FolderType with $MediaMetadata$FolderType {
  _$MediaMetadata$FolderType();
}

final class $MediaMetadata$FolderType$NullableType extends jni$_.JObjType<MediaMetadata$FolderType?> {
  @jni$_.internal
  const $MediaMetadata$FolderType$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaMetadata$FolderType;';

  @jni$_.internal
  @core$_.override
  MediaMetadata$FolderType? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaMetadata$FolderType.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaMetadata$FolderType?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaMetadata$FolderType$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaMetadata$FolderType$NullableType) &&
        other is $MediaMetadata$FolderType$NullableType;
  }
}

final class $MediaMetadata$FolderType$Type extends jni$_.JObjType<MediaMetadata$FolderType> {
  @jni$_.internal
  const $MediaMetadata$FolderType$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaMetadata$FolderType;';

  @jni$_.internal
  @core$_.override
  MediaMetadata$FolderType fromReference(jni$_.JReference reference) => MediaMetadata$FolderType.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaMetadata$FolderType?> get nullableType => const $MediaMetadata$FolderType$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaMetadata$FolderType$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaMetadata$FolderType$Type) && other is $MediaMetadata$FolderType$Type;
  }
}

/// from: `androidx.media3.common.MediaMetadata$MediaType`
class MediaMetadata$MediaType extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaMetadata$MediaType> $type;

  @jni$_.internal
  MediaMetadata$MediaType.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaMetadata$MediaType');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaMetadata$MediaType$NullableType();
  static const type = $MediaMetadata$MediaType$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $MediaMetadata$MediaType> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $MediaMetadata$MediaType $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.MediaMetadata$MediaType',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MediaMetadata$MediaType.implement(
    $MediaMetadata$MediaType $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return MediaMetadata$MediaType.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MediaMetadata$MediaType {
  factory $MediaMetadata$MediaType() = _$MediaMetadata$MediaType;
}

final class _$MediaMetadata$MediaType with $MediaMetadata$MediaType {
  _$MediaMetadata$MediaType();
}

final class $MediaMetadata$MediaType$NullableType extends jni$_.JObjType<MediaMetadata$MediaType?> {
  @jni$_.internal
  const $MediaMetadata$MediaType$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaMetadata$MediaType;';

  @jni$_.internal
  @core$_.override
  MediaMetadata$MediaType? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaMetadata$MediaType.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaMetadata$MediaType?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaMetadata$MediaType$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaMetadata$MediaType$NullableType) &&
        other is $MediaMetadata$MediaType$NullableType;
  }
}

final class $MediaMetadata$MediaType$Type extends jni$_.JObjType<MediaMetadata$MediaType> {
  @jni$_.internal
  const $MediaMetadata$MediaType$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaMetadata$MediaType;';

  @jni$_.internal
  @core$_.override
  MediaMetadata$MediaType fromReference(jni$_.JReference reference) => MediaMetadata$MediaType.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaMetadata$MediaType?> get nullableType => const $MediaMetadata$MediaType$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaMetadata$MediaType$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaMetadata$MediaType$Type) && other is $MediaMetadata$MediaType$Type;
  }
}

/// from: `androidx.media3.common.MediaMetadata$PictureType`
class MediaMetadata$PictureType extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaMetadata$PictureType> $type;

  @jni$_.internal
  MediaMetadata$PictureType.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaMetadata$PictureType');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaMetadata$PictureType$NullableType();
  static const type = $MediaMetadata$PictureType$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $MediaMetadata$PictureType> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $MediaMetadata$PictureType $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.MediaMetadata$PictureType',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory MediaMetadata$PictureType.implement(
    $MediaMetadata$PictureType $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return MediaMetadata$PictureType.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $MediaMetadata$PictureType {
  factory $MediaMetadata$PictureType() = _$MediaMetadata$PictureType;
}

final class _$MediaMetadata$PictureType with $MediaMetadata$PictureType {
  _$MediaMetadata$PictureType();
}

final class $MediaMetadata$PictureType$NullableType extends jni$_.JObjType<MediaMetadata$PictureType?> {
  @jni$_.internal
  const $MediaMetadata$PictureType$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaMetadata$PictureType;';

  @jni$_.internal
  @core$_.override
  MediaMetadata$PictureType? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaMetadata$PictureType.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaMetadata$PictureType?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaMetadata$PictureType$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaMetadata$PictureType$NullableType) &&
        other is $MediaMetadata$PictureType$NullableType;
  }
}

final class $MediaMetadata$PictureType$Type extends jni$_.JObjType<MediaMetadata$PictureType> {
  @jni$_.internal
  const $MediaMetadata$PictureType$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaMetadata$PictureType;';

  @jni$_.internal
  @core$_.override
  MediaMetadata$PictureType fromReference(jni$_.JReference reference) => MediaMetadata$PictureType.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaMetadata$PictureType?> get nullableType => const $MediaMetadata$PictureType$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaMetadata$PictureType$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaMetadata$PictureType$Type) && other is $MediaMetadata$PictureType$Type;
  }
}

/// from: `androidx.media3.common.MediaMetadata`
class MediaMetadata extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MediaMetadata> $type;

  @jni$_.internal
  MediaMetadata.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MediaMetadata');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MediaMetadata$NullableType();
  static const type = $MediaMetadata$Type();

  /// from: `static public final int MEDIA_TYPE_MIXED`
  static const MEDIA_TYPE_MIXED = 0;

  /// from: `static public final int MEDIA_TYPE_MUSIC`
  static const MEDIA_TYPE_MUSIC = 1;

  /// from: `static public final int MEDIA_TYPE_AUDIO_BOOK_CHAPTER`
  static const MEDIA_TYPE_AUDIO_BOOK_CHAPTER = 2;

  /// from: `static public final int MEDIA_TYPE_PODCAST_EPISODE`
  static const MEDIA_TYPE_PODCAST_EPISODE = 3;

  /// from: `static public final int MEDIA_TYPE_RADIO_STATION`
  static const MEDIA_TYPE_RADIO_STATION = 4;

  /// from: `static public final int MEDIA_TYPE_NEWS`
  static const MEDIA_TYPE_NEWS = 5;

  /// from: `static public final int MEDIA_TYPE_VIDEO`
  static const MEDIA_TYPE_VIDEO = 6;

  /// from: `static public final int MEDIA_TYPE_TRAILER`
  static const MEDIA_TYPE_TRAILER = 7;

  /// from: `static public final int MEDIA_TYPE_MOVIE`
  static const MEDIA_TYPE_MOVIE = 8;

  /// from: `static public final int MEDIA_TYPE_TV_SHOW`
  static const MEDIA_TYPE_TV_SHOW = 9;

  /// from: `static public final int MEDIA_TYPE_ALBUM`
  static const MEDIA_TYPE_ALBUM = 10;

  /// from: `static public final int MEDIA_TYPE_ARTIST`
  static const MEDIA_TYPE_ARTIST = 11;

  /// from: `static public final int MEDIA_TYPE_GENRE`
  static const MEDIA_TYPE_GENRE = 12;

  /// from: `static public final int MEDIA_TYPE_PLAYLIST`
  static const MEDIA_TYPE_PLAYLIST = 13;

  /// from: `static public final int MEDIA_TYPE_YEAR`
  static const MEDIA_TYPE_YEAR = 14;

  /// from: `static public final int MEDIA_TYPE_AUDIO_BOOK`
  static const MEDIA_TYPE_AUDIO_BOOK = 15;

  /// from: `static public final int MEDIA_TYPE_PODCAST`
  static const MEDIA_TYPE_PODCAST = 16;

  /// from: `static public final int MEDIA_TYPE_TV_CHANNEL`
  static const MEDIA_TYPE_TV_CHANNEL = 17;

  /// from: `static public final int MEDIA_TYPE_TV_SERIES`
  static const MEDIA_TYPE_TV_SERIES = 18;

  /// from: `static public final int MEDIA_TYPE_TV_SEASON`
  static const MEDIA_TYPE_TV_SEASON = 19;

  /// from: `static public final int MEDIA_TYPE_FOLDER_MIXED`
  static const MEDIA_TYPE_FOLDER_MIXED = 20;

  /// from: `static public final int MEDIA_TYPE_FOLDER_ALBUMS`
  static const MEDIA_TYPE_FOLDER_ALBUMS = 21;

  /// from: `static public final int MEDIA_TYPE_FOLDER_ARTISTS`
  static const MEDIA_TYPE_FOLDER_ARTISTS = 22;

  /// from: `static public final int MEDIA_TYPE_FOLDER_GENRES`
  static const MEDIA_TYPE_FOLDER_GENRES = 23;

  /// from: `static public final int MEDIA_TYPE_FOLDER_PLAYLISTS`
  static const MEDIA_TYPE_FOLDER_PLAYLISTS = 24;

  /// from: `static public final int MEDIA_TYPE_FOLDER_YEARS`
  static const MEDIA_TYPE_FOLDER_YEARS = 25;

  /// from: `static public final int MEDIA_TYPE_FOLDER_AUDIO_BOOKS`
  static const MEDIA_TYPE_FOLDER_AUDIO_BOOKS = 26;

  /// from: `static public final int MEDIA_TYPE_FOLDER_PODCASTS`
  static const MEDIA_TYPE_FOLDER_PODCASTS = 27;

  /// from: `static public final int MEDIA_TYPE_FOLDER_TV_CHANNELS`
  static const MEDIA_TYPE_FOLDER_TV_CHANNELS = 28;

  /// from: `static public final int MEDIA_TYPE_FOLDER_TV_SERIES`
  static const MEDIA_TYPE_FOLDER_TV_SERIES = 29;

  /// from: `static public final int MEDIA_TYPE_FOLDER_TV_SHOWS`
  static const MEDIA_TYPE_FOLDER_TV_SHOWS = 30;

  /// from: `static public final int MEDIA_TYPE_FOLDER_RADIO_STATIONS`
  static const MEDIA_TYPE_FOLDER_RADIO_STATIONS = 31;

  /// from: `static public final int MEDIA_TYPE_FOLDER_NEWS`
  static const MEDIA_TYPE_FOLDER_NEWS = 32;

  /// from: `static public final int MEDIA_TYPE_FOLDER_VIDEOS`
  static const MEDIA_TYPE_FOLDER_VIDEOS = 33;

  /// from: `static public final int MEDIA_TYPE_FOLDER_TRAILERS`
  static const MEDIA_TYPE_FOLDER_TRAILERS = 34;

  /// from: `static public final int MEDIA_TYPE_FOLDER_MOVIES`
  static const MEDIA_TYPE_FOLDER_MOVIES = 35;

  /// from: `static public final int FOLDER_TYPE_NONE`
  static const FOLDER_TYPE_NONE = -1;

  /// from: `static public final int FOLDER_TYPE_MIXED`
  static const FOLDER_TYPE_MIXED = 0;

  /// from: `static public final int FOLDER_TYPE_TITLES`
  static const FOLDER_TYPE_TITLES = 1;

  /// from: `static public final int FOLDER_TYPE_ALBUMS`
  static const FOLDER_TYPE_ALBUMS = 2;

  /// from: `static public final int FOLDER_TYPE_ARTISTS`
  static const FOLDER_TYPE_ARTISTS = 3;

  /// from: `static public final int FOLDER_TYPE_GENRES`
  static const FOLDER_TYPE_GENRES = 4;

  /// from: `static public final int FOLDER_TYPE_PLAYLISTS`
  static const FOLDER_TYPE_PLAYLISTS = 5;

  /// from: `static public final int FOLDER_TYPE_YEARS`
  static const FOLDER_TYPE_YEARS = 6;

  /// from: `static public final int PICTURE_TYPE_OTHER`
  static const PICTURE_TYPE_OTHER = 0;

  /// from: `static public final int PICTURE_TYPE_FILE_ICON`
  static const PICTURE_TYPE_FILE_ICON = 1;

  /// from: `static public final int PICTURE_TYPE_FILE_ICON_OTHER`
  static const PICTURE_TYPE_FILE_ICON_OTHER = 2;

  /// from: `static public final int PICTURE_TYPE_FRONT_COVER`
  static const PICTURE_TYPE_FRONT_COVER = 3;

  /// from: `static public final int PICTURE_TYPE_BACK_COVER`
  static const PICTURE_TYPE_BACK_COVER = 4;

  /// from: `static public final int PICTURE_TYPE_LEAFLET_PAGE`
  static const PICTURE_TYPE_LEAFLET_PAGE = 5;

  /// from: `static public final int PICTURE_TYPE_MEDIA`
  static const PICTURE_TYPE_MEDIA = 6;

  /// from: `static public final int PICTURE_TYPE_LEAD_ARTIST_PERFORMER`
  static const PICTURE_TYPE_LEAD_ARTIST_PERFORMER = 7;

  /// from: `static public final int PICTURE_TYPE_ARTIST_PERFORMER`
  static const PICTURE_TYPE_ARTIST_PERFORMER = 8;

  /// from: `static public final int PICTURE_TYPE_CONDUCTOR`
  static const PICTURE_TYPE_CONDUCTOR = 9;

  /// from: `static public final int PICTURE_TYPE_BAND_ORCHESTRA`
  static const PICTURE_TYPE_BAND_ORCHESTRA = 10;

  /// from: `static public final int PICTURE_TYPE_COMPOSER`
  static const PICTURE_TYPE_COMPOSER = 11;

  /// from: `static public final int PICTURE_TYPE_LYRICIST`
  static const PICTURE_TYPE_LYRICIST = 12;

  /// from: `static public final int PICTURE_TYPE_RECORDING_LOCATION`
  static const PICTURE_TYPE_RECORDING_LOCATION = 13;

  /// from: `static public final int PICTURE_TYPE_DURING_RECORDING`
  static const PICTURE_TYPE_DURING_RECORDING = 14;

  /// from: `static public final int PICTURE_TYPE_DURING_PERFORMANCE`
  static const PICTURE_TYPE_DURING_PERFORMANCE = 15;

  /// from: `static public final int PICTURE_TYPE_MOVIE_VIDEO_SCREEN_CAPTURE`
  static const PICTURE_TYPE_MOVIE_VIDEO_SCREEN_CAPTURE = 16;

  /// from: `static public final int PICTURE_TYPE_A_BRIGHT_COLORED_FISH`
  static const PICTURE_TYPE_A_BRIGHT_COLORED_FISH = 17;

  /// from: `static public final int PICTURE_TYPE_ILLUSTRATION`
  static const PICTURE_TYPE_ILLUSTRATION = 18;

  /// from: `static public final int PICTURE_TYPE_BAND_ARTIST_LOGO`
  static const PICTURE_TYPE_BAND_ARTIST_LOGO = 19;

  /// from: `static public final int PICTURE_TYPE_PUBLISHER_STUDIO_LOGO`
  static const PICTURE_TYPE_PUBLISHER_STUDIO_LOGO = 20;
  static final _id_EMPTY = _class.staticFieldId(
    r'EMPTY',
    r'Landroidx/media3/common/MediaMetadata;',
  );

  /// from: `static public final androidx.media3.common.MediaMetadata EMPTY`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaMetadata? get EMPTY => _id_EMPTY.get(_class, const $MediaMetadata$NullableType());

  static final _id_title = _class.instanceFieldId(
    r'title',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public final java.lang.CharSequence title`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get title => _id_title.get(this, const jni$_.JObjectNullableType());

  static final _id_artist = _class.instanceFieldId(
    r'artist',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public final java.lang.CharSequence artist`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get artist => _id_artist.get(this, const jni$_.JObjectNullableType());

  static final _id_albumTitle = _class.instanceFieldId(
    r'albumTitle',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public final java.lang.CharSequence albumTitle`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get albumTitle => _id_albumTitle.get(this, const jni$_.JObjectNullableType());

  static final _id_albumArtist = _class.instanceFieldId(
    r'albumArtist',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public final java.lang.CharSequence albumArtist`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get albumArtist => _id_albumArtist.get(this, const jni$_.JObjectNullableType());

  static final _id_displayTitle = _class.instanceFieldId(
    r'displayTitle',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public final java.lang.CharSequence displayTitle`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get displayTitle => _id_displayTitle.get(this, const jni$_.JObjectNullableType());

  static final _id_subtitle = _class.instanceFieldId(
    r'subtitle',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public final java.lang.CharSequence subtitle`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get subtitle => _id_subtitle.get(this, const jni$_.JObjectNullableType());

  static final _id_description = _class.instanceFieldId(
    r'description',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public final java.lang.CharSequence description`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get description => _id_description.get(this, const jni$_.JObjectNullableType());

  static final _id_durationMs = _class.instanceFieldId(
    r'durationMs',
    r'Ljava/lang/Long;',
  );

  /// from: `public final java.lang.Long durationMs`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JLong? get durationMs => _id_durationMs.get(this, const jni$_.JLongNullableType());

  static final _id_userRating = _class.instanceFieldId(
    r'userRating',
    r'Landroidx/media3/common/Rating;',
  );

  /// from: `public final androidx.media3.common.Rating userRating`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get userRating => _id_userRating.get(this, const jni$_.JObjectNullableType());

  static final _id_overallRating = _class.instanceFieldId(
    r'overallRating',
    r'Landroidx/media3/common/Rating;',
  );

  /// from: `public final androidx.media3.common.Rating overallRating`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get overallRating => _id_overallRating.get(this, const jni$_.JObjectNullableType());

  static final _id_artworkData = _class.instanceFieldId(
    r'artworkData',
    r'[B',
  );

  /// from: `public final byte[] artworkData`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? get artworkData => _id_artworkData.get(this, const jni$_.JByteArrayNullableType());

  static final _id_artworkDataType = _class.instanceFieldId(
    r'artworkDataType',
    r'Ljava/lang/Integer;',
  );

  /// from: `public final java.lang.Integer artworkDataType`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? get artworkDataType => _id_artworkDataType.get(this, const jni$_.JIntegerNullableType());

  static final _id_artworkUri = _class.instanceFieldId(
    r'artworkUri',
    r'Landroid/net/Uri;',
  );

  /// from: `public final android.net.Uri artworkUri`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get artworkUri => _id_artworkUri.get(this, const jni$_.JObjectNullableType());

  static final _id_trackNumber = _class.instanceFieldId(
    r'trackNumber',
    r'Ljava/lang/Integer;',
  );

  /// from: `public final java.lang.Integer trackNumber`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? get trackNumber => _id_trackNumber.get(this, const jni$_.JIntegerNullableType());

  static final _id_totalTrackCount = _class.instanceFieldId(
    r'totalTrackCount',
    r'Ljava/lang/Integer;',
  );

  /// from: `public final java.lang.Integer totalTrackCount`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? get totalTrackCount => _id_totalTrackCount.get(this, const jni$_.JIntegerNullableType());

  static final _id_folderType = _class.instanceFieldId(
    r'folderType',
    r'Ljava/lang/Integer;',
  );

  /// from: `public final java.lang.Integer folderType`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? get folderType => _id_folderType.get(this, const jni$_.JIntegerNullableType());

  static final _id_isBrowsable = _class.instanceFieldId(
    r'isBrowsable',
    r'Ljava/lang/Boolean;',
  );

  /// from: `public final java.lang.Boolean isBrowsable`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JBoolean? get isBrowsable => _id_isBrowsable.get(this, const jni$_.JBooleanNullableType());

  static final _id_isPlayable = _class.instanceFieldId(
    r'isPlayable',
    r'Ljava/lang/Boolean;',
  );

  /// from: `public final java.lang.Boolean isPlayable`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JBoolean? get isPlayable => _id_isPlayable.get(this, const jni$_.JBooleanNullableType());

  static final _id_year = _class.instanceFieldId(
    r'year',
    r'Ljava/lang/Integer;',
  );

  /// from: `public final java.lang.Integer year`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? get year => _id_year.get(this, const jni$_.JIntegerNullableType());

  static final _id_recordingYear = _class.instanceFieldId(
    r'recordingYear',
    r'Ljava/lang/Integer;',
  );

  /// from: `public final java.lang.Integer recordingYear`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? get recordingYear => _id_recordingYear.get(this, const jni$_.JIntegerNullableType());

  static final _id_recordingMonth = _class.instanceFieldId(
    r'recordingMonth',
    r'Ljava/lang/Integer;',
  );

  /// from: `public final java.lang.Integer recordingMonth`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? get recordingMonth => _id_recordingMonth.get(this, const jni$_.JIntegerNullableType());

  static final _id_recordingDay = _class.instanceFieldId(
    r'recordingDay',
    r'Ljava/lang/Integer;',
  );

  /// from: `public final java.lang.Integer recordingDay`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? get recordingDay => _id_recordingDay.get(this, const jni$_.JIntegerNullableType());

  static final _id_releaseYear = _class.instanceFieldId(
    r'releaseYear',
    r'Ljava/lang/Integer;',
  );

  /// from: `public final java.lang.Integer releaseYear`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? get releaseYear => _id_releaseYear.get(this, const jni$_.JIntegerNullableType());

  static final _id_releaseMonth = _class.instanceFieldId(
    r'releaseMonth',
    r'Ljava/lang/Integer;',
  );

  /// from: `public final java.lang.Integer releaseMonth`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? get releaseMonth => _id_releaseMonth.get(this, const jni$_.JIntegerNullableType());

  static final _id_releaseDay = _class.instanceFieldId(
    r'releaseDay',
    r'Ljava/lang/Integer;',
  );

  /// from: `public final java.lang.Integer releaseDay`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? get releaseDay => _id_releaseDay.get(this, const jni$_.JIntegerNullableType());

  static final _id_writer = _class.instanceFieldId(
    r'writer',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public final java.lang.CharSequence writer`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get writer => _id_writer.get(this, const jni$_.JObjectNullableType());

  static final _id_composer = _class.instanceFieldId(
    r'composer',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public final java.lang.CharSequence composer`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get composer => _id_composer.get(this, const jni$_.JObjectNullableType());

  static final _id_conductor = _class.instanceFieldId(
    r'conductor',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public final java.lang.CharSequence conductor`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get conductor => _id_conductor.get(this, const jni$_.JObjectNullableType());

  static final _id_discNumber = _class.instanceFieldId(
    r'discNumber',
    r'Ljava/lang/Integer;',
  );

  /// from: `public final java.lang.Integer discNumber`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? get discNumber => _id_discNumber.get(this, const jni$_.JIntegerNullableType());

  static final _id_totalDiscCount = _class.instanceFieldId(
    r'totalDiscCount',
    r'Ljava/lang/Integer;',
  );

  /// from: `public final java.lang.Integer totalDiscCount`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? get totalDiscCount => _id_totalDiscCount.get(this, const jni$_.JIntegerNullableType());

  static final _id_genre = _class.instanceFieldId(
    r'genre',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public final java.lang.CharSequence genre`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get genre => _id_genre.get(this, const jni$_.JObjectNullableType());

  static final _id_compilation = _class.instanceFieldId(
    r'compilation',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public final java.lang.CharSequence compilation`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get compilation => _id_compilation.get(this, const jni$_.JObjectNullableType());

  static final _id_station = _class.instanceFieldId(
    r'station',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public final java.lang.CharSequence station`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get station => _id_station.get(this, const jni$_.JObjectNullableType());

  static final _id_mediaType = _class.instanceFieldId(
    r'mediaType',
    r'Ljava/lang/Integer;',
  );

  /// from: `public final java.lang.Integer mediaType`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JInteger? get mediaType => _id_mediaType.get(this, const jni$_.JIntegerNullableType());

  static final _id_extras = _class.instanceFieldId(
    r'extras',
    r'Landroid/os/Bundle;',
  );

  /// from: `public final android.os.Bundle extras`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get extras => _id_extras.get(this, const jni$_.JObjectNullableType());

  static final _id_supportedCommands = _class.instanceFieldId(
    r'supportedCommands',
    r'Lcom/google/common/collect/ImmutableList;',
  );

  /// from: `public final com.google.common.collect.ImmutableList<java.lang.String> supportedCommands`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get supportedCommands => _id_supportedCommands.get(this, const jni$_.JObjectNullableType());

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/common/MediaMetadata$Builder;',
  );

  static final _buildUpon =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.common.MediaMetadata$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  MediaMetadata$Builder? buildUpon() {
    return _buildUpon(
      reference.pointer,
      _id_buildUpon as jni$_.JMethodIDPtr,
    ).object<MediaMetadata$Builder?>(const $MediaMetadata$Builder$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr, _$object.pointer).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr).integer;
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? toBundle() {
    return _toBundle(
      reference.pointer,
      _id_toBundle as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_fromBundle = _class.staticMethodId(
    r'fromBundle',
    r'(Landroid/os/Bundle;)Landroidx/media3/common/MediaMetadata;',
  );

  static final _fromBundle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public androidx.media3.common.MediaMetadata fromBundle(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  static MediaMetadata? fromBundle(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _fromBundle(
      _class.reference.pointer,
      _id_fromBundle as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).object<MediaMetadata?>(const $MediaMetadata$NullableType());
  }
}

final class $MediaMetadata$NullableType extends jni$_.JObjType<MediaMetadata?> {
  @jni$_.internal
  const $MediaMetadata$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaMetadata;';

  @jni$_.internal
  @core$_.override
  MediaMetadata? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MediaMetadata.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaMetadata?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaMetadata$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaMetadata$NullableType) && other is $MediaMetadata$NullableType;
  }
}

final class $MediaMetadata$Type extends jni$_.JObjType<MediaMetadata> {
  @jni$_.internal
  const $MediaMetadata$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MediaMetadata;';

  @jni$_.internal
  @core$_.override
  MediaMetadata fromReference(jni$_.JReference reference) => MediaMetadata.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MediaMetadata?> get nullableType => const $MediaMetadata$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MediaMetadata$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaMetadata$Type) && other is $MediaMetadata$Type;
  }
}

/// from: `androidx.media3.common.MimeTypes`
class MimeTypes extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MimeTypes> $type;

  @jni$_.internal
  MimeTypes.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/MimeTypes');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MimeTypes$NullableType();
  static const type = $MimeTypes$Type();
  static final _id_BASE_TYPE_VIDEO = _class.staticFieldId(
    r'BASE_TYPE_VIDEO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BASE_TYPE_VIDEO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BASE_TYPE_VIDEO => _id_BASE_TYPE_VIDEO.get(_class, const jni$_.JStringNullableType());

  static final _id_BASE_TYPE_AUDIO = _class.staticFieldId(
    r'BASE_TYPE_AUDIO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BASE_TYPE_AUDIO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BASE_TYPE_AUDIO => _id_BASE_TYPE_AUDIO.get(_class, const jni$_.JStringNullableType());

  static final _id_BASE_TYPE_TEXT = _class.staticFieldId(
    r'BASE_TYPE_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BASE_TYPE_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BASE_TYPE_TEXT => _id_BASE_TYPE_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_BASE_TYPE_IMAGE = _class.staticFieldId(
    r'BASE_TYPE_IMAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BASE_TYPE_IMAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BASE_TYPE_IMAGE => _id_BASE_TYPE_IMAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_BASE_TYPE_APPLICATION = _class.staticFieldId(
    r'BASE_TYPE_APPLICATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BASE_TYPE_APPLICATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BASE_TYPE_APPLICATION =>
      _id_BASE_TYPE_APPLICATION.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_MP4 = _class.staticFieldId(
    r'VIDEO_MP4',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_MP4`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_MP4 => _id_VIDEO_MP4.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_MATROSKA = _class.staticFieldId(
    r'VIDEO_MATROSKA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_MATROSKA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_MATROSKA => _id_VIDEO_MATROSKA.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_WEBM = _class.staticFieldId(
    r'VIDEO_WEBM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_WEBM`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_WEBM => _id_VIDEO_WEBM.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_H263 = _class.staticFieldId(
    r'VIDEO_H263',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_H263`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_H263 => _id_VIDEO_H263.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_H264 = _class.staticFieldId(
    r'VIDEO_H264',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_H264`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_H264 => _id_VIDEO_H264.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_APV = _class.staticFieldId(
    r'VIDEO_APV',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_APV`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_APV => _id_VIDEO_APV.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_H265 = _class.staticFieldId(
    r'VIDEO_H265',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_H265`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_H265 => _id_VIDEO_H265.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_VP8 = _class.staticFieldId(
    r'VIDEO_VP8',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_VP8`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_VP8 => _id_VIDEO_VP8.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_VP9 = _class.staticFieldId(
    r'VIDEO_VP9',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_VP9`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_VP9 => _id_VIDEO_VP9.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_AV1 = _class.staticFieldId(
    r'VIDEO_AV1',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_AV1`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_AV1 => _id_VIDEO_AV1.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_MP2T = _class.staticFieldId(
    r'VIDEO_MP2T',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_MP2T`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_MP2T => _id_VIDEO_MP2T.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_MP4V = _class.staticFieldId(
    r'VIDEO_MP4V',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_MP4V`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_MP4V => _id_VIDEO_MP4V.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_MPEG = _class.staticFieldId(
    r'VIDEO_MPEG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_MPEG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_MPEG => _id_VIDEO_MPEG.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_PS = _class.staticFieldId(
    r'VIDEO_PS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_PS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_PS => _id_VIDEO_PS.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_MPEG2 = _class.staticFieldId(
    r'VIDEO_MPEG2',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_MPEG2`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_MPEG2 => _id_VIDEO_MPEG2.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_VC1 = _class.staticFieldId(
    r'VIDEO_VC1',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_VC1`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_VC1 => _id_VIDEO_VC1.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_DIVX = _class.staticFieldId(
    r'VIDEO_DIVX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_DIVX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_DIVX => _id_VIDEO_DIVX.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_FLV = _class.staticFieldId(
    r'VIDEO_FLV',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_FLV`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_FLV => _id_VIDEO_FLV.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_DOLBY_VISION = _class.staticFieldId(
    r'VIDEO_DOLBY_VISION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_DOLBY_VISION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_DOLBY_VISION => _id_VIDEO_DOLBY_VISION.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_OGG = _class.staticFieldId(
    r'VIDEO_OGG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_OGG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_OGG => _id_VIDEO_OGG.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_AVI = _class.staticFieldId(
    r'VIDEO_AVI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_AVI`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_AVI => _id_VIDEO_AVI.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_MJPEG = _class.staticFieldId(
    r'VIDEO_MJPEG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_MJPEG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_MJPEG => _id_VIDEO_MJPEG.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_MP42 = _class.staticFieldId(
    r'VIDEO_MP42',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_MP42`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_MP42 => _id_VIDEO_MP42.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_MP43 = _class.staticFieldId(
    r'VIDEO_MP43',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_MP43`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_MP43 => _id_VIDEO_MP43.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_MV_HEVC = _class.staticFieldId(
    r'VIDEO_MV_HEVC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_MV_HEVC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_MV_HEVC => _id_VIDEO_MV_HEVC.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_RAW = _class.staticFieldId(
    r'VIDEO_RAW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_RAW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_RAW => _id_VIDEO_RAW.get(_class, const jni$_.JStringNullableType());

  static final _id_VIDEO_UNKNOWN = _class.staticFieldId(
    r'VIDEO_UNKNOWN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIDEO_UNKNOWN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIDEO_UNKNOWN => _id_VIDEO_UNKNOWN.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_MP4 = _class.staticFieldId(
    r'AUDIO_MP4',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_MP4`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_MP4 => _id_AUDIO_MP4.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_AAC = _class.staticFieldId(
    r'AUDIO_AAC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_AAC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_AAC => _id_AUDIO_AAC.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_MATROSKA = _class.staticFieldId(
    r'AUDIO_MATROSKA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_MATROSKA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_MATROSKA => _id_AUDIO_MATROSKA.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_WEBM = _class.staticFieldId(
    r'AUDIO_WEBM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_WEBM`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_WEBM => _id_AUDIO_WEBM.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_MPEG = _class.staticFieldId(
    r'AUDIO_MPEG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_MPEG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_MPEG => _id_AUDIO_MPEG.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_MPEG_L1 = _class.staticFieldId(
    r'AUDIO_MPEG_L1',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_MPEG_L1`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_MPEG_L1 => _id_AUDIO_MPEG_L1.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_MPEG_L2 = _class.staticFieldId(
    r'AUDIO_MPEG_L2',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_MPEG_L2`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_MPEG_L2 => _id_AUDIO_MPEG_L2.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_MPEGH_MHA1 = _class.staticFieldId(
    r'AUDIO_MPEGH_MHA1',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_MPEGH_MHA1`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_MPEGH_MHA1 => _id_AUDIO_MPEGH_MHA1.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_MPEGH_MHM1 = _class.staticFieldId(
    r'AUDIO_MPEGH_MHM1',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_MPEGH_MHM1`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_MPEGH_MHM1 => _id_AUDIO_MPEGH_MHM1.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_RAW = _class.staticFieldId(
    r'AUDIO_RAW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_RAW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_RAW => _id_AUDIO_RAW.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_ALAW = _class.staticFieldId(
    r'AUDIO_ALAW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_ALAW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_ALAW => _id_AUDIO_ALAW.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_MLAW = _class.staticFieldId(
    r'AUDIO_MLAW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_MLAW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_MLAW => _id_AUDIO_MLAW.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_AC3 = _class.staticFieldId(
    r'AUDIO_AC3',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_AC3`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_AC3 => _id_AUDIO_AC3.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_E_AC3 = _class.staticFieldId(
    r'AUDIO_E_AC3',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_E_AC3`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_E_AC3 => _id_AUDIO_E_AC3.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_E_AC3_JOC = _class.staticFieldId(
    r'AUDIO_E_AC3_JOC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_E_AC3_JOC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_E_AC3_JOC => _id_AUDIO_E_AC3_JOC.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_AC4 = _class.staticFieldId(
    r'AUDIO_AC4',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_AC4`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_AC4 => _id_AUDIO_AC4.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_TRUEHD = _class.staticFieldId(
    r'AUDIO_TRUEHD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_TRUEHD`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_TRUEHD => _id_AUDIO_TRUEHD.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_DTS = _class.staticFieldId(
    r'AUDIO_DTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_DTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_DTS => _id_AUDIO_DTS.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_DTS_HD = _class.staticFieldId(
    r'AUDIO_DTS_HD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_DTS_HD`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_DTS_HD => _id_AUDIO_DTS_HD.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_DTS_EXPRESS = _class.staticFieldId(
    r'AUDIO_DTS_EXPRESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_DTS_EXPRESS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_DTS_EXPRESS => _id_AUDIO_DTS_EXPRESS.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_DTS_X = _class.staticFieldId(
    r'AUDIO_DTS_X',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_DTS_X`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_DTS_X => _id_AUDIO_DTS_X.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_VORBIS = _class.staticFieldId(
    r'AUDIO_VORBIS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_VORBIS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_VORBIS => _id_AUDIO_VORBIS.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_OPUS = _class.staticFieldId(
    r'AUDIO_OPUS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_OPUS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_OPUS => _id_AUDIO_OPUS.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_AMR = _class.staticFieldId(
    r'AUDIO_AMR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_AMR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_AMR => _id_AUDIO_AMR.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_AMR_NB = _class.staticFieldId(
    r'AUDIO_AMR_NB',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_AMR_NB`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_AMR_NB => _id_AUDIO_AMR_NB.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_AMR_WB = _class.staticFieldId(
    r'AUDIO_AMR_WB',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_AMR_WB`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_AMR_WB => _id_AUDIO_AMR_WB.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_FLAC = _class.staticFieldId(
    r'AUDIO_FLAC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_FLAC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_FLAC => _id_AUDIO_FLAC.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_ALAC = _class.staticFieldId(
    r'AUDIO_ALAC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_ALAC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_ALAC => _id_AUDIO_ALAC.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_MSGSM = _class.staticFieldId(
    r'AUDIO_MSGSM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_MSGSM`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_MSGSM => _id_AUDIO_MSGSM.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_OGG = _class.staticFieldId(
    r'AUDIO_OGG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_OGG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_OGG => _id_AUDIO_OGG.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_WAV = _class.staticFieldId(
    r'AUDIO_WAV',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_WAV`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_WAV => _id_AUDIO_WAV.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_MIDI = _class.staticFieldId(
    r'AUDIO_MIDI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_MIDI`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_MIDI => _id_AUDIO_MIDI.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_IAMF = _class.staticFieldId(
    r'AUDIO_IAMF',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_IAMF`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_IAMF => _id_AUDIO_IAMF.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_EXOPLAYER_MIDI = _class.staticFieldId(
    r'AUDIO_EXOPLAYER_MIDI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_EXOPLAYER_MIDI`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_EXOPLAYER_MIDI =>
      _id_AUDIO_EXOPLAYER_MIDI.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_UNKNOWN = _class.staticFieldId(
    r'AUDIO_UNKNOWN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_UNKNOWN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_UNKNOWN => _id_AUDIO_UNKNOWN.get(_class, const jni$_.JStringNullableType());

  static final _id_TEXT_VTT = _class.staticFieldId(
    r'TEXT_VTT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_VTT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_VTT => _id_TEXT_VTT.get(_class, const jni$_.JStringNullableType());

  static final _id_TEXT_SSA = _class.staticFieldId(
    r'TEXT_SSA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_SSA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_SSA => _id_TEXT_SSA.get(_class, const jni$_.JStringNullableType());

  static final _id_TEXT_UNKNOWN = _class.staticFieldId(
    r'TEXT_UNKNOWN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_UNKNOWN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_UNKNOWN => _id_TEXT_UNKNOWN.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_MP4 = _class.staticFieldId(
    r'APPLICATION_MP4',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_MP4`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_MP4 => _id_APPLICATION_MP4.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_WEBM = _class.staticFieldId(
    r'APPLICATION_WEBM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_WEBM`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_WEBM => _id_APPLICATION_WEBM.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_MATROSKA = _class.staticFieldId(
    r'APPLICATION_MATROSKA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_MATROSKA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_MATROSKA =>
      _id_APPLICATION_MATROSKA.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_MPD = _class.staticFieldId(
    r'APPLICATION_MPD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_MPD`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_MPD => _id_APPLICATION_MPD.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_M3U8 = _class.staticFieldId(
    r'APPLICATION_M3U8',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_M3U8`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_M3U8 => _id_APPLICATION_M3U8.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_SS = _class.staticFieldId(
    r'APPLICATION_SS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_SS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_SS => _id_APPLICATION_SS.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_ID3 = _class.staticFieldId(
    r'APPLICATION_ID3',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_ID3`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_ID3 => _id_APPLICATION_ID3.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_CEA608 = _class.staticFieldId(
    r'APPLICATION_CEA608',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_CEA608`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_CEA608 => _id_APPLICATION_CEA608.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_CEA708 = _class.staticFieldId(
    r'APPLICATION_CEA708',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_CEA708`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_CEA708 => _id_APPLICATION_CEA708.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_SUBRIP = _class.staticFieldId(
    r'APPLICATION_SUBRIP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_SUBRIP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_SUBRIP => _id_APPLICATION_SUBRIP.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_TTML = _class.staticFieldId(
    r'APPLICATION_TTML',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_TTML`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_TTML => _id_APPLICATION_TTML.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_TX3G = _class.staticFieldId(
    r'APPLICATION_TX3G',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_TX3G`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_TX3G => _id_APPLICATION_TX3G.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_MP4VTT = _class.staticFieldId(
    r'APPLICATION_MP4VTT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_MP4VTT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_MP4VTT => _id_APPLICATION_MP4VTT.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_MP4CEA608 = _class.staticFieldId(
    r'APPLICATION_MP4CEA608',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_MP4CEA608`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_MP4CEA608 =>
      _id_APPLICATION_MP4CEA608.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_RAWCC = _class.staticFieldId(
    r'APPLICATION_RAWCC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_RAWCC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_RAWCC => _id_APPLICATION_RAWCC.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_VOBSUB = _class.staticFieldId(
    r'APPLICATION_VOBSUB',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_VOBSUB`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_VOBSUB => _id_APPLICATION_VOBSUB.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_PGS = _class.staticFieldId(
    r'APPLICATION_PGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_PGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_PGS => _id_APPLICATION_PGS.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_SCTE35 = _class.staticFieldId(
    r'APPLICATION_SCTE35',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_SCTE35`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_SCTE35 => _id_APPLICATION_SCTE35.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_SDP = _class.staticFieldId(
    r'APPLICATION_SDP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_SDP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_SDP => _id_APPLICATION_SDP.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_CAMERA_MOTION = _class.staticFieldId(
    r'APPLICATION_CAMERA_MOTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_CAMERA_MOTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_CAMERA_MOTION =>
      _id_APPLICATION_CAMERA_MOTION.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_DEPTH_METADATA = _class.staticFieldId(
    r'APPLICATION_DEPTH_METADATA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_DEPTH_METADATA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_DEPTH_METADATA =>
      _id_APPLICATION_DEPTH_METADATA.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_EMSG = _class.staticFieldId(
    r'APPLICATION_EMSG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_EMSG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_EMSG => _id_APPLICATION_EMSG.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_DVBSUBS = _class.staticFieldId(
    r'APPLICATION_DVBSUBS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_DVBSUBS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_DVBSUBS =>
      _id_APPLICATION_DVBSUBS.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_EXIF = _class.staticFieldId(
    r'APPLICATION_EXIF',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_EXIF`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_EXIF => _id_APPLICATION_EXIF.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_ICY = _class.staticFieldId(
    r'APPLICATION_ICY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_ICY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_ICY => _id_APPLICATION_ICY.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_AIT = _class.staticFieldId(
    r'APPLICATION_AIT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_AIT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_AIT => _id_APPLICATION_AIT.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_RTSP = _class.staticFieldId(
    r'APPLICATION_RTSP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_RTSP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_RTSP => _id_APPLICATION_RTSP.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_MEDIA3_CUES = _class.staticFieldId(
    r'APPLICATION_MEDIA3_CUES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_MEDIA3_CUES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_MEDIA3_CUES =>
      _id_APPLICATION_MEDIA3_CUES.get(_class, const jni$_.JStringNullableType());

  static final _id_APPLICATION_EXTERNALLY_LOADED_IMAGE = _class.staticFieldId(
    r'APPLICATION_EXTERNALLY_LOADED_IMAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPLICATION_EXTERNALLY_LOADED_IMAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPLICATION_EXTERNALLY_LOADED_IMAGE =>
      _id_APPLICATION_EXTERNALLY_LOADED_IMAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_IMAGE_JPEG = _class.staticFieldId(
    r'IMAGE_JPEG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IMAGE_JPEG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IMAGE_JPEG => _id_IMAGE_JPEG.get(_class, const jni$_.JStringNullableType());

  static final _id_IMAGE_JPEG_R = _class.staticFieldId(
    r'IMAGE_JPEG_R',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IMAGE_JPEG_R`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IMAGE_JPEG_R => _id_IMAGE_JPEG_R.get(_class, const jni$_.JStringNullableType());

  static final _id_IMAGE_PNG = _class.staticFieldId(
    r'IMAGE_PNG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IMAGE_PNG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IMAGE_PNG => _id_IMAGE_PNG.get(_class, const jni$_.JStringNullableType());

  static final _id_IMAGE_HEIF = _class.staticFieldId(
    r'IMAGE_HEIF',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IMAGE_HEIF`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IMAGE_HEIF => _id_IMAGE_HEIF.get(_class, const jni$_.JStringNullableType());

  static final _id_IMAGE_HEIC = _class.staticFieldId(
    r'IMAGE_HEIC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IMAGE_HEIC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IMAGE_HEIC => _id_IMAGE_HEIC.get(_class, const jni$_.JStringNullableType());

  static final _id_IMAGE_AVIF = _class.staticFieldId(
    r'IMAGE_AVIF',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IMAGE_AVIF`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IMAGE_AVIF => _id_IMAGE_AVIF.get(_class, const jni$_.JStringNullableType());

  static final _id_IMAGE_BMP = _class.staticFieldId(
    r'IMAGE_BMP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IMAGE_BMP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IMAGE_BMP => _id_IMAGE_BMP.get(_class, const jni$_.JStringNullableType());

  static final _id_IMAGE_WEBP = _class.staticFieldId(
    r'IMAGE_WEBP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IMAGE_WEBP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IMAGE_WEBP => _id_IMAGE_WEBP.get(_class, const jni$_.JStringNullableType());

  static final _id_IMAGE_RAW = _class.staticFieldId(
    r'IMAGE_RAW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IMAGE_RAW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IMAGE_RAW => _id_IMAGE_RAW.get(_class, const jni$_.JStringNullableType());

  static final _id_CODEC_E_AC3_JOC = _class.staticFieldId(
    r'CODEC_E_AC3_JOC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CODEC_E_AC3_JOC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CODEC_E_AC3_JOC => _id_CODEC_E_AC3_JOC.get(_class, const jni$_.JStringNullableType());

  static final _id_registerCustomMimeType = _class.staticMethodId(
    r'registerCustomMimeType',
    r'(Ljava/lang/String;Ljava/lang/String;I)V',
  );

  static final _registerCustomMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `static public void registerCustomMimeType(java.lang.String string, java.lang.String string1, int i)`
  static void registerCustomMimeType(
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _registerCustomMimeType(
      _class.reference.pointer,
      _id_registerCustomMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
      i,
    ).check();
  }

  static final _id_isAudio = _class.staticMethodId(
    r'isAudio',
    r'(Ljava/lang/String;)Z',
  );

  static final _isAudio =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public boolean isAudio(java.lang.String string)`
  static bool isAudio(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _isAudio(_class.reference.pointer, _id_isAudio as jni$_.JMethodIDPtr, _$string.pointer).boolean;
  }

  static final _id_isVideo = _class.staticMethodId(
    r'isVideo',
    r'(Ljava/lang/String;)Z',
  );

  static final _isVideo =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public boolean isVideo(java.lang.String string)`
  static bool isVideo(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _isVideo(_class.reference.pointer, _id_isVideo as jni$_.JMethodIDPtr, _$string.pointer).boolean;
  }

  static final _id_isText = _class.staticMethodId(
    r'isText',
    r'(Ljava/lang/String;)Z',
  );

  static final _isText =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public boolean isText(java.lang.String string)`
  static bool isText(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _isText(_class.reference.pointer, _id_isText as jni$_.JMethodIDPtr, _$string.pointer).boolean;
  }

  static final _id_isImage = _class.staticMethodId(
    r'isImage',
    r'(Ljava/lang/String;)Z',
  );

  static final _isImage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public boolean isImage(java.lang.String string)`
  static bool isImage(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _isImage(_class.reference.pointer, _id_isImage as jni$_.JMethodIDPtr, _$string.pointer).boolean;
  }

  static final _id_allSamplesAreSyncSamples = _class.staticMethodId(
    r'allSamplesAreSyncSamples',
    r'(Ljava/lang/String;Ljava/lang/String;)Z',
  );

  static final _allSamplesAreSyncSamples =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public boolean allSamplesAreSyncSamples(java.lang.String string, java.lang.String string1)`
  static bool allSamplesAreSyncSamples(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _allSamplesAreSyncSamples(
      _class.reference.pointer,
      _id_allSamplesAreSyncSamples as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).boolean;
  }

  static final _id_getVideoMediaMimeType = _class.staticMethodId(
    r'getVideoMediaMimeType',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getVideoMediaMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public java.lang.String getVideoMediaMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? getVideoMediaMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getVideoMediaMimeType(
      _class.reference.pointer,
      _id_getVideoMediaMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_containsCodecsCorrespondingToMimeType = _class.staticMethodId(
    r'containsCodecsCorrespondingToMimeType',
    r'(Ljava/lang/String;Ljava/lang/String;)Z',
  );

  static final _containsCodecsCorrespondingToMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public boolean containsCodecsCorrespondingToMimeType(java.lang.String string, java.lang.String string1)`
  static bool containsCodecsCorrespondingToMimeType(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _containsCodecsCorrespondingToMimeType(
      _class.reference.pointer,
      _id_containsCodecsCorrespondingToMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).boolean;
  }

  static final _id_getCodecsCorrespondingToMimeType = _class.staticMethodId(
    r'getCodecsCorrespondingToMimeType',
    r'(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getCodecsCorrespondingToMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.lang.String getCodecsCorrespondingToMimeType(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? getCodecsCorrespondingToMimeType(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _getCodecsCorrespondingToMimeType(
      _class.reference.pointer,
      _id_getCodecsCorrespondingToMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAudioMediaMimeType = _class.staticMethodId(
    r'getAudioMediaMimeType',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getAudioMediaMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public java.lang.String getAudioMediaMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? getAudioMediaMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getAudioMediaMimeType(
      _class.reference.pointer,
      _id_getAudioMediaMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getTextMediaMimeType = _class.staticMethodId(
    r'getTextMediaMimeType',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getTextMediaMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public java.lang.String getTextMediaMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? getTextMediaMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getTextMediaMimeType(
      _class.reference.pointer,
      _id_getTextMediaMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getMediaMimeType = _class.staticMethodId(
    r'getMediaMimeType',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getMediaMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public java.lang.String getMediaMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? getMediaMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getMediaMimeType(
      _class.reference.pointer,
      _id_getMediaMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getMp4ObjectTypeFromMimeType = _class.staticMethodId(
    r'getMp4ObjectTypeFromMimeType',
    r'(Ljava/lang/String;)Ljava/lang/Byte;',
  );

  static final _getMp4ObjectTypeFromMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public java.lang.Byte getMp4ObjectTypeFromMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JByte? getMp4ObjectTypeFromMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getMp4ObjectTypeFromMimeType(
      _class.reference.pointer,
      _id_getMp4ObjectTypeFromMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JByte?>(const jni$_.JByteNullableType());
  }

  static final _id_getMimeTypeFromMp4ObjectType = _class.staticMethodId(
    r'getMimeTypeFromMp4ObjectType',
    r'(I)Ljava/lang/String;',
  );

  static final _getMimeTypeFromMp4ObjectType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public java.lang.String getMimeTypeFromMp4ObjectType(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? getMimeTypeFromMp4ObjectType(
    int i,
  ) {
    return _getMimeTypeFromMp4ObjectType(
      _class.reference.pointer,
      _id_getMimeTypeFromMp4ObjectType as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_isDolbyVisionCodec = _class.staticMethodId(
    r'isDolbyVisionCodec',
    r'(Ljava/lang/String;Ljava/lang/String;)Z',
  );

  static final _isDolbyVisionCodec =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public boolean isDolbyVisionCodec(java.lang.String string, java.lang.String string1)`
  static bool isDolbyVisionCodec(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _isDolbyVisionCodec(
      _class.reference.pointer,
      _id_isDolbyVisionCodec as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).boolean;
  }

  static final _id_getTrackType = _class.staticMethodId(
    r'getTrackType',
    r'(Ljava/lang/String;)I',
  );

  static final _getTrackType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public int getTrackType(java.lang.String string)`
  static int getTrackType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getTrackType(_class.reference.pointer, _id_getTrackType as jni$_.JMethodIDPtr, _$string.pointer).integer;
  }

  static final _id_getEncoding = _class.staticMethodId(
    r'getEncoding',
    r'(Ljava/lang/String;Ljava/lang/String;)I',
  );

  static final _getEncoding =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public int getEncoding(java.lang.String string, java.lang.String string1)`
  static int getEncoding(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _getEncoding(
      _class.reference.pointer,
      _id_getEncoding as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).integer;
  }

  static final _id_getTrackTypeOfCodec = _class.staticMethodId(
    r'getTrackTypeOfCodec',
    r'(Ljava/lang/String;)I',
  );

  static final _getTrackTypeOfCodec =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public int getTrackTypeOfCodec(java.lang.String string)`
  static int getTrackTypeOfCodec(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getTrackTypeOfCodec(
      _class.reference.pointer,
      _id_getTrackTypeOfCodec as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).integer;
  }

  static final _id_normalizeMimeType = _class.staticMethodId(
    r'normalizeMimeType',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _normalizeMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public java.lang.String normalizeMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? normalizeMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _normalizeMimeType(
      _class.reference.pointer,
      _id_normalizeMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_isMatroska = _class.staticMethodId(
    r'isMatroska',
    r'(Ljava/lang/String;)Z',
  );

  static final _isMatroska =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public boolean isMatroska(java.lang.String string)`
  static bool isMatroska(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _isMatroska(_class.reference.pointer, _id_isMatroska as jni$_.JMethodIDPtr, _$string.pointer).boolean;
  }
}

final class $MimeTypes$NullableType extends jni$_.JObjType<MimeTypes?> {
  @jni$_.internal
  const $MimeTypes$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MimeTypes;';

  @jni$_.internal
  @core$_.override
  MimeTypes? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : MimeTypes.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MimeTypes?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MimeTypes$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MimeTypes$NullableType) && other is $MimeTypes$NullableType;
  }
}

final class $MimeTypes$Type extends jni$_.JObjType<MimeTypes> {
  @jni$_.internal
  const $MimeTypes$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/MimeTypes;';

  @jni$_.internal
  @core$_.override
  MimeTypes fromReference(jni$_.JReference reference) => MimeTypes.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MimeTypes?> get nullableType => const $MimeTypes$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MimeTypes$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MimeTypes$Type) && other is $MimeTypes$Type;
  }
}

/// from: `androidx.media3.common.Effect`
class Effect extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Effect> $type;

  @jni$_.internal
  Effect.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/Effect');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Effect$NullableType();
  static const type = $Effect$Type();
  static final _id_getDurationAfterEffectApplied = _class.instanceMethodId(
    r'getDurationAfterEffectApplied',
    r'(J)J',
  );

  static final _getDurationAfterEffectApplied =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallLongMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public long getDurationAfterEffectApplied(long j)`
  int getDurationAfterEffectApplied(
    int j,
  ) {
    return _getDurationAfterEffectApplied(
      reference.pointer,
      _id_getDurationAfterEffectApplied as jni$_.JMethodIDPtr,
      j,
    ).long;
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $Effect> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getDurationAfterEffectApplied(J)J') {
        final $r = _$impls[$p]!.getDurationAfterEffectApplied(
          $a![0]!.as(const jni$_.JLongType(), releaseOriginal: true).longValue(releaseOriginal: true),
        );
        return jni$_.JLong($r).reference.toPointer();
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $Effect $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.Effect',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Effect.implement(
    $Effect $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return Effect.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Effect {
  factory $Effect({
    required int Function(int j) getDurationAfterEffectApplied,
  }) = _$Effect;

  int getDurationAfterEffectApplied(int j);
}

final class _$Effect with $Effect {
  _$Effect({
    required int Function(int j) getDurationAfterEffectApplied,
  }) : _getDurationAfterEffectApplied = getDurationAfterEffectApplied;

  final int Function(int j) _getDurationAfterEffectApplied;

  int getDurationAfterEffectApplied(int j) {
    return _getDurationAfterEffectApplied(j);
  }
}

final class $Effect$NullableType extends jni$_.JObjType<Effect?> {
  @jni$_.internal
  const $Effect$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/Effect;';

  @jni$_.internal
  @core$_.override
  Effect? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Effect.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Effect?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Effect$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Effect$NullableType) && other is $Effect$NullableType;
  }
}

final class $Effect$Type extends jni$_.JObjType<Effect> {
  @jni$_.internal
  const $Effect$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/Effect;';

  @jni$_.internal
  @core$_.override
  Effect fromReference(jni$_.JReference reference) => Effect.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Effect?> get nullableType => const $Effect$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Effect$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Effect$Type) && other is $Effect$Type;
  }
}

/// from: `androidx.media3.common.audio.AudioProcessor$AudioFormat`
class AudioProcessor$AudioFormat extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AudioProcessor$AudioFormat> $type;

  @jni$_.internal
  AudioProcessor$AudioFormat.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/audio/AudioProcessor$AudioFormat');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AudioProcessor$AudioFormat$NullableType();
  static const type = $AudioProcessor$AudioFormat$Type();
  static final _id_NOT_SET = _class.staticFieldId(
    r'NOT_SET',
    r'Landroidx/media3/common/audio/AudioProcessor$AudioFormat;',
  );

  /// from: `static public final androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET`
  /// The returned object must be released after use, by calling the [release] method.
  static AudioProcessor$AudioFormat? get NOT_SET =>
      _id_NOT_SET.get(_class, const $AudioProcessor$AudioFormat$NullableType());

  static final _id_sampleRate = _class.instanceFieldId(
    r'sampleRate',
    r'I',
  );

  /// from: `public final int sampleRate`
  int get sampleRate => _id_sampleRate.get(this, const jni$_.jintType());

  static final _id_channelCount = _class.instanceFieldId(
    r'channelCount',
    r'I',
  );

  /// from: `public final int channelCount`
  int get channelCount => _id_channelCount.get(this, const jni$_.jintType());

  static final _id_encoding = _class.instanceFieldId(
    r'encoding',
    r'I',
  );

  /// from: `public final int encoding`
  int get encoding => _id_encoding.get(this, const jni$_.jintType());

  static final _id_bytesPerFrame = _class.instanceFieldId(
    r'bytesPerFrame',
    r'I',
  );

  /// from: `public final int bytesPerFrame`
  int get bytesPerFrame => _id_bytesPerFrame.get(this, const jni$_.jintType());

  static final _id_new$ = _class.constructorId(
    r'(Landroidx/media3/common/Format;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void <init>(androidx.media3.common.Format format)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AudioProcessor$AudioFormat(
    jni$_.JObject? format,
  ) {
    final _$format = format?.reference ?? jni$_.jNullReference;
    return AudioProcessor$AudioFormat.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr, _$format.pointer).reference,
    );
  }

  static final _id_new$1 = _class.constructorId(
    r'(III)V',
  );

  static final _new$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int, int)>();

  /// from: `public void <init>(int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AudioProcessor$AudioFormat.new$1(
    int i,
    int i1,
    int i2,
  ) {
    return AudioProcessor$AudioFormat.fromReference(
      _new$1(_class.reference.pointer, _id_new$1 as jni$_.JMethodIDPtr, i, i1, i2).reference,
    );
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr, _$object.pointer).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr).integer;
  }
}

final class $AudioProcessor$AudioFormat$NullableType extends jni$_.JObjType<AudioProcessor$AudioFormat?> {
  @jni$_.internal
  const $AudioProcessor$AudioFormat$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/audio/AudioProcessor$AudioFormat;';

  @jni$_.internal
  @core$_.override
  AudioProcessor$AudioFormat? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : AudioProcessor$AudioFormat.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioProcessor$AudioFormat?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioProcessor$AudioFormat$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioProcessor$AudioFormat$NullableType) &&
        other is $AudioProcessor$AudioFormat$NullableType;
  }
}

final class $AudioProcessor$AudioFormat$Type extends jni$_.JObjType<AudioProcessor$AudioFormat> {
  @jni$_.internal
  const $AudioProcessor$AudioFormat$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/audio/AudioProcessor$AudioFormat;';

  @jni$_.internal
  @core$_.override
  AudioProcessor$AudioFormat fromReference(jni$_.JReference reference) => AudioProcessor$AudioFormat.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioProcessor$AudioFormat?> get nullableType => const $AudioProcessor$AudioFormat$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioProcessor$AudioFormat$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioProcessor$AudioFormat$Type) && other is $AudioProcessor$AudioFormat$Type;
  }
}

/// from: `androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException`
class AudioProcessor$UnhandledAudioFormatException extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AudioProcessor$UnhandledAudioFormatException> $type;

  @jni$_.internal
  AudioProcessor$UnhandledAudioFormatException.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'androidx/media3/common/audio/AudioProcessor$UnhandledAudioFormatException',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AudioProcessor$UnhandledAudioFormatException$NullableType();
  static const type = $AudioProcessor$UnhandledAudioFormatException$Type();
  static final _id_inputAudioFormat = _class.instanceFieldId(
    r'inputAudioFormat',
    r'Landroidx/media3/common/audio/AudioProcessor$AudioFormat;',
  );

  /// from: `public final androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat`
  /// The returned object must be released after use, by calling the [release] method.
  AudioProcessor$AudioFormat? get inputAudioFormat =>
      _id_inputAudioFormat.get(this, const $AudioProcessor$AudioFormat$NullableType());

  static final _id_new$ = _class.constructorId(
    r'(Landroidx/media3/common/audio/AudioProcessor$AudioFormat;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void <init>(androidx.media3.common.audio.AudioProcessor$AudioFormat audioFormat)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AudioProcessor$UnhandledAudioFormatException(
    AudioProcessor$AudioFormat? audioFormat,
  ) {
    final _$audioFormat = audioFormat?.reference ?? jni$_.jNullReference;
    return AudioProcessor$UnhandledAudioFormatException.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr, _$audioFormat.pointer).reference,
    );
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/lang/String;Landroidx/media3/common/audio/AudioProcessor$AudioFormat;)V',
  );

  static final _new$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(java.lang.String string, androidx.media3.common.audio.AudioProcessor$AudioFormat audioFormat)`
  /// The returned object must be released after use, by calling the [release] method.
  factory AudioProcessor$UnhandledAudioFormatException.new$1(
    jni$_.JString? string,
    AudioProcessor$AudioFormat? audioFormat,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$audioFormat = audioFormat?.reference ?? jni$_.jNullReference;
    return AudioProcessor$UnhandledAudioFormatException.fromReference(
      _new$1(
        _class.reference.pointer,
        _id_new$1 as jni$_.JMethodIDPtr,
        _$string.pointer,
        _$audioFormat.pointer,
      ).reference,
    );
  }
}

final class $AudioProcessor$UnhandledAudioFormatException$NullableType
    extends jni$_.JObjType<AudioProcessor$UnhandledAudioFormatException?> {
  @jni$_.internal
  const $AudioProcessor$UnhandledAudioFormatException$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/audio/AudioProcessor$UnhandledAudioFormatException;';

  @jni$_.internal
  @core$_.override
  AudioProcessor$UnhandledAudioFormatException? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : AudioProcessor$UnhandledAudioFormatException.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioProcessor$UnhandledAudioFormatException?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioProcessor$UnhandledAudioFormatException$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioProcessor$UnhandledAudioFormatException$NullableType) &&
        other is $AudioProcessor$UnhandledAudioFormatException$NullableType;
  }
}

final class $AudioProcessor$UnhandledAudioFormatException$Type
    extends jni$_.JObjType<AudioProcessor$UnhandledAudioFormatException> {
  @jni$_.internal
  const $AudioProcessor$UnhandledAudioFormatException$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/audio/AudioProcessor$UnhandledAudioFormatException;';

  @jni$_.internal
  @core$_.override
  AudioProcessor$UnhandledAudioFormatException fromReference(jni$_.JReference reference) =>
      AudioProcessor$UnhandledAudioFormatException.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioProcessor$UnhandledAudioFormatException?> get nullableType =>
      const $AudioProcessor$UnhandledAudioFormatException$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioProcessor$UnhandledAudioFormatException$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioProcessor$UnhandledAudioFormatException$Type) &&
        other is $AudioProcessor$UnhandledAudioFormatException$Type;
  }
}

/// from: `androidx.media3.common.audio.AudioProcessor`
class AudioProcessor extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<AudioProcessor> $type;

  @jni$_.internal
  AudioProcessor.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/common/audio/AudioProcessor');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $AudioProcessor$NullableType();
  static const type = $AudioProcessor$Type();
  static final _id_EMPTY_BUFFER = _class.staticFieldId(
    r'EMPTY_BUFFER',
    r'Ljava/nio/ByteBuffer;',
  );

  /// from: `static public final java.nio.ByteBuffer EMPTY_BUFFER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JByteBuffer? get EMPTY_BUFFER => _id_EMPTY_BUFFER.get(_class, const jni$_.JByteBufferNullableType());

  static final _id_getDurationAfterProcessorApplied = _class.instanceMethodId(
    r'getDurationAfterProcessorApplied',
    r'(J)J',
  );

  static final _getDurationAfterProcessorApplied =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallLongMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public long getDurationAfterProcessorApplied(long j)`
  int getDurationAfterProcessorApplied(
    int j,
  ) {
    return _getDurationAfterProcessorApplied(
      reference.pointer,
      _id_getDurationAfterProcessorApplied as jni$_.JMethodIDPtr,
      j,
    ).long;
  }

  static final _id_configure = _class.instanceMethodId(
    r'configure',
    r'(Landroidx/media3/common/audio/AudioProcessor$AudioFormat;)Landroidx/media3/common/audio/AudioProcessor$AudioFormat;',
  );

  static final _configure =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract androidx.media3.common.audio.AudioProcessor$AudioFormat configure(androidx.media3.common.audio.AudioProcessor$AudioFormat audioFormat)`
  /// The returned object must be released after use, by calling the [release] method.
  AudioProcessor$AudioFormat? configure(
    AudioProcessor$AudioFormat? audioFormat,
  ) {
    final _$audioFormat = audioFormat?.reference ?? jni$_.jNullReference;
    return _configure(
      reference.pointer,
      _id_configure as jni$_.JMethodIDPtr,
      _$audioFormat.pointer,
    ).object<AudioProcessor$AudioFormat?>(const $AudioProcessor$AudioFormat$NullableType());
  }

  static final _id_isActive = _class.instanceMethodId(
    r'isActive',
    r'()Z',
  );

  static final _isActive =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract boolean isActive()`
  bool isActive() {
    return _isActive(reference.pointer, _id_isActive as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_queueInput = _class.instanceMethodId(
    r'queueInput',
    r'(Ljava/nio/ByteBuffer;)V',
  );

  static final _queueInput =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void queueInput(java.nio.ByteBuffer byteBuffer)`
  void queueInput(
    jni$_.JByteBuffer? byteBuffer,
  ) {
    final _$byteBuffer = byteBuffer?.reference ?? jni$_.jNullReference;
    _queueInput(reference.pointer, _id_queueInput as jni$_.JMethodIDPtr, _$byteBuffer.pointer).check();
  }

  static final _id_queueEndOfStream = _class.instanceMethodId(
    r'queueEndOfStream',
    r'()V',
  );

  static final _queueEndOfStream =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract void queueEndOfStream()`
  void queueEndOfStream() {
    _queueEndOfStream(reference.pointer, _id_queueEndOfStream as jni$_.JMethodIDPtr).check();
  }

  static final _id_getOutput = _class.instanceMethodId(
    r'getOutput',
    r'()Ljava/nio/ByteBuffer;',
  );

  static final _getOutput =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.nio.ByteBuffer getOutput()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteBuffer? getOutput() {
    return _getOutput(
      reference.pointer,
      _id_getOutput as jni$_.JMethodIDPtr,
    ).object<jni$_.JByteBuffer?>(const jni$_.JByteBufferNullableType());
  }

  static final _id_isEnded = _class.instanceMethodId(
    r'isEnded',
    r'()Z',
  );

  static final _isEnded =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract boolean isEnded()`
  bool isEnded() {
    return _isEnded(reference.pointer, _id_isEnded as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_flush = _class.instanceMethodId(
    r'flush',
    r'()V',
  );

  static final _flush =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract void flush()`
  void flush() {
    _flush(reference.pointer, _id_flush as jni$_.JMethodIDPtr).check();
  }

  static final _id_reset = _class.instanceMethodId(
    r'reset',
    r'()V',
  );

  static final _reset =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract void reset()`
  void reset() {
    _reset(reference.pointer, _id_reset as jni$_.JMethodIDPtr).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $AudioProcessor> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'getDurationAfterProcessorApplied(J)J') {
        final $r = _$impls[$p]!.getDurationAfterProcessorApplied(
          $a![0]!.as(const jni$_.JLongType(), releaseOriginal: true).longValue(releaseOriginal: true),
        );
        return jni$_.JLong($r).reference.toPointer();
      }
      if ($d ==
          r'configure(Landroidx/media3/common/audio/AudioProcessor$AudioFormat;)Landroidx/media3/common/audio/AudioProcessor$AudioFormat;') {
        final $r = _$impls[$p]!.configure(
          $a![0]?.as(const $AudioProcessor$AudioFormat$Type(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)?.as(const jni$_.JObjectType()).reference.toPointer() ?? jni$_.nullptr;
      }
      if ($d == r'isActive()Z') {
        final $r = _$impls[$p]!.isActive();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'queueInput(Ljava/nio/ByteBuffer;)V') {
        _$impls[$p]!.queueInput(
          $a![0]?.as(const jni$_.JByteBufferType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'queueEndOfStream()V') {
        _$impls[$p]!.queueEndOfStream();
        return jni$_.nullptr;
      }
      if ($d == r'getOutput()Ljava/nio/ByteBuffer;') {
        final $r = _$impls[$p]!.getOutput();
        return ($r as jni$_.JObject?)?.as(const jni$_.JObjectType()).reference.toPointer() ?? jni$_.nullptr;
      }
      if ($d == r'isEnded()Z') {
        final $r = _$impls[$p]!.isEnded();
        return jni$_.JBoolean($r).reference.toPointer();
      }
      if ($d == r'flush()V') {
        _$impls[$p]!.flush();
        return jni$_.nullptr;
      }
      if ($d == r'reset()V') {
        _$impls[$p]!.reset();
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $AudioProcessor $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.common.audio.AudioProcessor',
      $p,
      _$invokePointer,
      [
        if ($impl.queueInput$async) r'queueInput(Ljava/nio/ByteBuffer;)V',
        if ($impl.queueEndOfStream$async) r'queueEndOfStream()V',
        if ($impl.flush$async) r'flush()V',
        if ($impl.reset$async) r'reset()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory AudioProcessor.implement(
    $AudioProcessor $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return AudioProcessor.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $AudioProcessor {
  factory $AudioProcessor({
    required int Function(int j) getDurationAfterProcessorApplied,
    required AudioProcessor$AudioFormat? Function(AudioProcessor$AudioFormat? audioFormat) configure,
    required bool Function() isActive,
    required void Function(jni$_.JByteBuffer? byteBuffer) queueInput,
    bool queueInput$async,
    required void Function() queueEndOfStream,
    bool queueEndOfStream$async,
    required jni$_.JByteBuffer? Function() getOutput,
    required bool Function() isEnded,
    required void Function() flush,
    bool flush$async,
    required void Function() reset,
    bool reset$async,
  }) = _$AudioProcessor;

  int getDurationAfterProcessorApplied(int j);
  AudioProcessor$AudioFormat? configure(AudioProcessor$AudioFormat? audioFormat);
  bool isActive();
  void queueInput(jni$_.JByteBuffer? byteBuffer);
  bool get queueInput$async => false;
  void queueEndOfStream();
  bool get queueEndOfStream$async => false;
  jni$_.JByteBuffer? getOutput();
  bool isEnded();
  void flush();
  bool get flush$async => false;
  void reset();
  bool get reset$async => false;
}

final class _$AudioProcessor with $AudioProcessor {
  _$AudioProcessor({
    required int Function(int j) getDurationAfterProcessorApplied,
    required AudioProcessor$AudioFormat? Function(AudioProcessor$AudioFormat? audioFormat) configure,
    required bool Function() isActive,
    required void Function(jni$_.JByteBuffer? byteBuffer) queueInput,
    this.queueInput$async = false,
    required void Function() queueEndOfStream,
    this.queueEndOfStream$async = false,
    required jni$_.JByteBuffer? Function() getOutput,
    required bool Function() isEnded,
    required void Function() flush,
    this.flush$async = false,
    required void Function() reset,
    this.reset$async = false,
  }) : _getDurationAfterProcessorApplied = getDurationAfterProcessorApplied,
       _configure = configure,
       _isActive = isActive,
       _queueInput = queueInput,
       _queueEndOfStream = queueEndOfStream,
       _getOutput = getOutput,
       _isEnded = isEnded,
       _flush = flush,
       _reset = reset;

  final int Function(int j) _getDurationAfterProcessorApplied;
  final AudioProcessor$AudioFormat? Function(AudioProcessor$AudioFormat? audioFormat) _configure;
  final bool Function() _isActive;
  final void Function(jni$_.JByteBuffer? byteBuffer) _queueInput;
  final bool queueInput$async;
  final void Function() _queueEndOfStream;
  final bool queueEndOfStream$async;
  final jni$_.JByteBuffer? Function() _getOutput;
  final bool Function() _isEnded;
  final void Function() _flush;
  final bool flush$async;
  final void Function() _reset;
  final bool reset$async;

  int getDurationAfterProcessorApplied(int j) {
    return _getDurationAfterProcessorApplied(j);
  }

  AudioProcessor$AudioFormat? configure(AudioProcessor$AudioFormat? audioFormat) {
    return _configure(audioFormat);
  }

  bool isActive() {
    return _isActive();
  }

  void queueInput(jni$_.JByteBuffer? byteBuffer) {
    return _queueInput(byteBuffer);
  }

  void queueEndOfStream() {
    return _queueEndOfStream();
  }

  jni$_.JByteBuffer? getOutput() {
    return _getOutput();
  }

  bool isEnded() {
    return _isEnded();
  }

  void flush() {
    return _flush();
  }

  void reset() {
    return _reset();
  }
}

final class $AudioProcessor$NullableType extends jni$_.JObjType<AudioProcessor?> {
  @jni$_.internal
  const $AudioProcessor$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/audio/AudioProcessor;';

  @jni$_.internal
  @core$_.override
  AudioProcessor? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : AudioProcessor.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioProcessor?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioProcessor$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioProcessor$NullableType) && other is $AudioProcessor$NullableType;
  }
}

final class $AudioProcessor$Type extends jni$_.JObjType<AudioProcessor> {
  @jni$_.internal
  const $AudioProcessor$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/common/audio/AudioProcessor;';

  @jni$_.internal
  @core$_.override
  AudioProcessor fromReference(jni$_.JReference reference) => AudioProcessor.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<AudioProcessor?> get nullableType => const $AudioProcessor$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($AudioProcessor$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($AudioProcessor$Type) && other is $AudioProcessor$Type;
  }
}

/// from: `androidx.media3.transformer.EditedMediaItem$Builder`
class EditedMediaItem$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<EditedMediaItem$Builder> $type;

  @jni$_.internal
  EditedMediaItem$Builder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/transformer/EditedMediaItem$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $EditedMediaItem$Builder$NullableType();
  static const type = $EditedMediaItem$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroidx/media3/common/MediaItem;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void <init>(androidx.media3.common.MediaItem mediaItem)`
  /// The returned object must be released after use, by calling the [release] method.
  factory EditedMediaItem$Builder(
    MediaItem? mediaItem,
  ) {
    final _$mediaItem = mediaItem?.reference ?? jni$_.jNullReference;
    return EditedMediaItem$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr, _$mediaItem.pointer).reference,
    );
  }

  static final _id_setRemoveAudio = _class.instanceMethodId(
    r'setRemoveAudio',
    r'(Z)Landroidx/media3/transformer/EditedMediaItem$Builder;',
  );

  static final _setRemoveAudio =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.transformer.EditedMediaItem$Builder setRemoveAudio(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  EditedMediaItem$Builder? setRemoveAudio(
    bool z,
  ) {
    return _setRemoveAudio(
      reference.pointer,
      _id_setRemoveAudio as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<EditedMediaItem$Builder?>(const $EditedMediaItem$Builder$NullableType());
  }

  static final _id_setRemoveVideo = _class.instanceMethodId(
    r'setRemoveVideo',
    r'(Z)Landroidx/media3/transformer/EditedMediaItem$Builder;',
  );

  static final _setRemoveVideo =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.transformer.EditedMediaItem$Builder setRemoveVideo(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  EditedMediaItem$Builder? setRemoveVideo(
    bool z,
  ) {
    return _setRemoveVideo(
      reference.pointer,
      _id_setRemoveVideo as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<EditedMediaItem$Builder?>(const $EditedMediaItem$Builder$NullableType());
  }

  static final _id_setFlattenForSlowMotion = _class.instanceMethodId(
    r'setFlattenForSlowMotion',
    r'(Z)Landroidx/media3/transformer/EditedMediaItem$Builder;',
  );

  static final _setFlattenForSlowMotion =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.transformer.EditedMediaItem$Builder setFlattenForSlowMotion(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  EditedMediaItem$Builder? setFlattenForSlowMotion(
    bool z,
  ) {
    return _setFlattenForSlowMotion(
      reference.pointer,
      _id_setFlattenForSlowMotion as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<EditedMediaItem$Builder?>(const $EditedMediaItem$Builder$NullableType());
  }

  static final _id_setDurationUs = _class.instanceMethodId(
    r'setDurationUs',
    r'(J)Landroidx/media3/transformer/EditedMediaItem$Builder;',
  );

  static final _setDurationUs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.transformer.EditedMediaItem$Builder setDurationUs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  EditedMediaItem$Builder? setDurationUs(
    int j,
  ) {
    return _setDurationUs(
      reference.pointer,
      _id_setDurationUs as jni$_.JMethodIDPtr,
      j,
    ).object<EditedMediaItem$Builder?>(const $EditedMediaItem$Builder$NullableType());
  }

  static final _id_setFrameRate = _class.instanceMethodId(
    r'setFrameRate',
    r'(I)Landroidx/media3/transformer/EditedMediaItem$Builder;',
  );

  static final _setFrameRate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.transformer.EditedMediaItem$Builder setFrameRate(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  EditedMediaItem$Builder? setFrameRate(
    int i,
  ) {
    return _setFrameRate(
      reference.pointer,
      _id_setFrameRate as jni$_.JMethodIDPtr,
      i,
    ).object<EditedMediaItem$Builder?>(const $EditedMediaItem$Builder$NullableType());
  }

  static final _id_setEffects = _class.instanceMethodId(
    r'setEffects',
    r'(Landroidx/media3/transformer/Effects;)Landroidx/media3/transformer/EditedMediaItem$Builder;',
  );

  static final _setEffects =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.EditedMediaItem$Builder setEffects(androidx.media3.transformer.Effects effects)`
  /// The returned object must be released after use, by calling the [release] method.
  EditedMediaItem$Builder? setEffects(
    Effects? effects,
  ) {
    final _$effects = effects?.reference ?? jni$_.jNullReference;
    return _setEffects(
      reference.pointer,
      _id_setEffects as jni$_.JMethodIDPtr,
      _$effects.pointer,
    ).object<EditedMediaItem$Builder?>(const $EditedMediaItem$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/transformer/EditedMediaItem;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.transformer.EditedMediaItem build()`
  /// The returned object must be released after use, by calling the [release] method.
  EditedMediaItem? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<EditedMediaItem?>(const $EditedMediaItem$NullableType());
  }
}

final class $EditedMediaItem$Builder$NullableType extends jni$_.JObjType<EditedMediaItem$Builder?> {
  @jni$_.internal
  const $EditedMediaItem$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/EditedMediaItem$Builder;';

  @jni$_.internal
  @core$_.override
  EditedMediaItem$Builder? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : EditedMediaItem$Builder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<EditedMediaItem$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($EditedMediaItem$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($EditedMediaItem$Builder$NullableType) &&
        other is $EditedMediaItem$Builder$NullableType;
  }
}

final class $EditedMediaItem$Builder$Type extends jni$_.JObjType<EditedMediaItem$Builder> {
  @jni$_.internal
  const $EditedMediaItem$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/EditedMediaItem$Builder;';

  @jni$_.internal
  @core$_.override
  EditedMediaItem$Builder fromReference(jni$_.JReference reference) => EditedMediaItem$Builder.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<EditedMediaItem$Builder?> get nullableType => const $EditedMediaItem$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($EditedMediaItem$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($EditedMediaItem$Builder$Type) && other is $EditedMediaItem$Builder$Type;
  }
}

/// from: `androidx.media3.transformer.EditedMediaItem`
class EditedMediaItem extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<EditedMediaItem> $type;

  @jni$_.internal
  EditedMediaItem.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/transformer/EditedMediaItem');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $EditedMediaItem$NullableType();
  static const type = $EditedMediaItem$Type();
  static final _id_mediaItem = _class.instanceFieldId(
    r'mediaItem',
    r'Landroidx/media3/common/MediaItem;',
  );

  /// from: `public final androidx.media3.common.MediaItem mediaItem`
  /// The returned object must be released after use, by calling the [release] method.
  MediaItem? get mediaItem => _id_mediaItem.get(this, const $MediaItem$NullableType());

  static final _id_removeAudio = _class.instanceFieldId(
    r'removeAudio',
    r'Z',
  );

  /// from: `public final boolean removeAudio`
  bool get removeAudio => _id_removeAudio.get(this, const jni$_.jbooleanType());

  static final _id_removeVideo = _class.instanceFieldId(
    r'removeVideo',
    r'Z',
  );

  /// from: `public final boolean removeVideo`
  bool get removeVideo => _id_removeVideo.get(this, const jni$_.jbooleanType());

  static final _id_flattenForSlowMotion = _class.instanceFieldId(
    r'flattenForSlowMotion',
    r'Z',
  );

  /// from: `public final boolean flattenForSlowMotion`
  bool get flattenForSlowMotion => _id_flattenForSlowMotion.get(this, const jni$_.jbooleanType());

  static final _id_durationUs = _class.instanceFieldId(
    r'durationUs',
    r'J',
  );

  /// from: `public final long durationUs`
  int get durationUs => _id_durationUs.get(this, const jni$_.jlongType());

  static final _id_frameRate = _class.instanceFieldId(
    r'frameRate',
    r'I',
  );

  /// from: `public final int frameRate`
  int get frameRate => _id_frameRate.get(this, const jni$_.jintType());

  static final _id_effects = _class.instanceFieldId(
    r'effects',
    r'Landroidx/media3/transformer/Effects;',
  );

  /// from: `public final androidx.media3.transformer.Effects effects`
  /// The returned object must be released after use, by calling the [release] method.
  Effects? get effects => _id_effects.get(this, const $Effects$NullableType());

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/transformer/EditedMediaItem$Builder;',
  );

  static final _buildUpon =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.transformer.EditedMediaItem$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  EditedMediaItem$Builder? buildUpon() {
    return _buildUpon(
      reference.pointer,
      _id_buildUpon as jni$_.JMethodIDPtr,
    ).object<EditedMediaItem$Builder?>(const $EditedMediaItem$Builder$NullableType());
  }
}

final class $EditedMediaItem$NullableType extends jni$_.JObjType<EditedMediaItem?> {
  @jni$_.internal
  const $EditedMediaItem$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/EditedMediaItem;';

  @jni$_.internal
  @core$_.override
  EditedMediaItem? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : EditedMediaItem.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<EditedMediaItem?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($EditedMediaItem$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($EditedMediaItem$NullableType) && other is $EditedMediaItem$NullableType;
  }
}

final class $EditedMediaItem$Type extends jni$_.JObjType<EditedMediaItem> {
  @jni$_.internal
  const $EditedMediaItem$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/EditedMediaItem;';

  @jni$_.internal
  @core$_.override
  EditedMediaItem fromReference(jni$_.JReference reference) => EditedMediaItem.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<EditedMediaItem?> get nullableType => const $EditedMediaItem$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($EditedMediaItem$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($EditedMediaItem$Type) && other is $EditedMediaItem$Type;
  }
}

/// from: `androidx.media3.transformer.Effects`
class Effects extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Effects> $type;

  @jni$_.internal
  Effects.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/transformer/Effects');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Effects$NullableType();
  static const type = $Effects$Type();
  static final _id_EMPTY = _class.staticFieldId(
    r'EMPTY',
    r'Landroidx/media3/transformer/Effects;',
  );

  /// from: `static public final androidx.media3.transformer.Effects EMPTY`
  /// The returned object must be released after use, by calling the [release] method.
  static Effects? get EMPTY => _id_EMPTY.get(_class, const $Effects$NullableType());

  static final _id_audioProcessors = _class.instanceFieldId(
    r'audioProcessors',
    r'Lcom/google/common/collect/ImmutableList;',
  );

  /// from: `public final com.google.common.collect.ImmutableList<androidx.media3.common.audio.AudioProcessor> audioProcessors`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get audioProcessors => _id_audioProcessors.get(this, const jni$_.JObjectNullableType());

  static final _id_videoEffects = _class.instanceFieldId(
    r'videoEffects',
    r'Lcom/google/common/collect/ImmutableList;',
  );

  /// from: `public final com.google.common.collect.ImmutableList<androidx.media3.common.Effect> videoEffects`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? get videoEffects => _id_videoEffects.get(this, const jni$_.JObjectNullableType());

  static final _id_new$ = _class.constructorId(
    r'(Ljava/util/List;Ljava/util/List;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(java.util.List<androidx.media3.common.audio.AudioProcessor> list, java.util.List<androidx.media3.common.Effect> list1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Effects(
    jni$_.JList<AudioProcessor?>? list,
    jni$_.JList<Effect?>? list1,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    final _$list1 = list1?.reference ?? jni$_.jNullReference;
    return Effects.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr, _$list.pointer, _$list1.pointer).reference,
    );
  }

  static final _id_createExperimentalSpeedChangingEffect = _class.staticMethodId(
    r'createExperimentalSpeedChangingEffect',
    r'(Landroidx/media3/common/audio/SpeedProvider;)Landroid/util/Pair;',
  );

  static final _createExperimentalSpeedChangingEffect =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public android.util.Pair<androidx.media3.common.audio.AudioProcessor, androidx.media3.common.Effect> createExperimentalSpeedChangingEffect(androidx.media3.common.audio.SpeedProvider speedProvider)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? createExperimentalSpeedChangingEffect(
    jni$_.JObject? speedProvider,
  ) {
    final _$speedProvider = speedProvider?.reference ?? jni$_.jNullReference;
    return _createExperimentalSpeedChangingEffect(
      _class.reference.pointer,
      _id_createExperimentalSpeedChangingEffect as jni$_.JMethodIDPtr,
      _$speedProvider.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $Effects$NullableType extends jni$_.JObjType<Effects?> {
  @jni$_.internal
  const $Effects$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/Effects;';

  @jni$_.internal
  @core$_.override
  Effects? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Effects.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Effects?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Effects$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Effects$NullableType) && other is $Effects$NullableType;
  }
}

final class $Effects$Type extends jni$_.JObjType<Effects> {
  @jni$_.internal
  const $Effects$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/Effects;';

  @jni$_.internal
  @core$_.override
  Effects fromReference(jni$_.JReference reference) => Effects.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Effects?> get nullableType => const $Effects$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Effects$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Effects$Type) && other is $Effects$Type;
  }
}

/// from: `androidx.media3.transformer.Transformer$Builder`
class Transformer$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Transformer$Builder> $type;

  @jni$_.internal
  Transformer$Builder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/transformer/Transformer$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Transformer$Builder$NullableType();
  static const type = $Transformer$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Transformer$Builder(
    Context? context,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return Transformer$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr, _$context.pointer).reference,
    );
  }

  static final _id_setAudioMimeType = _class.instanceMethodId(
    r'setAudioMimeType',
    r'(Ljava/lang/String;)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _setAudioMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.Transformer$Builder setAudioMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? setAudioMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setAudioMimeType(
      reference.pointer,
      _id_setAudioMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_setVideoMimeType = _class.instanceMethodId(
    r'setVideoMimeType',
    r'(Ljava/lang/String;)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _setVideoMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.Transformer$Builder setVideoMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? setVideoMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setVideoMimeType(
      reference.pointer,
      _id_setVideoMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_experimentalSetTrimOptimizationEnabled = _class.instanceMethodId(
    r'experimentalSetTrimOptimizationEnabled',
    r'(Z)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _experimentalSetTrimOptimizationEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.transformer.Transformer$Builder experimentalSetTrimOptimizationEnabled(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? experimentalSetTrimOptimizationEnabled(
    bool z,
  ) {
    return _experimentalSetTrimOptimizationEnabled(
      reference.pointer,
      _id_experimentalSetTrimOptimizationEnabled as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_experimentalSetMp4EditListTrimEnabled = _class.instanceMethodId(
    r'experimentalSetMp4EditListTrimEnabled',
    r'(Z)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _experimentalSetMp4EditListTrimEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.transformer.Transformer$Builder experimentalSetMp4EditListTrimEnabled(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? experimentalSetMp4EditListTrimEnabled(
    bool z,
  ) {
    return _experimentalSetMp4EditListTrimEnabled(
      reference.pointer,
      _id_experimentalSetMp4EditListTrimEnabled as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_setPortraitEncodingEnabled = _class.instanceMethodId(
    r'setPortraitEncodingEnabled',
    r'(Z)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _setPortraitEncodingEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.transformer.Transformer$Builder setPortraitEncodingEnabled(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? setPortraitEncodingEnabled(
    bool z,
  ) {
    return _setPortraitEncodingEnabled(
      reference.pointer,
      _id_setPortraitEncodingEnabled as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_experimentalSetMaxFramesInEncoder = _class.instanceMethodId(
    r'experimentalSetMaxFramesInEncoder',
    r'(I)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _experimentalSetMaxFramesInEncoder =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.transformer.Transformer$Builder experimentalSetMaxFramesInEncoder(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? experimentalSetMaxFramesInEncoder(
    int i,
  ) {
    return _experimentalSetMaxFramesInEncoder(
      reference.pointer,
      _id_experimentalSetMaxFramesInEncoder as jni$_.JMethodIDPtr,
      i,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_setEnsureFileStartsOnVideoFrameEnabled = _class.instanceMethodId(
    r'setEnsureFileStartsOnVideoFrameEnabled',
    r'(Z)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _setEnsureFileStartsOnVideoFrameEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.transformer.Transformer$Builder setEnsureFileStartsOnVideoFrameEnabled(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? setEnsureFileStartsOnVideoFrameEnabled(
    bool z,
  ) {
    return _setEnsureFileStartsOnVideoFrameEnabled(
      reference.pointer,
      _id_setEnsureFileStartsOnVideoFrameEnabled as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_setMaxDelayBetweenMuxerSamplesMs = _class.instanceMethodId(
    r'setMaxDelayBetweenMuxerSamplesMs',
    r'(J)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _setMaxDelayBetweenMuxerSamplesMs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.transformer.Transformer$Builder setMaxDelayBetweenMuxerSamplesMs(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? setMaxDelayBetweenMuxerSamplesMs(
    int j,
  ) {
    return _setMaxDelayBetweenMuxerSamplesMs(
      reference.pointer,
      _id_setMaxDelayBetweenMuxerSamplesMs as jni$_.JMethodIDPtr,
      j,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_addListener = _class.instanceMethodId(
    r'addListener',
    r'(Landroidx/media3/transformer/Transformer$Listener;)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _addListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.Transformer$Builder addListener(androidx.media3.transformer.Transformer$Listener listener)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? addListener(
    Transformer$Listener? listener,
  ) {
    final _$listener = listener?.reference ?? jni$_.jNullReference;
    return _addListener(
      reference.pointer,
      _id_addListener as jni$_.JMethodIDPtr,
      _$listener.pointer,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_removeListener = _class.instanceMethodId(
    r'removeListener',
    r'(Landroidx/media3/transformer/Transformer$Listener;)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _removeListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.Transformer$Builder removeListener(androidx.media3.transformer.Transformer$Listener listener)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? removeListener(
    Transformer$Listener? listener,
  ) {
    final _$listener = listener?.reference ?? jni$_.jNullReference;
    return _removeListener(
      reference.pointer,
      _id_removeListener as jni$_.JMethodIDPtr,
      _$listener.pointer,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_removeAllListeners = _class.instanceMethodId(
    r'removeAllListeners',
    r'()Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _removeAllListeners =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.transformer.Transformer$Builder removeAllListeners()`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? removeAllListeners() {
    return _removeAllListeners(
      reference.pointer,
      _id_removeAllListeners as jni$_.JMethodIDPtr,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_setAssetLoaderFactory = _class.instanceMethodId(
    r'setAssetLoaderFactory',
    r'(Landroidx/media3/transformer/AssetLoader$Factory;)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _setAssetLoaderFactory =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.Transformer$Builder setAssetLoaderFactory(androidx.media3.transformer.AssetLoader$Factory factory)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? setAssetLoaderFactory(
    jni$_.JObject? factory,
  ) {
    final _$factory = factory?.reference ?? jni$_.jNullReference;
    return _setAssetLoaderFactory(
      reference.pointer,
      _id_setAssetLoaderFactory as jni$_.JMethodIDPtr,
      _$factory.pointer,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_setAudioMixerFactory = _class.instanceMethodId(
    r'setAudioMixerFactory',
    r'(Landroidx/media3/transformer/AudioMixer$Factory;)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _setAudioMixerFactory =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.Transformer$Builder setAudioMixerFactory(androidx.media3.transformer.AudioMixer$Factory factory)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? setAudioMixerFactory(
    jni$_.JObject? factory,
  ) {
    final _$factory = factory?.reference ?? jni$_.jNullReference;
    return _setAudioMixerFactory(
      reference.pointer,
      _id_setAudioMixerFactory as jni$_.JMethodIDPtr,
      _$factory.pointer,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_setVideoFrameProcessorFactory = _class.instanceMethodId(
    r'setVideoFrameProcessorFactory',
    r'(Landroidx/media3/common/VideoFrameProcessor$Factory;)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _setVideoFrameProcessorFactory =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.Transformer$Builder setVideoFrameProcessorFactory(androidx.media3.common.VideoFrameProcessor$Factory factory)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? setVideoFrameProcessorFactory(
    jni$_.JObject? factory,
  ) {
    final _$factory = factory?.reference ?? jni$_.jNullReference;
    return _setVideoFrameProcessorFactory(
      reference.pointer,
      _id_setVideoFrameProcessorFactory as jni$_.JMethodIDPtr,
      _$factory.pointer,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_setEncoderFactory = _class.instanceMethodId(
    r'setEncoderFactory',
    r'(Landroidx/media3/transformer/Codec$EncoderFactory;)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _setEncoderFactory =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.Transformer$Builder setEncoderFactory(androidx.media3.transformer.Codec$EncoderFactory encoderFactory)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? setEncoderFactory(
    jni$_.JObject? encoderFactory,
  ) {
    final _$encoderFactory = encoderFactory?.reference ?? jni$_.jNullReference;
    return _setEncoderFactory(
      reference.pointer,
      _id_setEncoderFactory as jni$_.JMethodIDPtr,
      _$encoderFactory.pointer,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_setMuxerFactory = _class.instanceMethodId(
    r'setMuxerFactory',
    r'(Landroidx/media3/muxer/Muxer$Factory;)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _setMuxerFactory =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.Transformer$Builder setMuxerFactory(androidx.media3.muxer.Muxer$Factory factory)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? setMuxerFactory(
    jni$_.JObject? factory,
  ) {
    final _$factory = factory?.reference ?? jni$_.jNullReference;
    return _setMuxerFactory(
      reference.pointer,
      _id_setMuxerFactory as jni$_.JMethodIDPtr,
      _$factory.pointer,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_setLooper = _class.instanceMethodId(
    r'setLooper',
    r'(Landroid/os/Looper;)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _setLooper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.Transformer$Builder setLooper(android.os.Looper looper)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? setLooper(
    jni$_.JObject? looper,
  ) {
    final _$looper = looper?.reference ?? jni$_.jNullReference;
    return _setLooper(
      reference.pointer,
      _id_setLooper as jni$_.JMethodIDPtr,
      _$looper.pointer,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_setDebugViewProvider = _class.instanceMethodId(
    r'setDebugViewProvider',
    r'(Landroidx/media3/common/DebugViewProvider;)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _setDebugViewProvider =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.Transformer$Builder setDebugViewProvider(androidx.media3.common.DebugViewProvider debugViewProvider)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? setDebugViewProvider(
    jni$_.JObject? debugViewProvider,
  ) {
    final _$debugViewProvider = debugViewProvider?.reference ?? jni$_.jNullReference;
    return _setDebugViewProvider(
      reference.pointer,
      _id_setDebugViewProvider as jni$_.JMethodIDPtr,
      _$debugViewProvider.pointer,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_setClock = _class.instanceMethodId(
    r'setClock',
    r'(Landroidx/media3/common/util/Clock;)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _setClock =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.Transformer$Builder setClock(androidx.media3.common.util.Clock clock)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? setClock(
    jni$_.JObject? clock,
  ) {
    final _$clock = clock?.reference ?? jni$_.jNullReference;
    return _setClock(
      reference.pointer,
      _id_setClock as jni$_.JMethodIDPtr,
      _$clock.pointer,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_setUsePlatformDiagnostics = _class.instanceMethodId(
    r'setUsePlatformDiagnostics',
    r'(Z)Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _setUsePlatformDiagnostics =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.transformer.Transformer$Builder setUsePlatformDiagnostics(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? setUsePlatformDiagnostics(
    bool z,
  ) {
    return _setUsePlatformDiagnostics(
      reference.pointer,
      _id_setUsePlatformDiagnostics as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/transformer/Transformer;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.transformer.Transformer build()`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<Transformer?>(const $Transformer$NullableType());
  }
}

final class $Transformer$Builder$NullableType extends jni$_.JObjType<Transformer$Builder?> {
  @jni$_.internal
  const $Transformer$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/Transformer$Builder;';

  @jni$_.internal
  @core$_.override
  Transformer$Builder? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Transformer$Builder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Transformer$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Transformer$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Transformer$Builder$NullableType) && other is $Transformer$Builder$NullableType;
  }
}

final class $Transformer$Builder$Type extends jni$_.JObjType<Transformer$Builder> {
  @jni$_.internal
  const $Transformer$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/Transformer$Builder;';

  @jni$_.internal
  @core$_.override
  Transformer$Builder fromReference(jni$_.JReference reference) => Transformer$Builder.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Transformer$Builder?> get nullableType => const $Transformer$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Transformer$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Transformer$Builder$Type) && other is $Transformer$Builder$Type;
  }
}

/// from: `androidx.media3.transformer.Transformer$Listener`
class Transformer$Listener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Transformer$Listener> $type;

  @jni$_.internal
  Transformer$Listener.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/transformer/Transformer$Listener');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Transformer$Listener$NullableType();
  static const type = $Transformer$Listener$Type();
  static final _id_onCompleted = _class.instanceMethodId(
    r'onCompleted',
    r'(Landroidx/media3/transformer/Composition;Landroidx/media3/transformer/ExportResult;)V',
  );

  static final _onCompleted =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onCompleted(androidx.media3.transformer.Composition composition, androidx.media3.transformer.ExportResult exportResult)`
  void onCompleted(
    jni$_.JObject? composition,
    jni$_.JObject? exportResult,
  ) {
    final _$composition = composition?.reference ?? jni$_.jNullReference;
    final _$exportResult = exportResult?.reference ?? jni$_.jNullReference;
    _onCompleted(
      reference.pointer,
      _id_onCompleted as jni$_.JMethodIDPtr,
      _$composition.pointer,
      _$exportResult.pointer,
    ).check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Landroidx/media3/transformer/Composition;Landroidx/media3/transformer/ExportResult;Landroidx/media3/transformer/ExportException;)V',
  );

  static final _onError =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onError(androidx.media3.transformer.Composition composition, androidx.media3.transformer.ExportResult exportResult, androidx.media3.transformer.ExportException exportException)`
  void onError(
    jni$_.JObject? composition,
    jni$_.JObject? exportResult,
    jni$_.JObject? exportException,
  ) {
    final _$composition = composition?.reference ?? jni$_.jNullReference;
    final _$exportResult = exportResult?.reference ?? jni$_.jNullReference;
    final _$exportException = exportException?.reference ?? jni$_.jNullReference;
    _onError(
      reference.pointer,
      _id_onError as jni$_.JMethodIDPtr,
      _$composition.pointer,
      _$exportResult.pointer,
      _$exportException.pointer,
    ).check();
  }

  static final _id_onFallbackApplied = _class.instanceMethodId(
    r'onFallbackApplied',
    r'(Landroidx/media3/transformer/Composition;Landroidx/media3/transformer/TransformationRequest;Landroidx/media3/transformer/TransformationRequest;)V',
  );

  static final _onFallbackApplied =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onFallbackApplied(androidx.media3.transformer.Composition composition, androidx.media3.transformer.TransformationRequest transformationRequest, androidx.media3.transformer.TransformationRequest transformationRequest1)`
  void onFallbackApplied(
    jni$_.JObject? composition,
    TransformationRequest? transformationRequest,
    TransformationRequest? transformationRequest1,
  ) {
    final _$composition = composition?.reference ?? jni$_.jNullReference;
    final _$transformationRequest = transformationRequest?.reference ?? jni$_.jNullReference;
    final _$transformationRequest1 = transformationRequest1?.reference ?? jni$_.jNullReference;
    _onFallbackApplied(
      reference.pointer,
      _id_onFallbackApplied as jni$_.JMethodIDPtr,
      _$composition.pointer,
      _$transformationRequest.pointer,
      _$transformationRequest1.pointer,
    ).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $Transformer$Listener> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onCompleted(Landroidx/media3/transformer/Composition;Landroidx/media3/transformer/ExportResult;)V') {
        _$impls[$p]!.onCompleted(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'onError(Landroidx/media3/transformer/Composition;Landroidx/media3/transformer/ExportResult;Landroidx/media3/transformer/ExportException;)V') {
        _$impls[$p]!.onError(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![2]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'onFallbackApplied(Landroidx/media3/transformer/Composition;Landroidx/media3/transformer/TransformationRequest;Landroidx/media3/transformer/TransformationRequest;)V') {
        _$impls[$p]!.onFallbackApplied(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]?.as(const $TransformationRequest$Type(), releaseOriginal: true),
          $a![2]?.as(const $TransformationRequest$Type(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $Transformer$Listener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.transformer.Transformer$Listener',
      $p,
      _$invokePointer,
      [
        if ($impl.onCompleted$async)
          r'onCompleted(Landroidx/media3/transformer/Composition;Landroidx/media3/transformer/ExportResult;)V',
        if ($impl.onError$async)
          r'onError(Landroidx/media3/transformer/Composition;Landroidx/media3/transformer/ExportResult;Landroidx/media3/transformer/ExportException;)V',
        if ($impl.onFallbackApplied$async)
          r'onFallbackApplied(Landroidx/media3/transformer/Composition;Landroidx/media3/transformer/TransformationRequest;Landroidx/media3/transformer/TransformationRequest;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Transformer$Listener.implement(
    $Transformer$Listener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return Transformer$Listener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Transformer$Listener {
  factory $Transformer$Listener({
    required void Function(jni$_.JObject? composition, jni$_.JObject? exportResult) onCompleted,
    bool onCompleted$async,
    required void Function(jni$_.JObject? composition, jni$_.JObject? exportResult, jni$_.JObject? exportException)
    onError,
    bool onError$async,
    required void Function(
      jni$_.JObject? composition,
      TransformationRequest? transformationRequest,
      TransformationRequest? transformationRequest1,
    )
    onFallbackApplied,
    bool onFallbackApplied$async,
  }) = _$Transformer$Listener;

  void onCompleted(jni$_.JObject? composition, jni$_.JObject? exportResult);
  bool get onCompleted$async => false;
  void onError(jni$_.JObject? composition, jni$_.JObject? exportResult, jni$_.JObject? exportException);
  bool get onError$async => false;
  void onFallbackApplied(
    jni$_.JObject? composition,
    TransformationRequest? transformationRequest,
    TransformationRequest? transformationRequest1,
  );
  bool get onFallbackApplied$async => false;
}

final class _$Transformer$Listener with $Transformer$Listener {
  _$Transformer$Listener({
    required void Function(jni$_.JObject? composition, jni$_.JObject? exportResult) onCompleted,
    this.onCompleted$async = false,
    required void Function(jni$_.JObject? composition, jni$_.JObject? exportResult, jni$_.JObject? exportException)
    onError,
    this.onError$async = false,
    required void Function(
      jni$_.JObject? composition,
      TransformationRequest? transformationRequest,
      TransformationRequest? transformationRequest1,
    )
    onFallbackApplied,
    this.onFallbackApplied$async = false,
  }) : _onCompleted = onCompleted,
       _onError = onError,
       _onFallbackApplied = onFallbackApplied;

  final void Function(jni$_.JObject? composition, jni$_.JObject? exportResult) _onCompleted;
  final bool onCompleted$async;
  final void Function(jni$_.JObject? composition, jni$_.JObject? exportResult, jni$_.JObject? exportException) _onError;
  final bool onError$async;
  final void Function(
    jni$_.JObject? composition,
    TransformationRequest? transformationRequest,
    TransformationRequest? transformationRequest1,
  )
  _onFallbackApplied;
  final bool onFallbackApplied$async;

  void onCompleted(jni$_.JObject? composition, jni$_.JObject? exportResult) {
    return _onCompleted(composition, exportResult);
  }

  void onError(jni$_.JObject? composition, jni$_.JObject? exportResult, jni$_.JObject? exportException) {
    return _onError(composition, exportResult, exportException);
  }

  void onFallbackApplied(
    jni$_.JObject? composition,
    TransformationRequest? transformationRequest,
    TransformationRequest? transformationRequest1,
  ) {
    return _onFallbackApplied(composition, transformationRequest, transformationRequest1);
  }
}

final class $Transformer$Listener$NullableType extends jni$_.JObjType<Transformer$Listener?> {
  @jni$_.internal
  const $Transformer$Listener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/Transformer$Listener;';

  @jni$_.internal
  @core$_.override
  Transformer$Listener? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Transformer$Listener.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Transformer$Listener?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Transformer$Listener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Transformer$Listener$NullableType) && other is $Transformer$Listener$NullableType;
  }
}

final class $Transformer$Listener$Type extends jni$_.JObjType<Transformer$Listener> {
  @jni$_.internal
  const $Transformer$Listener$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/Transformer$Listener;';

  @jni$_.internal
  @core$_.override
  Transformer$Listener fromReference(jni$_.JReference reference) => Transformer$Listener.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Transformer$Listener?> get nullableType => const $Transformer$Listener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Transformer$Listener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Transformer$Listener$Type) && other is $Transformer$Listener$Type;
  }
}

/// from: `androidx.media3.transformer.Transformer$ProgressState`
class Transformer$ProgressState extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Transformer$ProgressState> $type;

  @jni$_.internal
  Transformer$ProgressState.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/transformer/Transformer$ProgressState');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Transformer$ProgressState$NullableType();
  static const type = $Transformer$ProgressState$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $Transformer$ProgressState> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $Transformer$ProgressState $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.transformer.Transformer$ProgressState',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Transformer$ProgressState.implement(
    $Transformer$ProgressState $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return Transformer$ProgressState.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Transformer$ProgressState {
  factory $Transformer$ProgressState() = _$Transformer$ProgressState;
}

final class _$Transformer$ProgressState with $Transformer$ProgressState {
  _$Transformer$ProgressState();
}

final class $Transformer$ProgressState$NullableType extends jni$_.JObjType<Transformer$ProgressState?> {
  @jni$_.internal
  const $Transformer$ProgressState$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/Transformer$ProgressState;';

  @jni$_.internal
  @core$_.override
  Transformer$ProgressState? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Transformer$ProgressState.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Transformer$ProgressState?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Transformer$ProgressState$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Transformer$ProgressState$NullableType) &&
        other is $Transformer$ProgressState$NullableType;
  }
}

final class $Transformer$ProgressState$Type extends jni$_.JObjType<Transformer$ProgressState> {
  @jni$_.internal
  const $Transformer$ProgressState$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/Transformer$ProgressState;';

  @jni$_.internal
  @core$_.override
  Transformer$ProgressState fromReference(jni$_.JReference reference) => Transformer$ProgressState.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Transformer$ProgressState?> get nullableType => const $Transformer$ProgressState$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Transformer$ProgressState$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Transformer$ProgressState$Type) && other is $Transformer$ProgressState$Type;
  }
}

/// from: `androidx.media3.transformer.Transformer`
class Transformer extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Transformer> $type;

  @jni$_.internal
  Transformer.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/transformer/Transformer');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Transformer$NullableType();
  static const type = $Transformer$Type();

  /// from: `static public final int PROGRESS_STATE_NOT_STARTED`
  static const PROGRESS_STATE_NOT_STARTED = 0;

  /// from: `static public final int PROGRESS_STATE_WAITING_FOR_AVAILABILITY`
  static const PROGRESS_STATE_WAITING_FOR_AVAILABILITY = 1;

  /// from: `static public final int PROGRESS_STATE_AVAILABLE`
  static const PROGRESS_STATE_AVAILABLE = 2;

  /// from: `static public final int PROGRESS_STATE_UNAVAILABLE`
  static const PROGRESS_STATE_UNAVAILABLE = 3;
  static final _id_DEFAULT_MAX_DELAY_BETWEEN_MUXER_SAMPLES_MS = _class.staticFieldId(
    r'DEFAULT_MAX_DELAY_BETWEEN_MUXER_SAMPLES_MS',
    r'J',
  );

  /// from: `static public final long DEFAULT_MAX_DELAY_BETWEEN_MUXER_SAMPLES_MS`
  static int get DEFAULT_MAX_DELAY_BETWEEN_MUXER_SAMPLES_MS =>
      _id_DEFAULT_MAX_DELAY_BETWEEN_MUXER_SAMPLES_MS.get(_class, const jni$_.jlongType());

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/transformer/Transformer$Builder;',
  );

  static final _buildUpon =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.transformer.Transformer$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  Transformer$Builder? buildUpon() {
    return _buildUpon(
      reference.pointer,
      _id_buildUpon as jni$_.JMethodIDPtr,
    ).object<Transformer$Builder?>(const $Transformer$Builder$NullableType());
  }

  static final _id_addListener = _class.instanceMethodId(
    r'addListener',
    r'(Landroidx/media3/transformer/Transformer$Listener;)V',
  );

  static final _addListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void addListener(androidx.media3.transformer.Transformer$Listener listener)`
  void addListener(
    Transformer$Listener? listener,
  ) {
    final _$listener = listener?.reference ?? jni$_.jNullReference;
    _addListener(reference.pointer, _id_addListener as jni$_.JMethodIDPtr, _$listener.pointer).check();
  }

  static final _id_removeListener = _class.instanceMethodId(
    r'removeListener',
    r'(Landroidx/media3/transformer/Transformer$Listener;)V',
  );

  static final _removeListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void removeListener(androidx.media3.transformer.Transformer$Listener listener)`
  void removeListener(
    Transformer$Listener? listener,
  ) {
    final _$listener = listener?.reference ?? jni$_.jNullReference;
    _removeListener(reference.pointer, _id_removeListener as jni$_.JMethodIDPtr, _$listener.pointer).check();
  }

  static final _id_removeAllListeners = _class.instanceMethodId(
    r'removeAllListeners',
    r'()V',
  );

  static final _removeAllListeners =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void removeAllListeners()`
  void removeAllListeners() {
    _removeAllListeners(reference.pointer, _id_removeAllListeners as jni$_.JMethodIDPtr).check();
  }

  static final _id_start = _class.instanceMethodId(
    r'start',
    r'(Landroidx/media3/transformer/Composition;Ljava/lang/String;)V',
  );

  static final _start =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void start(androidx.media3.transformer.Composition composition, java.lang.String string)`
  void start(
    jni$_.JObject? composition,
    jni$_.JString? string,
  ) {
    final _$composition = composition?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _start(reference.pointer, _id_start as jni$_.JMethodIDPtr, _$composition.pointer, _$string.pointer).check();
  }

  static final _id_start$1 = _class.instanceMethodId(
    r'start',
    r'(Landroidx/media3/transformer/EditedMediaItem;Ljava/lang/String;)V',
  );

  static final _start$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void start(androidx.media3.transformer.EditedMediaItem editedMediaItem, java.lang.String string)`
  void start$1(
    EditedMediaItem? editedMediaItem,
    jni$_.JString? string,
  ) {
    final _$editedMediaItem = editedMediaItem?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _start$1(reference.pointer, _id_start$1 as jni$_.JMethodIDPtr, _$editedMediaItem.pointer, _$string.pointer).check();
  }

  static final _id_start$2 = _class.instanceMethodId(
    r'start',
    r'(Landroidx/media3/common/MediaItem;Ljava/lang/String;)V',
  );

  static final _start$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void start(androidx.media3.common.MediaItem mediaItem, java.lang.String string)`
  void start$2(
    MediaItem? mediaItem,
    jni$_.JString? string,
  ) {
    final _$mediaItem = mediaItem?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _start$2(reference.pointer, _id_start$2 as jni$_.JMethodIDPtr, _$mediaItem.pointer, _$string.pointer).check();
  }

  static final _id_getApplicationLooper = _class.instanceMethodId(
    r'getApplicationLooper',
    r'()Landroid/os/Looper;',
  );

  static final _getApplicationLooper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.Looper getApplicationLooper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getApplicationLooper() {
    return _getApplicationLooper(
      reference.pointer,
      _id_getApplicationLooper as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getProgress = _class.instanceMethodId(
    r'getProgress',
    r'(Landroidx/media3/transformer/ProgressHolder;)I',
  );

  static final _getProgress =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public int getProgress(androidx.media3.transformer.ProgressHolder progressHolder)`
  int getProgress(
    jni$_.JObject? progressHolder,
  ) {
    final _$progressHolder = progressHolder?.reference ?? jni$_.jNullReference;
    return _getProgress(reference.pointer, _id_getProgress as jni$_.JMethodIDPtr, _$progressHolder.pointer).integer;
  }

  static final _id_cancel = _class.instanceMethodId(
    r'cancel',
    r'()V',
  );

  static final _cancel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void cancel()`
  void cancel() {
    _cancel(reference.pointer, _id_cancel as jni$_.JMethodIDPtr).check();
  }

  static final _id_resume = _class.instanceMethodId(
    r'resume',
    r'(Landroidx/media3/transformer/Composition;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _resume =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void resume(androidx.media3.transformer.Composition composition, java.lang.String string, java.lang.String string1)`
  void resume(
    jni$_.JObject? composition,
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$composition = composition?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _resume(
      reference.pointer,
      _id_resume as jni$_.JMethodIDPtr,
      _$composition.pointer,
      _$string.pointer,
      _$string1.pointer,
    ).check();
  }
}

final class $Transformer$NullableType extends jni$_.JObjType<Transformer?> {
  @jni$_.internal
  const $Transformer$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/Transformer;';

  @jni$_.internal
  @core$_.override
  Transformer? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Transformer.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Transformer?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Transformer$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Transformer$NullableType) && other is $Transformer$NullableType;
  }
}

final class $Transformer$Type extends jni$_.JObjType<Transformer> {
  @jni$_.internal
  const $Transformer$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/Transformer;';

  @jni$_.internal
  @core$_.override
  Transformer fromReference(jni$_.JReference reference) => Transformer.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Transformer?> get nullableType => const $Transformer$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Transformer$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Transformer$Type) && other is $Transformer$Type;
  }
}

/// from: `androidx.media3.transformer.TransformationRequest$Builder`
class TransformationRequest$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<TransformationRequest$Builder> $type;

  @jni$_.internal
  TransformationRequest$Builder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/transformer/TransformationRequest$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $TransformationRequest$Builder$NullableType();
  static const type = $TransformationRequest$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory TransformationRequest$Builder() {
    return TransformationRequest$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_setVideoMimeType = _class.instanceMethodId(
    r'setVideoMimeType',
    r'(Ljava/lang/String;)Landroidx/media3/transformer/TransformationRequest$Builder;',
  );

  static final _setVideoMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.TransformationRequest$Builder setVideoMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  TransformationRequest$Builder? setVideoMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setVideoMimeType(
      reference.pointer,
      _id_setVideoMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<TransformationRequest$Builder?>(const $TransformationRequest$Builder$NullableType());
  }

  static final _id_setAudioMimeType = _class.instanceMethodId(
    r'setAudioMimeType',
    r'(Ljava/lang/String;)Landroidx/media3/transformer/TransformationRequest$Builder;',
  );

  static final _setAudioMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public androidx.media3.transformer.TransformationRequest$Builder setAudioMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  TransformationRequest$Builder? setAudioMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setAudioMimeType(
      reference.pointer,
      _id_setAudioMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<TransformationRequest$Builder?>(const $TransformationRequest$Builder$NullableType());
  }

  static final _id_setHdrMode = _class.instanceMethodId(
    r'setHdrMode',
    r'(I)Landroidx/media3/transformer/TransformationRequest$Builder;',
  );

  static final _setHdrMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.transformer.TransformationRequest$Builder setHdrMode(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  TransformationRequest$Builder? setHdrMode(
    int i,
  ) {
    return _setHdrMode(
      reference.pointer,
      _id_setHdrMode as jni$_.JMethodIDPtr,
      i,
    ).object<TransformationRequest$Builder?>(const $TransformationRequest$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroidx/media3/transformer/TransformationRequest;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.transformer.TransformationRequest build()`
  /// The returned object must be released after use, by calling the [release] method.
  TransformationRequest? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<TransformationRequest?>(const $TransformationRequest$NullableType());
  }
}

final class $TransformationRequest$Builder$NullableType extends jni$_.JObjType<TransformationRequest$Builder?> {
  @jni$_.internal
  const $TransformationRequest$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/TransformationRequest$Builder;';

  @jni$_.internal
  @core$_.override
  TransformationRequest$Builder? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : TransformationRequest$Builder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<TransformationRequest$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($TransformationRequest$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($TransformationRequest$Builder$NullableType) &&
        other is $TransformationRequest$Builder$NullableType;
  }
}

final class $TransformationRequest$Builder$Type extends jni$_.JObjType<TransformationRequest$Builder> {
  @jni$_.internal
  const $TransformationRequest$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/TransformationRequest$Builder;';

  @jni$_.internal
  @core$_.override
  TransformationRequest$Builder fromReference(jni$_.JReference reference) =>
      TransformationRequest$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<TransformationRequest$Builder?> get nullableType =>
      const $TransformationRequest$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($TransformationRequest$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($TransformationRequest$Builder$Type) && other is $TransformationRequest$Builder$Type;
  }
}

/// from: `androidx.media3.transformer.TransformationRequest`
class TransformationRequest extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<TransformationRequest> $type;

  @jni$_.internal
  TransformationRequest.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/transformer/TransformationRequest');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $TransformationRequest$NullableType();
  static const type = $TransformationRequest$Type();
  static final _id_outputHeight = _class.instanceFieldId(
    r'outputHeight',
    r'I',
  );

  /// from: `public final int outputHeight`
  int get outputHeight => _id_outputHeight.get(this, const jni$_.jintType());

  static final _id_audioMimeType = _class.instanceFieldId(
    r'audioMimeType',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String audioMimeType`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get audioMimeType => _id_audioMimeType.get(this, const jni$_.JStringNullableType());

  static final _id_videoMimeType = _class.instanceFieldId(
    r'videoMimeType',
    r'Ljava/lang/String;',
  );

  /// from: `public final java.lang.String videoMimeType`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get videoMimeType => _id_videoMimeType.get(this, const jni$_.JStringNullableType());

  static final _id_hdrMode = _class.instanceFieldId(
    r'hdrMode',
    r'I',
  );

  /// from: `public final int hdrMode`
  int get hdrMode => _id_hdrMode.get(this, const jni$_.jintType());

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr, _$object.pointer).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr).integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroidx/media3/transformer/TransformationRequest$Builder;',
  );

  static final _buildUpon =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public androidx.media3.transformer.TransformationRequest$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  TransformationRequest$Builder? buildUpon() {
    return _buildUpon(
      reference.pointer,
      _id_buildUpon as jni$_.JMethodIDPtr,
    ).object<TransformationRequest$Builder?>(const $TransformationRequest$Builder$NullableType());
  }
}

final class $TransformationRequest$NullableType extends jni$_.JObjType<TransformationRequest?> {
  @jni$_.internal
  const $TransformationRequest$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/TransformationRequest;';

  @jni$_.internal
  @core$_.override
  TransformationRequest? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : TransformationRequest.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<TransformationRequest?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($TransformationRequest$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($TransformationRequest$NullableType) && other is $TransformationRequest$NullableType;
  }
}

final class $TransformationRequest$Type extends jni$_.JObjType<TransformationRequest> {
  @jni$_.internal
  const $TransformationRequest$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/transformer/TransformationRequest;';

  @jni$_.internal
  @core$_.override
  TransformationRequest fromReference(jni$_.JReference reference) => TransformationRequest.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<TransformationRequest?> get nullableType => const $TransformationRequest$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($TransformationRequest$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($TransformationRequest$Type) && other is $TransformationRequest$Type;
  }
}

/// from: `androidx.media3.effect.Presentation$Layout`
class Presentation$Layout extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Presentation$Layout> $type;

  @jni$_.internal
  Presentation$Layout.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/effect/Presentation$Layout');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Presentation$Layout$NullableType();
  static const type = $Presentation$Layout$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $Presentation$Layout> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $Presentation$Layout $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.media3.effect.Presentation$Layout',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Presentation$Layout.implement(
    $Presentation$Layout $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return Presentation$Layout.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Presentation$Layout {
  factory $Presentation$Layout() = _$Presentation$Layout;
}

final class _$Presentation$Layout with $Presentation$Layout {
  _$Presentation$Layout();
}

final class $Presentation$Layout$NullableType extends jni$_.JObjType<Presentation$Layout?> {
  @jni$_.internal
  const $Presentation$Layout$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/effect/Presentation$Layout;';

  @jni$_.internal
  @core$_.override
  Presentation$Layout? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Presentation$Layout.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Presentation$Layout?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Presentation$Layout$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Presentation$Layout$NullableType) && other is $Presentation$Layout$NullableType;
  }
}

final class $Presentation$Layout$Type extends jni$_.JObjType<Presentation$Layout> {
  @jni$_.internal
  const $Presentation$Layout$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/effect/Presentation$Layout;';

  @jni$_.internal
  @core$_.override
  Presentation$Layout fromReference(jni$_.JReference reference) => Presentation$Layout.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Presentation$Layout?> get nullableType => const $Presentation$Layout$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Presentation$Layout$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Presentation$Layout$Type) && other is $Presentation$Layout$Type;
  }
}

/// from: `androidx.media3.effect.Presentation`
class Presentation extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Presentation> $type;

  @jni$_.internal
  Presentation.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'androidx/media3/effect/Presentation');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Presentation$NullableType();
  static const type = $Presentation$Type();

  /// from: `static public final int LAYOUT_SCALE_TO_FIT`
  static const LAYOUT_SCALE_TO_FIT = 0;

  /// from: `static public final int LAYOUT_SCALE_TO_FIT_WITH_CROP`
  static const LAYOUT_SCALE_TO_FIT_WITH_CROP = 1;

  /// from: `static public final int LAYOUT_STRETCH_TO_FIT`
  static const LAYOUT_STRETCH_TO_FIT = 2;
  static final _id_createForAspectRatio = _class.staticMethodId(
    r'createForAspectRatio',
    r'(FI)Landroidx/media3/effect/Presentation;',
  );

  static final _createForAspectRatio =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double, int)>();

  /// from: `static public androidx.media3.effect.Presentation createForAspectRatio(float f, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static Presentation? createForAspectRatio(
    double f,
    int i,
  ) {
    return _createForAspectRatio(
      _class.reference.pointer,
      _id_createForAspectRatio as jni$_.JMethodIDPtr,
      f,
      i,
    ).object<Presentation?>(const $Presentation$NullableType());
  }

  static final _id_createForHeight = _class.staticMethodId(
    r'createForHeight',
    r'(I)Landroidx/media3/effect/Presentation;',
  );

  static final _createForHeight =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public androidx.media3.effect.Presentation createForHeight(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static Presentation? createForHeight(
    int i,
  ) {
    return _createForHeight(
      _class.reference.pointer,
      _id_createForHeight as jni$_.JMethodIDPtr,
      i,
    ).object<Presentation?>(const $Presentation$NullableType());
  }

  static final _id_createForWidthAndHeight = _class.staticMethodId(
    r'createForWidthAndHeight',
    r'(III)Landroidx/media3/effect/Presentation;',
  );

  static final _createForWidthAndHeight =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int, int)>();

  /// from: `static public androidx.media3.effect.Presentation createForWidthAndHeight(int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  static Presentation? createForWidthAndHeight(
    int i,
    int i1,
    int i2,
  ) {
    return _createForWidthAndHeight(
      _class.reference.pointer,
      _id_createForWidthAndHeight as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
    ).object<Presentation?>(const $Presentation$NullableType());
  }

  static final _id_createForShortSide = _class.staticMethodId(
    r'createForShortSide',
    r'(I)Landroidx/media3/effect/Presentation;',
  );

  static final _createForShortSide =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public androidx.media3.effect.Presentation createForShortSide(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static Presentation? createForShortSide(
    int i,
  ) {
    return _createForShortSide(
      _class.reference.pointer,
      _id_createForShortSide as jni$_.JMethodIDPtr,
      i,
    ).object<Presentation?>(const $Presentation$NullableType());
  }

  static final _id_copyWithTextureMinFilter = _class.instanceMethodId(
    r'copyWithTextureMinFilter',
    r'(I)Landroidx/media3/effect/Presentation;',
  );

  static final _copyWithTextureMinFilter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public androidx.media3.effect.Presentation copyWithTextureMinFilter(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Presentation? copyWithTextureMinFilter(
    int i,
  ) {
    return _copyWithTextureMinFilter(
      reference.pointer,
      _id_copyWithTextureMinFilter as jni$_.JMethodIDPtr,
      i,
    ).object<Presentation?>(const $Presentation$NullableType());
  }

  static final _id_getGlTextureMinFilter = _class.instanceMethodId(
    r'getGlTextureMinFilter',
    r'()I',
  );

  static final _getGlTextureMinFilter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getGlTextureMinFilter()`
  int getGlTextureMinFilter() {
    return _getGlTextureMinFilter(reference.pointer, _id_getGlTextureMinFilter as jni$_.JMethodIDPtr).integer;
  }

  static final _id_configure = _class.instanceMethodId(
    r'configure',
    r'(II)Landroidx/media3/common/util/Size;',
  );

  static final _configure =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public androidx.media3.common.util.Size configure(int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? configure(
    int i,
    int i1,
  ) {
    return _configure(
      reference.pointer,
      _id_configure as jni$_.JMethodIDPtr,
      i,
      i1,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMatrix = _class.instanceMethodId(
    r'getMatrix',
    r'(J)Landroid/graphics/Matrix;',
  );

  static final _getMatrix =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.graphics.Matrix getMatrix(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMatrix(
    int j,
  ) {
    return _getMatrix(
      reference.pointer,
      _id_getMatrix as jni$_.JMethodIDPtr,
      j,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_isNoOp = _class.instanceMethodId(
    r'isNoOp',
    r'(II)Z',
  );

  static final _isNoOp =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public boolean isNoOp(int i, int i1)`
  bool isNoOp(
    int i,
    int i1,
  ) {
    return _isNoOp(reference.pointer, _id_isNoOp as jni$_.JMethodIDPtr, i, i1).boolean;
  }
}

final class $Presentation$NullableType extends jni$_.JObjType<Presentation?> {
  @jni$_.internal
  const $Presentation$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/effect/Presentation;';

  @jni$_.internal
  @core$_.override
  Presentation? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Presentation.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Presentation?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Presentation$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Presentation$NullableType) && other is $Presentation$NullableType;
  }
}

final class $Presentation$Type extends jni$_.JObjType<Presentation> {
  @jni$_.internal
  const $Presentation$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroidx/media3/effect/Presentation;';

  @jni$_.internal
  @core$_.override
  Presentation fromReference(jni$_.JReference reference) => Presentation.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Presentation?> get nullableType => const $Presentation$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Presentation$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Presentation$Type) && other is $Presentation$Type;
  }
}
